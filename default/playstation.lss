
playstation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000026f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000c0  00800060  000026f6  0000278a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001ef  00800120  00800120  0000284a  2**0
                  ALLOC
  3 .debug_aranges 000000c0  00000000  00000000  0000284a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000002fa  00000000  00000000  0000290a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000015e8  00000000  00000000  00002c04  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000071d  00000000  00000000  000041ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000193b  00000000  00000000  00004909  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001d0  00000000  00000000  00006244  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000331  00000000  00000000  00006414  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000b87  00000000  00000000  00006745  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000150  00000000  00000000  000072cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 48 01 	jmp	0x290	; 0x290 <__vector_8>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ef       	ldi	r30, 0xF6	; 246
      68:	f6 e2       	ldi	r31, 0x26	; 38
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 32       	cpi	r26, 0x20	; 32
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	a0 e2       	ldi	r26, 0x20	; 32
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 30       	cpi	r26, 0x0F	; 15
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 94 00 	call	0x128	; 0x128 <main>
      8a:	0c 94 79 13 	jmp	0x26f2	; 0x26f2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_4>:
2 = display 
1 = button
*/

ISR(TIMER2_OVF_vect)
{
      92:	1f 92       	push	r1
      94:	0f 92       	push	r0
      96:	0f b6       	in	r0, 0x3f	; 63
      98:	0f 92       	push	r0
      9a:	11 24       	eor	r1, r1
      9c:	8f 93       	push	r24
      9e:	9f 93       	push	r25
      a0:	ef 93       	push	r30
      a2:	ff 93       	push	r31
	if(RG & 1)
      a4:	80 91 50 01 	lds	r24, 0x0150
      a8:	90 91 51 01 	lds	r25, 0x0151
      ac:	80 ff       	sbrs	r24, 0
      ae:	1b c0       	rjmp	.+54     	; 0xe6 <__vector_4+0x54>
	{
		PORTD = 0x00;
      b0:	12 ba       	out	0x12, r1	; 18
		PORTC = disp_y;
      b2:	80 91 60 00 	lds	r24, 0x0060
      b6:	85 bb       	out	0x15, r24	; 21
		PORTA = disp[disp_y][1];
      b8:	e0 91 60 00 	lds	r30, 0x0060
      bc:	f0 e0       	ldi	r31, 0x00	; 0
      be:	ee 0f       	add	r30, r30
      c0:	ff 1f       	adc	r31, r31
      c2:	ef 5d       	subi	r30, 0xDF	; 223
      c4:	fe 4f       	sbci	r31, 0xFE	; 254
      c6:	80 81       	ld	r24, Z
      c8:	8b bb       	out	0x1b, r24	; 27
		if(disp_y >= 23)
      ca:	80 91 60 00 	lds	r24, 0x0060
      ce:	87 31       	cpi	r24, 0x17	; 23
      d0:	20 f0       	brcs	.+8      	; 0xda <__vector_4+0x48>
			disp_y = 8;
      d2:	88 e0       	ldi	r24, 0x08	; 8
      d4:	80 93 60 00 	sts	0x0060, r24
      d8:	13 c0       	rjmp	.+38     	; 0x100 <__vector_4+0x6e>
		else
			disp_y++;
      da:	80 91 60 00 	lds	r24, 0x0060
      de:	8f 5f       	subi	r24, 0xFF	; 255
      e0:	80 93 60 00 	sts	0x0060, r24
      e4:	0d c0       	rjmp	.+26     	; 0x100 <__vector_4+0x6e>
	}
	else
	{	
		PORTC = 0x00;
      e6:	15 ba       	out	0x15, r1	; 21
		PORTD = disp_y;
      e8:	80 91 60 00 	lds	r24, 0x0060
      ec:	82 bb       	out	0x12, r24	; 18
		PORTA = disp[disp_y][0];
      ee:	e0 91 60 00 	lds	r30, 0x0060
      f2:	f0 e0       	ldi	r31, 0x00	; 0
      f4:	ee 0f       	add	r30, r30
      f6:	ff 1f       	adc	r31, r31
      f8:	e0 5e       	subi	r30, 0xE0	; 224
      fa:	fe 4f       	sbci	r31, 0xFE	; 254
      fc:	80 81       	ld	r24, Z
      fe:	8b bb       	out	0x1b, r24	; 27
	}	
	RG++;
     100:	80 91 50 01 	lds	r24, 0x0150
     104:	90 91 51 01 	lds	r25, 0x0151
     108:	01 96       	adiw	r24, 0x01	; 1
     10a:	90 93 51 01 	sts	0x0151, r25
     10e:	80 93 50 01 	sts	0x0150, r24
	TCNT2 = 0x95;
     112:	85 e9       	ldi	r24, 0x95	; 149
     114:	84 bd       	out	0x24, r24	; 36
}	
     116:	ff 91       	pop	r31
     118:	ef 91       	pop	r30
     11a:	9f 91       	pop	r25
     11c:	8f 91       	pop	r24
     11e:	0f 90       	pop	r0
     120:	0f be       	out	0x3f, r0	; 63
     122:	0f 90       	pop	r0
     124:	1f 90       	pop	r1
     126:	18 95       	reti

00000128 <main>:
	Round_check++;
	TCNT1H = 0xF3;
	TCNT1L = 0xEA;
}								 
int main()
{
     128:	2f 92       	push	r2
     12a:	3f 92       	push	r3
     12c:	4f 92       	push	r4
     12e:	5f 92       	push	r5
     130:	6f 92       	push	r6
     132:	7f 92       	push	r7
     134:	8f 92       	push	r8
     136:	9f 92       	push	r9
     138:	af 92       	push	r10
     13a:	bf 92       	push	r11
     13c:	cf 92       	push	r12
     13e:	df 92       	push	r13
     140:	ef 92       	push	r14
     142:	ff 92       	push	r15
     144:	0f 93       	push	r16
     146:	1f 93       	push	r17
     148:	cf 93       	push	r28
     14a:	df 93       	push	r29
	unsigned int score;
	unsigned char rank;
	DDRA = 0xFF;
     14c:	8f ef       	ldi	r24, 0xFF	; 255
     14e:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0x00;
     150:	17 ba       	out	0x17, r1	; 23
	DDRC = 0xFF;
     152:	84 bb       	out	0x14, r24	; 20
	DDRD = 0x1F;
     154:	8f e1       	ldi	r24, 0x1F	; 31
     156:	81 bb       	out	0x11, r24	; 17
	
	TCCR2 = (1 << CS21) | (1 << CS20);
     158:	83 e0       	ldi	r24, 0x03	; 3
     15a:	85 bd       	out	0x25, r24	; 37
	TCCR1B = (1 << CS12);
     15c:	84 e0       	ldi	r24, 0x04	; 4
     15e:	8e bd       	out	0x2e, r24	; 46
		
	TCNT2 = 0x95;
     160:	85 e9       	ldi	r24, 0x95	; 149
     162:	84 bd       	out	0x24, r24	; 36
	TCNT1H = 0xF3;
     164:	83 ef       	ldi	r24, 0xF3	; 243
     166:	8d bd       	out	0x2d, r24	; 45
	TCNT1L = 0xEA;
     168:	8a ee       	ldi	r24, 0xEA	; 234
     16a:	8c bd       	out	0x2c, r24	; 44
	
	TIMSK = (1 << TOIE1) | (1 << TOIE2);
     16c:	84 e4       	ldi	r24, 0x44	; 68
     16e:	89 bf       	out	0x39, r24	; 57
	sei();
     170:	78 94       	sei
		init_process();
		switch(mode)
		{
			case GAME_1:
				start_count();
				score = Dodge_game((TCNT1H << 8) + TCNT1L);
     172:	0f 2e       	mov	r0, r31
     174:	fd e4       	ldi	r31, 0x4D	; 77
     176:	6f 2e       	mov	r6, r31
     178:	77 24       	eor	r7, r7
     17a:	f0 2d       	mov	r31, r0
     17c:	0f 2e       	mov	r0, r31
     17e:	fc e4       	ldi	r31, 0x4C	; 76
     180:	4f 2e       	mov	r4, r31
     182:	55 24       	eor	r5, r5
     184:	f0 2d       	mov	r31, r0
				TIMSK &= ~(1 << TOIE1);
     186:	0f 2e       	mov	r0, r31
     188:	f9 e5       	ldi	r31, 0x59	; 89
     18a:	cf 2e       	mov	r12, r31
     18c:	dd 24       	eor	r13, r13
     18e:	f0 2d       	mov	r31, r0
     190:	0f 2e       	mov	r0, r31
     192:	f0 e1       	ldi	r31, 0x10	; 16
     194:	2f 2e       	mov	r2, r31
     196:	f7 e2       	ldi	r31, 0x27	; 39
     198:	3f 2e       	mov	r3, r31
     19a:	f0 2d       	mov	r31, r0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     19c:	c0 e9       	ldi	r28, 0x90	; 144
     19e:	d1 e0       	ldi	r29, 0x01	; 1
				curtain();
				print_score(score);
				if((rank = is_record(score, GAME_1)))
				{	
					print_record(rank);
					mode = RESISTER_NAME;
     1a0:	05 e0       	ldi	r16, 0x05	; 5
	TIMSK = (1 << TOIE1) | (1 << TOIE2);
	sei();

	while(1)
	{
		init_process();
     1a2:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <init_process>
		switch(mode)
     1a6:	80 91 52 01 	lds	r24, 0x0152
     1aa:	83 30       	cpi	r24, 0x03	; 3
     1ac:	c9 f1       	breq	.+114    	; 0x220 <main+0xf8>
     1ae:	84 30       	cpi	r24, 0x04	; 4
     1b0:	09 f4       	brne	.+2      	; 0x1b4 <main+0x8c>
     1b2:	6b c0       	rjmp	.+214    	; 0x28a <main+0x162>
     1b4:	82 30       	cpi	r24, 0x02	; 2
     1b6:	a9 f7       	brne	.-22     	; 0x1a2 <main+0x7a>
		{
			case GAME_1:
				start_count();
     1b8:	0e 94 c5 04 	call	0x98a	; 0x98a <start_count>
				score = Dodge_game((TCNT1H << 8) + TCNT1L);
     1bc:	f3 01       	movw	r30, r6
     1be:	80 81       	ld	r24, Z
     1c0:	f2 01       	movw	r30, r4
     1c2:	90 81       	ld	r25, Z
     1c4:	b8 2e       	mov	r11, r24
     1c6:	aa 24       	eor	r10, r10
     1c8:	95 01       	movw	r18, r10
     1ca:	29 0f       	add	r18, r25
     1cc:	31 1d       	adc	r19, r1
     1ce:	c9 01       	movw	r24, r18
     1d0:	0e 94 0a 0c 	call	0x1814	; 0x1814 <Dodge_game>
     1d4:	7c 01       	movw	r14, r24
				TIMSK &= ~(1 << TOIE1);
     1d6:	f6 01       	movw	r30, r12
     1d8:	80 81       	ld	r24, Z
     1da:	8b 7f       	andi	r24, 0xFB	; 251
     1dc:	80 83       	st	Z, r24
     1de:	91 01       	movw	r18, r2
     1e0:	ce 01       	movw	r24, r28
     1e2:	01 97       	sbiw	r24, 0x01	; 1
     1e4:	f1 f7       	brne	.-4      	; 0x1e2 <main+0xba>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     1e6:	21 50       	subi	r18, 0x01	; 1
     1e8:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1ea:	d1 f7       	brne	.-12     	; 0x1e0 <main+0xb8>
				_delay_ms(1000);
				TIMSK |= (1 << TOIE1);
     1ec:	f6 01       	movw	r30, r12
     1ee:	80 81       	ld	r24, Z
     1f0:	84 60       	ori	r24, 0x04	; 4
     1f2:	80 83       	st	Z, r24
				curtain();
     1f4:	0e 94 90 07 	call	0xf20	; 0xf20 <curtain>
				print_score(score);
     1f8:	c7 01       	movw	r24, r14
     1fa:	0e 94 84 05 	call	0xb08	; 0xb08 <print_score>
				if((rank = is_record(score, GAME_1)))
     1fe:	c7 01       	movw	r24, r14
     200:	62 e0       	ldi	r22, 0x02	; 2
     202:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <is_record>
     206:	18 2f       	mov	r17, r24
     208:	88 23       	and	r24, r24
     20a:	59 f2       	breq	.-106    	; 0x1a2 <main+0x7a>
				{	
					print_record(rank);
     20c:	0e 94 92 06 	call	0xd24	; 0xd24 <print_record>
					mode = RESISTER_NAME;
     210:	00 93 52 01 	sts	0x0152, r16
					register_rank(score, rank, GAME_1);
     214:	c7 01       	movw	r24, r14
     216:	61 2f       	mov	r22, r17
     218:	42 e0       	ldi	r20, 0x02	; 2
     21a:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <register_rank>
     21e:	c1 cf       	rjmp	.-126    	; 0x1a2 <main+0x7a>
				}
				break;
			case GAME_2:
				start_count();
     220:	0e 94 c5 04 	call	0x98a	; 0x98a <start_count>
				score = Galug_game((TCNT1H << 8) + TCNT1L);
     224:	f3 01       	movw	r30, r6
     226:	80 81       	ld	r24, Z
     228:	f2 01       	movw	r30, r4
     22a:	90 81       	ld	r25, Z
     22c:	98 2e       	mov	r9, r24
     22e:	88 24       	eor	r8, r8
     230:	94 01       	movw	r18, r8
     232:	29 0f       	add	r18, r25
     234:	31 1d       	adc	r19, r1
     236:	c9 01       	movw	r24, r18
     238:	0e 94 0f 09 	call	0x121e	; 0x121e <Galug_game>
     23c:	7c 01       	movw	r14, r24
				TIMSK &= ~(1 << TOIE1);
     23e:	f6 01       	movw	r30, r12
     240:	80 81       	ld	r24, Z
     242:	8b 7f       	andi	r24, 0xFB	; 251
     244:	80 83       	st	Z, r24
     246:	91 01       	movw	r18, r2
     248:	ce 01       	movw	r24, r28
     24a:	01 97       	sbiw	r24, 0x01	; 1
     24c:	f1 f7       	brne	.-4      	; 0x24a <main+0x122>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     24e:	21 50       	subi	r18, 0x01	; 1
     250:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     252:	d1 f7       	brne	.-12     	; 0x248 <main+0x120>
				_delay_ms(1000);
				TIMSK |= (1 << TOIE1);
     254:	f6 01       	movw	r30, r12
     256:	80 81       	ld	r24, Z
     258:	84 60       	ori	r24, 0x04	; 4
     25a:	80 83       	st	Z, r24
				curtain();
     25c:	0e 94 90 07 	call	0xf20	; 0xf20 <curtain>
				print_score(score);
     260:	c7 01       	movw	r24, r14
     262:	0e 94 84 05 	call	0xb08	; 0xb08 <print_score>
				if((rank = is_record(score, GAME_2)))
     266:	c7 01       	movw	r24, r14
     268:	63 e0       	ldi	r22, 0x03	; 3
     26a:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <is_record>
     26e:	18 2f       	mov	r17, r24
     270:	88 23       	and	r24, r24
     272:	09 f4       	brne	.+2      	; 0x276 <main+0x14e>
     274:	96 cf       	rjmp	.-212    	; 0x1a2 <main+0x7a>
				{	
					print_record(rank);
     276:	0e 94 92 06 	call	0xd24	; 0xd24 <print_record>
					mode = RESISTER_NAME;
     27a:	00 93 52 01 	sts	0x0152, r16
					register_rank(score, rank, GAME_2);
     27e:	c7 01       	movw	r24, r14
     280:	61 2f       	mov	r22, r17
     282:	43 e0       	ldi	r20, 0x03	; 3
     284:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <register_rank>
     288:	8c cf       	rjmp	.-232    	; 0x1a2 <main+0x7a>
				}	
				break;
			case SCORE_BOARD:
				print_rank();
     28a:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <print_rank>
     28e:	89 cf       	rjmp	.-238    	; 0x1a2 <main+0x7a>

00000290 <__vector_8>:
	}	
	RG++;
	TCNT2 = 0x95;
}	
ISR(TIMER1_OVF_vect)
{
     290:	1f 92       	push	r1
     292:	0f 92       	push	r0
     294:	0f b6       	in	r0, 0x3f	; 63
     296:	0f 92       	push	r0
     298:	11 24       	eor	r1, r1
     29a:	2f 93       	push	r18
     29c:	3f 93       	push	r19
     29e:	4f 93       	push	r20
     2a0:	5f 93       	push	r21
     2a2:	6f 93       	push	r22
     2a4:	7f 93       	push	r23
     2a6:	8f 93       	push	r24
     2a8:	9f 93       	push	r25
     2aa:	af 93       	push	r26
     2ac:	bf 93       	push	r27
     2ae:	ef 93       	push	r30
     2b0:	ff 93       	push	r31
	Button_Check(arrow_left,0,mode);
     2b2:	b0 99       	sbic	0x16, 0	; 22
     2b4:	17 c0       	rjmp	.+46     	; 0x2e4 <__vector_8+0x54>
     2b6:	80 91 53 01 	lds	r24, 0x0153
     2ba:	88 23       	and	r24, r24
     2bc:	21 f0       	breq	.+8      	; 0x2c6 <__vector_8+0x36>
     2be:	80 91 53 01 	lds	r24, 0x0153
     2c2:	84 30       	cpi	r24, 0x04	; 4
     2c4:	48 f0       	brcs	.+18     	; 0x2d8 <__vector_8+0x48>
     2c6:	81 e0       	ldi	r24, 0x01	; 1
     2c8:	80 93 53 01 	sts	0x0153, r24
     2cc:	80 91 52 01 	lds	r24, 0x0152
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	0e 94 22 02 	call	0x444	; 0x444 <Button_Event_0>
     2d6:	08 c0       	rjmp	.+16     	; 0x2e8 <__vector_8+0x58>
     2d8:	e3 e5       	ldi	r30, 0x53	; 83
     2da:	f1 e0       	ldi	r31, 0x01	; 1
     2dc:	80 81       	ld	r24, Z
     2de:	8f 5f       	subi	r24, 0xFF	; 255
     2e0:	80 83       	st	Z, r24
     2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <__vector_8+0x58>
     2e4:	10 92 53 01 	sts	0x0153, r1
	Button_Check(arrow_up,1,mode);
     2e8:	b1 99       	sbic	0x16, 1	; 22
     2ea:	17 c0       	rjmp	.+46     	; 0x31a <__vector_8+0x8a>
     2ec:	80 91 54 01 	lds	r24, 0x0154
     2f0:	88 23       	and	r24, r24
     2f2:	21 f0       	breq	.+8      	; 0x2fc <__vector_8+0x6c>
     2f4:	80 91 54 01 	lds	r24, 0x0154
     2f8:	84 30       	cpi	r24, 0x04	; 4
     2fa:	48 f0       	brcs	.+18     	; 0x30e <__vector_8+0x7e>
     2fc:	81 e0       	ldi	r24, 0x01	; 1
     2fe:	80 93 54 01 	sts	0x0154, r24
     302:	80 91 52 01 	lds	r24, 0x0152
     306:	90 e0       	ldi	r25, 0x00	; 0
     308:	0e 94 8d 02 	call	0x51a	; 0x51a <Button_Event_1>
     30c:	08 c0       	rjmp	.+16     	; 0x31e <__vector_8+0x8e>
     30e:	e4 e5       	ldi	r30, 0x54	; 84
     310:	f1 e0       	ldi	r31, 0x01	; 1
     312:	80 81       	ld	r24, Z
     314:	8f 5f       	subi	r24, 0xFF	; 255
     316:	80 83       	st	Z, r24
     318:	02 c0       	rjmp	.+4      	; 0x31e <__vector_8+0x8e>
     31a:	10 92 54 01 	sts	0x0154, r1
	Button_Check(arrow_right,2,mode);
     31e:	b2 99       	sbic	0x16, 2	; 22
     320:	17 c0       	rjmp	.+46     	; 0x350 <__vector_8+0xc0>
     322:	80 91 55 01 	lds	r24, 0x0155
     326:	88 23       	and	r24, r24
     328:	21 f0       	breq	.+8      	; 0x332 <__vector_8+0xa2>
     32a:	80 91 55 01 	lds	r24, 0x0155
     32e:	84 30       	cpi	r24, 0x04	; 4
     330:	48 f0       	brcs	.+18     	; 0x344 <__vector_8+0xb4>
     332:	81 e0       	ldi	r24, 0x01	; 1
     334:	80 93 55 01 	sts	0x0155, r24
     338:	80 91 52 01 	lds	r24, 0x0152
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	0e 94 0f 03 	call	0x61e	; 0x61e <Button_Event_2>
     342:	08 c0       	rjmp	.+16     	; 0x354 <__vector_8+0xc4>
     344:	e5 e5       	ldi	r30, 0x55	; 85
     346:	f1 e0       	ldi	r31, 0x01	; 1
     348:	80 81       	ld	r24, Z
     34a:	8f 5f       	subi	r24, 0xFF	; 255
     34c:	80 83       	st	Z, r24
     34e:	02 c0       	rjmp	.+4      	; 0x354 <__vector_8+0xc4>
     350:	10 92 55 01 	sts	0x0155, r1
	Button_Check(arrow_down,3,mode);
     354:	b3 99       	sbic	0x16, 3	; 22
     356:	17 c0       	rjmp	.+46     	; 0x386 <__vector_8+0xf6>
     358:	80 91 56 01 	lds	r24, 0x0156
     35c:	88 23       	and	r24, r24
     35e:	21 f0       	breq	.+8      	; 0x368 <__vector_8+0xd8>
     360:	80 91 56 01 	lds	r24, 0x0156
     364:	84 30       	cpi	r24, 0x04	; 4
     366:	48 f0       	brcs	.+18     	; 0x37a <__vector_8+0xea>
     368:	81 e0       	ldi	r24, 0x01	; 1
     36a:	80 93 56 01 	sts	0x0156, r24
     36e:	80 91 52 01 	lds	r24, 0x0152
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <Button_Event_3>
     378:	08 c0       	rjmp	.+16     	; 0x38a <__vector_8+0xfa>
     37a:	e6 e5       	ldi	r30, 0x56	; 86
     37c:	f1 e0       	ldi	r31, 0x01	; 1
     37e:	80 81       	ld	r24, Z
     380:	8f 5f       	subi	r24, 0xFF	; 255
     382:	80 83       	st	Z, r24
     384:	02 c0       	rjmp	.+4      	; 0x38a <__vector_8+0xfa>
     386:	10 92 56 01 	sts	0x0156, r1
	Button_Check(push_button1,4,mode);
     38a:	85 99       	sbic	0x10, 5	; 16
     38c:	17 c0       	rjmp	.+46     	; 0x3bc <__vector_8+0x12c>
     38e:	80 91 57 01 	lds	r24, 0x0157
     392:	88 23       	and	r24, r24
     394:	21 f0       	breq	.+8      	; 0x39e <__vector_8+0x10e>
     396:	80 91 57 01 	lds	r24, 0x0157
     39a:	84 30       	cpi	r24, 0x04	; 4
     39c:	48 f0       	brcs	.+18     	; 0x3b0 <__vector_8+0x120>
     39e:	81 e0       	ldi	r24, 0x01	; 1
     3a0:	80 93 57 01 	sts	0x0157, r24
     3a4:	80 91 52 01 	lds	r24, 0x0152
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	0e 94 ff 03 	call	0x7fe	; 0x7fe <Button_Event_4>
     3ae:	08 c0       	rjmp	.+16     	; 0x3c0 <__vector_8+0x130>
     3b0:	e7 e5       	ldi	r30, 0x57	; 87
     3b2:	f1 e0       	ldi	r31, 0x01	; 1
     3b4:	80 81       	ld	r24, Z
     3b6:	8f 5f       	subi	r24, 0xFF	; 255
     3b8:	80 83       	st	Z, r24
     3ba:	02 c0       	rjmp	.+4      	; 0x3c0 <__vector_8+0x130>
     3bc:	10 92 57 01 	sts	0x0157, r1
	Button_Check(push_button2,5,mode);	
     3c0:	86 99       	sbic	0x10, 6	; 16
     3c2:	17 c0       	rjmp	.+46     	; 0x3f2 <__vector_8+0x162>
     3c4:	80 91 58 01 	lds	r24, 0x0158
     3c8:	88 23       	and	r24, r24
     3ca:	21 f0       	breq	.+8      	; 0x3d4 <__vector_8+0x144>
     3cc:	80 91 58 01 	lds	r24, 0x0158
     3d0:	84 30       	cpi	r24, 0x04	; 4
     3d2:	48 f0       	brcs	.+18     	; 0x3e6 <__vector_8+0x156>
     3d4:	81 e0       	ldi	r24, 0x01	; 1
     3d6:	80 93 58 01 	sts	0x0158, r24
     3da:	80 91 52 01 	lds	r24, 0x0152
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	0e 94 3e 04 	call	0x87c	; 0x87c <Button_Event_5>
     3e4:	08 c0       	rjmp	.+16     	; 0x3f6 <__vector_8+0x166>
     3e6:	e8 e5       	ldi	r30, 0x58	; 88
     3e8:	f1 e0       	ldi	r31, 0x01	; 1
     3ea:	80 81       	ld	r24, Z
     3ec:	8f 5f       	subi	r24, 0xFF	; 255
     3ee:	80 83       	st	Z, r24
     3f0:	02 c0       	rjmp	.+4      	; 0x3f6 <__vector_8+0x166>
     3f2:	10 92 58 01 	sts	0x0158, r1

	check++;
     3f6:	80 91 5d 01 	lds	r24, 0x015D
     3fa:	90 91 5e 01 	lds	r25, 0x015E
     3fe:	01 96       	adiw	r24, 0x01	; 1
     400:	90 93 5e 01 	sts	0x015E, r25
     404:	80 93 5d 01 	sts	0x015D, r24
	Round_check++;
     408:	80 91 5b 01 	lds	r24, 0x015B
     40c:	90 91 5c 01 	lds	r25, 0x015C
     410:	01 96       	adiw	r24, 0x01	; 1
     412:	90 93 5c 01 	sts	0x015C, r25
     416:	80 93 5b 01 	sts	0x015B, r24
	TCNT1H = 0xF3;
     41a:	83 ef       	ldi	r24, 0xF3	; 243
     41c:	8d bd       	out	0x2d, r24	; 45
	TCNT1L = 0xEA;
     41e:	8a ee       	ldi	r24, 0xEA	; 234
     420:	8c bd       	out	0x2c, r24	; 44
}								 
     422:	ff 91       	pop	r31
     424:	ef 91       	pop	r30
     426:	bf 91       	pop	r27
     428:	af 91       	pop	r26
     42a:	9f 91       	pop	r25
     42c:	8f 91       	pop	r24
     42e:	7f 91       	pop	r23
     430:	6f 91       	pop	r22
     432:	5f 91       	pop	r21
     434:	4f 91       	pop	r20
     436:	3f 91       	pop	r19
     438:	2f 91       	pop	r18
     43a:	0f 90       	pop	r0
     43c:	0f be       	out	0x3f, r0	; 63
     43e:	0f 90       	pop	r0
     440:	1f 90       	pop	r1
     442:	18 95       	reti

00000444 <Button_Event_0>:
extern unsigned char alpha_flag[3];
extern unsigned char score_alpha;
/*arrow_left*/
void Button_Event_0(int cs)
{
	switch(cs)
     444:	82 30       	cpi	r24, 0x02	; 2
     446:	91 05       	cpc	r25, r1
     448:	a1 f0       	breq	.+40     	; 0x472 <__stack+0x13>
     44a:	83 30       	cpi	r24, 0x03	; 3
     44c:	91 05       	cpc	r25, r1
     44e:	1c f4       	brge	.+6      	; 0x456 <Button_Event_0+0x12>
     450:	89 2b       	or	r24, r25
     452:	31 f0       	breq	.+12     	; 0x460 <__stack+0x1>
     454:	08 95       	ret
     456:	04 97       	sbiw	r24, 0x04	; 4
     458:	02 97       	sbiw	r24, 0x02	; 2
     45a:	08 f0       	brcs	.+2      	; 0x45e <Button_Event_0+0x1a>
     45c:	5d c0       	rjmp	.+186    	; 0x518 <__stack+0xb9>
     45e:	4d c0       	rjmp	.+154    	; 0x4fa <__stack+0x9b>
	{
		case INIT_DISP:
			if(player_x > 0)
     460:	80 91 60 01 	lds	r24, 0x0160
     464:	88 23       	and	r24, r24
     466:	09 f4       	brne	.+2      	; 0x46a <__stack+0xb>
     468:	57 c0       	rjmp	.+174    	; 0x518 <__stack+0xb9>
				player_x--;
     46a:	81 50       	subi	r24, 0x01	; 1
     46c:	80 93 60 01 	sts	0x0160, r24
     470:	08 95       	ret
			break;

		case GAME_1:
			if(player_x > (8 + wall))
     472:	40 91 60 01 	lds	r20, 0x0160
     476:	24 2f       	mov	r18, r20
     478:	30 e0       	ldi	r19, 0x00	; 0
     47a:	80 91 08 03 	lds	r24, 0x0308
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	08 96       	adiw	r24, 0x08	; 8
     482:	82 17       	cp	r24, r18
     484:	93 07       	cpc	r25, r19
     486:	0c f0       	brlt	.+2      	; 0x48a <__stack+0x2b>
     488:	47 c0       	rjmp	.+142    	; 0x518 <__stack+0xb9>
			{
				disp[player_x][1] &=~player_y;
     48a:	50 91 5a 01 	lds	r21, 0x015A
     48e:	65 2f       	mov	r22, r21
     490:	60 95       	com	r22
     492:	a0 e2       	ldi	r26, 0x20	; 32
     494:	b1 e0       	ldi	r27, 0x01	; 1
     496:	c9 01       	movw	r24, r18
     498:	88 0f       	add	r24, r24
     49a:	99 1f       	adc	r25, r25
     49c:	fd 01       	movw	r30, r26
     49e:	e8 0f       	add	r30, r24
     4a0:	f9 1f       	adc	r31, r25
     4a2:	31 96       	adiw	r30, 0x01	; 1
     4a4:	80 81       	ld	r24, Z
     4a6:	86 23       	and	r24, r22
     4a8:	80 83       	st	Z, r24
				player_x--;
     4aa:	84 2f       	mov	r24, r20
     4ac:	81 50       	subi	r24, 0x01	; 1
     4ae:	80 93 60 01 	sts	0x0160, r24
				disp[player_x][1] |= player_y;
     4b2:	28 2f       	mov	r18, r24
     4b4:	30 e0       	ldi	r19, 0x00	; 0
     4b6:	c9 01       	movw	r24, r18
     4b8:	88 0f       	add	r24, r24
     4ba:	99 1f       	adc	r25, r25
     4bc:	a8 0f       	add	r26, r24
     4be:	b9 1f       	adc	r27, r25
     4c0:	11 96       	adiw	r26, 0x01	; 1
     4c2:	8c 91       	ld	r24, X
     4c4:	85 2b       	or	r24, r21
     4c6:	8c 93       	st	X, r24
				if(skill_flag)
     4c8:	80 91 5f 01 	lds	r24, 0x015F
     4cc:	88 23       	and	r24, r24
     4ce:	21 f1       	breq	.+72     	; 0x518 <__stack+0xb9>
				{
					disp[player_x + 1][0] &= ~player_y;
     4d0:	c9 01       	movw	r24, r18
     4d2:	01 96       	adiw	r24, 0x01	; 1
     4d4:	e0 e2       	ldi	r30, 0x20	; 32
     4d6:	f1 e0       	ldi	r31, 0x01	; 1
     4d8:	88 0f       	add	r24, r24
     4da:	99 1f       	adc	r25, r25
     4dc:	df 01       	movw	r26, r30
     4de:	a8 0f       	add	r26, r24
     4e0:	b9 1f       	adc	r27, r25
     4e2:	8c 91       	ld	r24, X
     4e4:	86 23       	and	r24, r22
     4e6:	8c 93       	st	X, r24
					disp[player_x][0] |= player_y;
     4e8:	c9 01       	movw	r24, r18
     4ea:	88 0f       	add	r24, r24
     4ec:	99 1f       	adc	r25, r25
     4ee:	e8 0f       	add	r30, r24
     4f0:	f9 1f       	adc	r31, r25
     4f2:	80 81       	ld	r24, Z
     4f4:	85 2b       	or	r24, r21
     4f6:	80 83       	st	Z, r24
     4f8:	08 95       	ret
			}
			break;

		case SCORE_BOARD:
		case RESISTER_NAME:
			if((rank_flag % 3) > 0)
     4fa:	20 91 09 03 	lds	r18, 0x0309
     4fe:	82 2f       	mov	r24, r18
     500:	63 e0       	ldi	r22, 0x03	; 3
     502:	0e 94 1d 12 	call	0x243a	; 0x243a <__udivmodqi4>
     506:	99 23       	and	r25, r25
     508:	39 f0       	breq	.+14     	; 0x518 <__stack+0xb9>
			{
				rank_flag--;
     50a:	82 2f       	mov	r24, r18
     50c:	81 50       	subi	r24, 0x01	; 1
     50e:	80 93 09 03 	sts	0x0309, r24
				change_flag = 1;
     512:	81 e0       	ldi	r24, 0x01	; 1
     514:	80 93 0e 03 	sts	0x030E, r24
     518:	08 95       	ret

0000051a <Button_Event_1>:
	}
}
/*arrow_up*/
void Button_Event_1(int cs)
{
	switch(cs)
     51a:	83 30       	cpi	r24, 0x03	; 3
     51c:	91 05       	cpc	r25, r1
     51e:	c1 f1       	breq	.+112    	; 0x590 <Button_Event_1+0x76>
     520:	84 30       	cpi	r24, 0x04	; 4
     522:	91 05       	cpc	r25, r1
     524:	24 f4       	brge	.+8      	; 0x52e <Button_Event_1+0x14>
     526:	02 97       	sbiw	r24, 0x02	; 2
     528:	09 f0       	breq	.+2      	; 0x52c <Button_Event_1+0x12>
     52a:	78 c0       	rjmp	.+240    	; 0x61c <Button_Event_1+0x102>
     52c:	08 c0       	rjmp	.+16     	; 0x53e <Button_Event_1+0x24>
     52e:	84 30       	cpi	r24, 0x04	; 4
     530:	91 05       	cpc	r25, r1
     532:	09 f4       	brne	.+2      	; 0x536 <Button_Event_1+0x1c>
     534:	51 c0       	rjmp	.+162    	; 0x5d8 <Button_Event_1+0xbe>
     536:	05 97       	sbiw	r24, 0x05	; 5
     538:	09 f0       	breq	.+2      	; 0x53c <Button_Event_1+0x22>
     53a:	70 c0       	rjmp	.+224    	; 0x61c <Button_Event_1+0x102>
     53c:	58 c0       	rjmp	.+176    	; 0x5ee <Button_Event_1+0xd4>
	{
		case GAME_1:
			if(player_y > 0x01)
     53e:	20 91 5a 01 	lds	r18, 0x015A
     542:	22 30       	cpi	r18, 0x02	; 2
     544:	08 f4       	brcc	.+2      	; 0x548 <Button_Event_1+0x2e>
     546:	6a c0       	rjmp	.+212    	; 0x61c <Button_Event_1+0x102>
			{
				disp[player_x][1] &= ~player_y;
     548:	80 91 60 01 	lds	r24, 0x0160
     54c:	48 2f       	mov	r20, r24
     54e:	50 e0       	ldi	r21, 0x00	; 0
     550:	92 2f       	mov	r25, r18
     552:	90 95       	com	r25
     554:	fa 01       	movw	r30, r20
     556:	ee 0f       	add	r30, r30
     558:	ff 1f       	adc	r31, r31
     55a:	ef 5d       	subi	r30, 0xDF	; 223
     55c:	fe 4f       	sbci	r31, 0xFE	; 254
     55e:	80 81       	ld	r24, Z
     560:	98 23       	and	r25, r24
				player_y >>= 1;
     562:	26 95       	lsr	r18
     564:	20 93 5a 01 	sts	0x015A, r18
				disp[player_x][1] |= player_y;
     568:	92 2b       	or	r25, r18
     56a:	90 83       	st	Z, r25
				if(skill_flag)
     56c:	80 91 5f 01 	lds	r24, 0x015F
     570:	88 23       	and	r24, r24
     572:	09 f4       	brne	.+2      	; 0x576 <Button_Event_1+0x5c>
     574:	53 c0       	rjmp	.+166    	; 0x61c <Button_Event_1+0x102>
				{
					disp[player_x][0] &= ~(player_y << 1);
					disp[player_x][0] |= player_y;
     576:	fa 01       	movw	r30, r20
     578:	ee 0f       	add	r30, r30
     57a:	ff 1f       	adc	r31, r31
     57c:	e0 5e       	subi	r30, 0xE0	; 224
     57e:	fe 4f       	sbci	r31, 0xFE	; 254
     580:	82 2f       	mov	r24, r18
     582:	88 0f       	add	r24, r24
     584:	80 95       	com	r24
     586:	90 81       	ld	r25, Z
     588:	89 23       	and	r24, r25
     58a:	82 2b       	or	r24, r18
     58c:	80 83       	st	Z, r24
     58e:	08 95       	ret
				}
			}
			break;

		case GAME_2:
			if(player_y > 0x01)
     590:	80 91 5a 01 	lds	r24, 0x015A
     594:	82 30       	cpi	r24, 0x02	; 2
     596:	08 f4       	brcc	.+2      	; 0x59a <Button_Event_1+0x80>
     598:	41 c0       	rjmp	.+130    	; 0x61c <Button_Event_1+0x102>
			{
				player_y >>= 1;
     59a:	48 2f       	mov	r20, r24
     59c:	46 95       	lsr	r20
     59e:	40 93 5a 01 	sts	0x015A, r20
				disp[player_x][1] = player_y;
     5a2:	80 91 60 01 	lds	r24, 0x0160
     5a6:	28 2f       	mov	r18, r24
     5a8:	30 e0       	ldi	r19, 0x00	; 0
     5aa:	f9 01       	movw	r30, r18
     5ac:	ee 0f       	add	r30, r30
     5ae:	ff 1f       	adc	r31, r31
     5b0:	ef 5d       	subi	r30, 0xDF	; 223
     5b2:	fe 4f       	sbci	r31, 0xFE	; 254
     5b4:	40 83       	st	Z, r20
				if(skill_flag)
     5b6:	80 91 5f 01 	lds	r24, 0x015F
     5ba:	88 23       	and	r24, r24
     5bc:	79 f1       	breq	.+94     	; 0x61c <Button_Event_1+0x102>
				{
					disp[player_x][0] &= ~(player_y << 1);
					disp[player_x][0] |= player_y;
     5be:	f9 01       	movw	r30, r18
     5c0:	ee 0f       	add	r30, r30
     5c2:	ff 1f       	adc	r31, r31
     5c4:	e0 5e       	subi	r30, 0xE0	; 224
     5c6:	fe 4f       	sbci	r31, 0xFE	; 254
     5c8:	84 2f       	mov	r24, r20
     5ca:	88 0f       	add	r24, r24
     5cc:	80 95       	com	r24
     5ce:	90 81       	ld	r25, Z
     5d0:	89 23       	and	r24, r25
     5d2:	84 2b       	or	r24, r20
     5d4:	80 83       	st	Z, r24
     5d6:	08 95       	ret
				}
			}
			break;

		case SCORE_BOARD:
			if(rank_flag >= 3)
     5d8:	80 91 09 03 	lds	r24, 0x0309
     5dc:	83 30       	cpi	r24, 0x03	; 3
     5de:	f0 f0       	brcs	.+60     	; 0x61c <Button_Event_1+0x102>
			{
				rank_flag -= 3;
     5e0:	83 50       	subi	r24, 0x03	; 3
     5e2:	80 93 09 03 	sts	0x0309, r24
				change_flag = 1;
     5e6:	81 e0       	ldi	r24, 0x01	; 1
     5e8:	80 93 0e 03 	sts	0x030E, r24
     5ec:	08 95       	ret
			}
			break;
		case RESISTER_NAME:
			if(alpha_flag[rank_flag] >= 25)
     5ee:	80 91 09 03 	lds	r24, 0x0309
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	fc 01       	movw	r30, r24
     5f6:	e5 5f       	subi	r30, 0xF5	; 245
     5f8:	fc 4f       	sbci	r31, 0xFC	; 252
     5fa:	20 81       	ld	r18, Z
     5fc:	29 31       	cpi	r18, 0x19	; 25
     5fe:	28 f0       	brcs	.+10     	; 0x60a <Button_Event_1+0xf0>
				alpha_flag[rank_flag] = 0;
     600:	fc 01       	movw	r30, r24
     602:	e5 5f       	subi	r30, 0xF5	; 245
     604:	fc 4f       	sbci	r31, 0xFC	; 252
     606:	10 82       	st	Z, r1
     608:	06 c0       	rjmp	.+12     	; 0x616 <Button_Event_1+0xfc>
			else 
				alpha_flag[rank_flag]++;
     60a:	fc 01       	movw	r30, r24
     60c:	e5 5f       	subi	r30, 0xF5	; 245
     60e:	fc 4f       	sbci	r31, 0xFC	; 252
     610:	82 2f       	mov	r24, r18
     612:	8f 5f       	subi	r24, 0xFF	; 255
     614:	80 83       	st	Z, r24
			change_flag = 1;
     616:	81 e0       	ldi	r24, 0x01	; 1
     618:	80 93 0e 03 	sts	0x030E, r24
     61c:	08 95       	ret

0000061e <Button_Event_2>:
	}
}
/*arrow_right*/
void Button_Event_2(int cs)
{
	switch(cs)
     61e:	82 30       	cpi	r24, 0x02	; 2
     620:	91 05       	cpc	r25, r1
     622:	a1 f0       	breq	.+40     	; 0x64c <Button_Event_2+0x2e>
     624:	83 30       	cpi	r24, 0x03	; 3
     626:	91 05       	cpc	r25, r1
     628:	1c f4       	brge	.+6      	; 0x630 <Button_Event_2+0x12>
     62a:	89 2b       	or	r24, r25
     62c:	31 f0       	breq	.+12     	; 0x63a <Button_Event_2+0x1c>
     62e:	08 95       	ret
     630:	04 97       	sbiw	r24, 0x04	; 4
     632:	02 97       	sbiw	r24, 0x02	; 2
     634:	08 f0       	brcs	.+2      	; 0x638 <Button_Event_2+0x1a>
     636:	5f c0       	rjmp	.+190    	; 0x6f6 <Button_Event_2+0xd8>
     638:	4f c0       	rjmp	.+158    	; 0x6d8 <Button_Event_2+0xba>
	{
		case INIT_DISP:
			if(player_x < 2)
     63a:	80 91 60 01 	lds	r24, 0x0160
     63e:	82 30       	cpi	r24, 0x02	; 2
     640:	08 f0       	brcs	.+2      	; 0x644 <Button_Event_2+0x26>
     642:	59 c0       	rjmp	.+178    	; 0x6f6 <Button_Event_2+0xd8>
				player_x++;
     644:	8f 5f       	subi	r24, 0xFF	; 255
     646:	80 93 60 01 	sts	0x0160, r24
     64a:	08 95       	ret
			break;

		case GAME_1:
			if(player_x < (23 - wall))
     64c:	30 91 60 01 	lds	r19, 0x0160
     650:	43 2f       	mov	r20, r19
     652:	50 e0       	ldi	r21, 0x00	; 0
     654:	20 91 08 03 	lds	r18, 0x0308
     658:	87 e1       	ldi	r24, 0x17	; 23
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	82 1b       	sub	r24, r18
     65e:	91 09       	sbc	r25, r1
     660:	48 17       	cp	r20, r24
     662:	59 07       	cpc	r21, r25
     664:	0c f0       	brlt	.+2      	; 0x668 <Button_Event_2+0x4a>
     666:	47 c0       	rjmp	.+142    	; 0x6f6 <Button_Event_2+0xd8>
			{
				disp[player_x][1] &= ~player_y;
     668:	60 91 5a 01 	lds	r22, 0x015A
     66c:	76 2f       	mov	r23, r22
     66e:	70 95       	com	r23
     670:	a0 e2       	ldi	r26, 0x20	; 32
     672:	b1 e0       	ldi	r27, 0x01	; 1
     674:	ca 01       	movw	r24, r20
     676:	88 0f       	add	r24, r24
     678:	99 1f       	adc	r25, r25
     67a:	fd 01       	movw	r30, r26
     67c:	e8 0f       	add	r30, r24
     67e:	f9 1f       	adc	r31, r25
     680:	31 96       	adiw	r30, 0x01	; 1
     682:	80 81       	ld	r24, Z
     684:	87 23       	and	r24, r23
     686:	80 83       	st	Z, r24
				player_x++;
     688:	83 2f       	mov	r24, r19
     68a:	8f 5f       	subi	r24, 0xFF	; 255
     68c:	80 93 60 01 	sts	0x0160, r24
				disp[player_x][1] |= player_y;
     690:	28 2f       	mov	r18, r24
     692:	30 e0       	ldi	r19, 0x00	; 0
     694:	c9 01       	movw	r24, r18
     696:	88 0f       	add	r24, r24
     698:	99 1f       	adc	r25, r25
     69a:	a8 0f       	add	r26, r24
     69c:	b9 1f       	adc	r27, r25
     69e:	11 96       	adiw	r26, 0x01	; 1
     6a0:	8c 91       	ld	r24, X
     6a2:	86 2b       	or	r24, r22
     6a4:	8c 93       	st	X, r24
				if(skill_flag)
     6a6:	80 91 5f 01 	lds	r24, 0x015F
     6aa:	88 23       	and	r24, r24
     6ac:	21 f1       	breq	.+72     	; 0x6f6 <Button_Event_2+0xd8>
				{
					disp[player_x - 1][0] &= ~player_y;
     6ae:	c9 01       	movw	r24, r18
     6b0:	01 97       	sbiw	r24, 0x01	; 1
     6b2:	e0 e2       	ldi	r30, 0x20	; 32
     6b4:	f1 e0       	ldi	r31, 0x01	; 1
     6b6:	88 0f       	add	r24, r24
     6b8:	99 1f       	adc	r25, r25
     6ba:	df 01       	movw	r26, r30
     6bc:	a8 0f       	add	r26, r24
     6be:	b9 1f       	adc	r27, r25
     6c0:	8c 91       	ld	r24, X
     6c2:	87 23       	and	r24, r23
     6c4:	8c 93       	st	X, r24
					disp[player_x][0] |= player_y;
     6c6:	c9 01       	movw	r24, r18
     6c8:	88 0f       	add	r24, r24
     6ca:	99 1f       	adc	r25, r25
     6cc:	e8 0f       	add	r30, r24
     6ce:	f9 1f       	adc	r31, r25
     6d0:	80 81       	ld	r24, Z
     6d2:	86 2b       	or	r24, r22
     6d4:	80 83       	st	Z, r24
     6d6:	08 95       	ret
			}
			break;

		case SCORE_BOARD:
		case RESISTER_NAME:
			if((rank_flag % 3) < 2)
     6d8:	20 91 09 03 	lds	r18, 0x0309
     6dc:	82 2f       	mov	r24, r18
     6de:	63 e0       	ldi	r22, 0x03	; 3
     6e0:	0e 94 1d 12 	call	0x243a	; 0x243a <__udivmodqi4>
     6e4:	92 30       	cpi	r25, 0x02	; 2
     6e6:	38 f4       	brcc	.+14     	; 0x6f6 <Button_Event_2+0xd8>
			{
				rank_flag++;
     6e8:	82 2f       	mov	r24, r18
     6ea:	8f 5f       	subi	r24, 0xFF	; 255
     6ec:	80 93 09 03 	sts	0x0309, r24
				change_flag = 1;
     6f0:	81 e0       	ldi	r24, 0x01	; 1
     6f2:	80 93 0e 03 	sts	0x030E, r24
     6f6:	08 95       	ret

000006f8 <Button_Event_3>:
	}
}
/*arrow_down*/
void Button_Event_3(int cs)
{
	switch(cs)
     6f8:	83 30       	cpi	r24, 0x03	; 3
     6fa:	91 05       	cpc	r25, r1
     6fc:	c1 f1       	breq	.+112    	; 0x76e <Button_Event_3+0x76>
     6fe:	84 30       	cpi	r24, 0x04	; 4
     700:	91 05       	cpc	r25, r1
     702:	24 f4       	brge	.+8      	; 0x70c <Button_Event_3+0x14>
     704:	02 97       	sbiw	r24, 0x02	; 2
     706:	09 f0       	breq	.+2      	; 0x70a <Button_Event_3+0x12>
     708:	79 c0       	rjmp	.+242    	; 0x7fc <Button_Event_3+0x104>
     70a:	08 c0       	rjmp	.+16     	; 0x71c <Button_Event_3+0x24>
     70c:	84 30       	cpi	r24, 0x04	; 4
     70e:	91 05       	cpc	r25, r1
     710:	09 f4       	brne	.+2      	; 0x714 <Button_Event_3+0x1c>
     712:	51 c0       	rjmp	.+162    	; 0x7b6 <Button_Event_3+0xbe>
     714:	05 97       	sbiw	r24, 0x05	; 5
     716:	09 f0       	breq	.+2      	; 0x71a <Button_Event_3+0x22>
     718:	71 c0       	rjmp	.+226    	; 0x7fc <Button_Event_3+0x104>
     71a:	58 c0       	rjmp	.+176    	; 0x7cc <Button_Event_3+0xd4>
	{
		case GAME_1:
			if(player_y < 0x80)
     71c:	20 91 5a 01 	lds	r18, 0x015A
     720:	92 2f       	mov	r25, r18
     722:	22 23       	and	r18, r18
     724:	0c f4       	brge	.+2      	; 0x728 <Button_Event_3+0x30>
     726:	6a c0       	rjmp	.+212    	; 0x7fc <Button_Event_3+0x104>
			{
				disp[player_x][1] &= ~player_y;
     728:	80 91 60 01 	lds	r24, 0x0160
     72c:	48 2f       	mov	r20, r24
     72e:	50 e0       	ldi	r21, 0x00	; 0
     730:	90 95       	com	r25
     732:	fa 01       	movw	r30, r20
     734:	ee 0f       	add	r30, r30
     736:	ff 1f       	adc	r31, r31
     738:	ef 5d       	subi	r30, 0xDF	; 223
     73a:	fe 4f       	sbci	r31, 0xFE	; 254
     73c:	80 81       	ld	r24, Z
     73e:	98 23       	and	r25, r24
				player_y <<= 1;
     740:	22 0f       	add	r18, r18
     742:	20 93 5a 01 	sts	0x015A, r18
				disp[player_x][1] |= player_y;
     746:	92 2b       	or	r25, r18
     748:	90 83       	st	Z, r25
				if(skill_flag)
     74a:	80 91 5f 01 	lds	r24, 0x015F
     74e:	88 23       	and	r24, r24
     750:	09 f4       	brne	.+2      	; 0x754 <Button_Event_3+0x5c>
     752:	54 c0       	rjmp	.+168    	; 0x7fc <Button_Event_3+0x104>
				{
					disp[player_x][0] &= ~(player_y >> 1);
					disp[player_x][0] |= player_y;
     754:	fa 01       	movw	r30, r20
     756:	ee 0f       	add	r30, r30
     758:	ff 1f       	adc	r31, r31
     75a:	e0 5e       	subi	r30, 0xE0	; 224
     75c:	fe 4f       	sbci	r31, 0xFE	; 254
     75e:	82 2f       	mov	r24, r18
     760:	86 95       	lsr	r24
     762:	80 95       	com	r24
     764:	90 81       	ld	r25, Z
     766:	89 23       	and	r24, r25
     768:	82 2b       	or	r24, r18
     76a:	80 83       	st	Z, r24
     76c:	08 95       	ret
				}
			}
			break;

		case GAME_2:
			if(player_y < 0x80)
     76e:	80 91 5a 01 	lds	r24, 0x015A
     772:	88 23       	and	r24, r24
     774:	0c f4       	brge	.+2      	; 0x778 <Button_Event_3+0x80>
     776:	42 c0       	rjmp	.+132    	; 0x7fc <Button_Event_3+0x104>
			{
				player_y <<= 1;
     778:	48 2f       	mov	r20, r24
     77a:	44 0f       	add	r20, r20
     77c:	40 93 5a 01 	sts	0x015A, r20
				disp[player_x][1] = player_y;
     780:	80 91 60 01 	lds	r24, 0x0160
     784:	28 2f       	mov	r18, r24
     786:	30 e0       	ldi	r19, 0x00	; 0
     788:	f9 01       	movw	r30, r18
     78a:	ee 0f       	add	r30, r30
     78c:	ff 1f       	adc	r31, r31
     78e:	ef 5d       	subi	r30, 0xDF	; 223
     790:	fe 4f       	sbci	r31, 0xFE	; 254
     792:	40 83       	st	Z, r20
				if(skill_flag)
     794:	80 91 5f 01 	lds	r24, 0x015F
     798:	88 23       	and	r24, r24
     79a:	81 f1       	breq	.+96     	; 0x7fc <Button_Event_3+0x104>
				{
					disp[player_x][0] &= ~(player_y >> 1);
					disp[player_x][0] |= player_y;
     79c:	f9 01       	movw	r30, r18
     79e:	ee 0f       	add	r30, r30
     7a0:	ff 1f       	adc	r31, r31
     7a2:	e0 5e       	subi	r30, 0xE0	; 224
     7a4:	fe 4f       	sbci	r31, 0xFE	; 254
     7a6:	84 2f       	mov	r24, r20
     7a8:	86 95       	lsr	r24
     7aa:	80 95       	com	r24
     7ac:	90 81       	ld	r25, Z
     7ae:	89 23       	and	r24, r25
     7b0:	84 2b       	or	r24, r20
     7b2:	80 83       	st	Z, r24
     7b4:	08 95       	ret
				}
			}
			break;

		case SCORE_BOARD:
			if(rank_flag < 3)
     7b6:	80 91 09 03 	lds	r24, 0x0309
     7ba:	83 30       	cpi	r24, 0x03	; 3
     7bc:	f8 f4       	brcc	.+62     	; 0x7fc <Button_Event_3+0x104>
			{
				rank_flag += 3;
     7be:	8d 5f       	subi	r24, 0xFD	; 253
     7c0:	80 93 09 03 	sts	0x0309, r24
				change_flag = 1;		
     7c4:	81 e0       	ldi	r24, 0x01	; 1
     7c6:	80 93 0e 03 	sts	0x030E, r24
     7ca:	08 95       	ret
			}
			break;
		case RESISTER_NAME:
			if(alpha_flag[rank_flag] <= 0)
     7cc:	80 91 09 03 	lds	r24, 0x0309
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	fc 01       	movw	r30, r24
     7d4:	e5 5f       	subi	r30, 0xF5	; 245
     7d6:	fc 4f       	sbci	r31, 0xFC	; 252
     7d8:	20 81       	ld	r18, Z
     7da:	22 23       	and	r18, r18
     7dc:	31 f4       	brne	.+12     	; 0x7ea <Button_Event_3+0xf2>
				alpha_flag[rank_flag] = 25;
     7de:	fc 01       	movw	r30, r24
     7e0:	e5 5f       	subi	r30, 0xF5	; 245
     7e2:	fc 4f       	sbci	r31, 0xFC	; 252
     7e4:	89 e1       	ldi	r24, 0x19	; 25
     7e6:	80 83       	st	Z, r24
     7e8:	06 c0       	rjmp	.+12     	; 0x7f6 <Button_Event_3+0xfe>
			else
				alpha_flag[rank_flag]--;
     7ea:	fc 01       	movw	r30, r24
     7ec:	e5 5f       	subi	r30, 0xF5	; 245
     7ee:	fc 4f       	sbci	r31, 0xFC	; 252
     7f0:	82 2f       	mov	r24, r18
     7f2:	81 50       	subi	r24, 0x01	; 1
     7f4:	80 83       	st	Z, r24
			change_flag = 1;
     7f6:	81 e0       	ldi	r24, 0x01	; 1
     7f8:	80 93 0e 03 	sts	0x030E, r24
     7fc:	08 95       	ret

000007fe <Button_Event_4>:
	}
}
/*push_button1*/
void Button_Event_4(int cs)
{
	switch(cs)
     7fe:	83 30       	cpi	r24, 0x03	; 3
     800:	91 05       	cpc	r25, r1
     802:	f1 f0       	breq	.+60     	; 0x840 <Button_Event_4+0x42>
     804:	84 30       	cpi	r24, 0x04	; 4
     806:	91 05       	cpc	r25, r1
     808:	2c f4       	brge	.+10     	; 0x814 <Button_Event_4+0x16>
     80a:	00 97       	sbiw	r24, 0x00	; 0
     80c:	31 f0       	breq	.+12     	; 0x81a <Button_Event_4+0x1c>
     80e:	02 97       	sbiw	r24, 0x02	; 2
     810:	a1 f5       	brne	.+104    	; 0x87a <Button_Event_4+0x7c>
     812:	09 c0       	rjmp	.+18     	; 0x826 <Button_Event_4+0x28>
     814:	06 97       	sbiw	r24, 0x06	; 6
     816:	8c f5       	brge	.+98     	; 0x87a <Button_Event_4+0x7c>
     818:	2b c0       	rjmp	.+86     	; 0x870 <Button_Event_4+0x72>
	{
		case INIT_DISP:
			mode = 2 + player_x;
     81a:	80 91 60 01 	lds	r24, 0x0160
     81e:	8e 5f       	subi	r24, 0xFE	; 254
     820:	80 93 52 01 	sts	0x0152, r24
     824:	08 95       	ret
			break;

		case GAME_1:
			if(skill_flag)
     826:	80 91 5f 01 	lds	r24, 0x015F
     82a:	88 23       	and	r24, r24
     82c:	31 f1       	breq	.+76     	; 0x87a <Button_Event_4+0x7c>
			{
				check = -150;
     82e:	8a e6       	ldi	r24, 0x6A	; 106
     830:	9f ef       	ldi	r25, 0xFF	; 255
     832:	90 93 5e 01 	sts	0x015E, r25
     836:	80 93 5d 01 	sts	0x015D, r24
				skill_flag = 0;
     83a:	10 92 5f 01 	sts	0x015F, r1
     83e:	08 95       	ret
			}
			break;

		case GAME_2:	
			if(bullet_num >=0)
     840:	20 91 61 01 	lds	r18, 0x0161
     844:	30 91 62 01 	lds	r19, 0x0162
     848:	33 23       	and	r19, r19
     84a:	bc f0       	brlt	.+46     	; 0x87a <Button_Event_4+0x7c>
			{
				bullet_flag = 1;
     84c:	81 e0       	ldi	r24, 0x01	; 1
     84e:	80 93 63 01 	sts	0x0163, r24
				bullet_num++;
     852:	c9 01       	movw	r24, r18
     854:	01 96       	adiw	r24, 0x01	; 1
     856:	90 93 62 01 	sts	0x0162, r25
     85a:	80 93 61 01 	sts	0x0161, r24
				if(bullet_num >= 10)
     85e:	0a 97       	sbiw	r24, 0x0a	; 10
     860:	64 f0       	brlt	.+24     	; 0x87a <Button_Event_4+0x7c>
					bullet_num = -8;
     862:	88 ef       	ldi	r24, 0xF8	; 248
     864:	9f ef       	ldi	r25, 0xFF	; 255
     866:	90 93 62 01 	sts	0x0162, r25
     86a:	80 93 61 01 	sts	0x0161, r24
     86e:	08 95       	ret
			}
			break;

		case SCORE_BOARD:
		case RESISTER_NAME:
			game_flag = 0;			
     870:	10 92 59 01 	sts	0x0159, r1
			change_flag = 1;
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	80 93 0e 03 	sts	0x030E, r24
     87a:	08 95       	ret

0000087c <Button_Event_5>:
	}
}
/*push_button2*/
void Button_Event_5(int cs)
{
	switch(cs)
     87c:	83 30       	cpi	r24, 0x03	; 3
     87e:	91 05       	cpc	r25, r1
     880:	59 f1       	breq	.+86     	; 0x8d8 <Button_Event_5+0x5c>
     882:	84 30       	cpi	r24, 0x04	; 4
     884:	91 05       	cpc	r25, r1
     886:	91 f1       	breq	.+100    	; 0x8ec <Button_Event_5+0x70>
     888:	02 97       	sbiw	r24, 0x02	; 2
     88a:	c1 f5       	brne	.+112    	; 0x8fc <Button_Event_5+0x80>
	{
		case GAME_1:
			if(skill_flag && (wall > 0))
     88c:	80 91 5f 01 	lds	r24, 0x015F
     890:	88 23       	and	r24, r24
     892:	a1 f1       	breq	.+104    	; 0x8fc <Button_Event_5+0x80>
     894:	20 91 08 03 	lds	r18, 0x0308
     898:	22 23       	and	r18, r18
     89a:	81 f1       	breq	.+96     	; 0x8fc <Button_Event_5+0x80>
			{
				wall--;
     89c:	21 50       	subi	r18, 0x01	; 1
     89e:	20 93 08 03 	sts	0x0308, r18
				disp[8 + wall][1] = 0x00;
     8a2:	30 e0       	ldi	r19, 0x00	; 0
     8a4:	c9 01       	movw	r24, r18
     8a6:	08 96       	adiw	r24, 0x08	; 8
     8a8:	e0 e2       	ldi	r30, 0x20	; 32
     8aa:	f1 e0       	ldi	r31, 0x01	; 1
     8ac:	88 0f       	add	r24, r24
     8ae:	99 1f       	adc	r25, r25
     8b0:	df 01       	movw	r26, r30
     8b2:	a8 0f       	add	r26, r24
     8b4:	b9 1f       	adc	r27, r25
     8b6:	11 96       	adiw	r26, 0x01	; 1
     8b8:	1c 92       	st	X, r1
     8ba:	11 97       	sbiw	r26, 0x01	; 1
				disp[23 - wall][1] = 0x00;
     8bc:	87 e1       	ldi	r24, 0x17	; 23
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	82 1b       	sub	r24, r18
     8c2:	93 0b       	sbc	r25, r19
     8c4:	88 0f       	add	r24, r24
     8c6:	99 1f       	adc	r25, r25
     8c8:	e8 0f       	add	r30, r24
     8ca:	f9 1f       	adc	r31, r25
     8cc:	11 82       	std	Z+1, r1	; 0x01
				disp[8 + wall][0] = 0x00;
     8ce:	1c 92       	st	X, r1
				disp[23 - wall][0] = 0x00;
     8d0:	10 82       	st	Z, r1
				skill_flag = 0;
     8d2:	10 92 5f 01 	sts	0x015F, r1
     8d6:	08 95       	ret
			}
			break;

		case GAME_2:
			if(skill_flag)
     8d8:	80 91 5f 01 	lds	r24, 0x015F
     8dc:	88 23       	and	r24, r24
     8de:	19 f0       	breq	.+6      	; 0x8e6 <Button_Event_5+0x6a>
				bullet_flag = 9;
     8e0:	89 e0       	ldi	r24, 0x09	; 9
     8e2:	80 93 63 01 	sts	0x0163, r24
				skill_flag = 0;
     8e6:	10 92 5f 01 	sts	0x015F, r1
     8ea:	08 95       	ret
			break;
		case SCORE_BOARD:
			score_alpha++;
     8ec:	80 91 0a 03 	lds	r24, 0x030A
     8f0:	8f 5f       	subi	r24, 0xFF	; 255
     8f2:	80 93 0a 03 	sts	0x030A, r24
			change_flag = 1;
     8f6:	81 e0       	ldi	r24, 0x01	; 1
     8f8:	80 93 0e 03 	sts	0x030E, r24
     8fc:	08 95       	ret

000008fe <print_number>:
	_delay_ms(800);
	curtain();
	TIMSK |= (1 << TOIE1);
}

void print_number(unsigned int start_line, unsigned int color, unsigned char *n_line, unsigned int line_num) {
     8fe:	cf 93       	push	r28
     900:	df 93       	push	r29
     902:	e4 2f       	mov	r30, r20
     904:	f5 2f       	mov	r31, r21
	unsigned int end_line;

	if(start_line < 0)
		start_line = 8;
	else
		start_line += 8;
     906:	dc 01       	movw	r26, r24
     908:	18 96       	adiw	r26, 0x08	; 8

	end_line = start_line + line_num;
     90a:	a9 01       	movw	r20, r18
     90c:	4a 0f       	add	r20, r26
     90e:	5b 1f       	adc	r21, r27
	for(unsigned int i = 0; start_line< end_line && start_line < 24; i++, start_line++)
     910:	a4 17       	cp	r26, r20
     912:	b5 07       	cpc	r27, r21
     914:	c8 f4       	brcc	.+50     	; 0x948 <print_number+0x4a>
     916:	a8 31       	cpi	r26, 0x18	; 24
     918:	b1 05       	cpc	r27, r1
     91a:	b0 f4       	brcc	.+44     	; 0x948 <print_number+0x4a>
     91c:	8e 2f       	mov	r24, r30
     91e:	9f 2f       	mov	r25, r31
     920:	ec 01       	movw	r28, r24
     922:	cd 01       	movw	r24, r26
     924:	88 0f       	add	r24, r24
     926:	99 1f       	adc	r25, r25
     928:	86 0f       	add	r24, r22
     92a:	97 1f       	adc	r25, r23
     92c:	fc 01       	movw	r30, r24
     92e:	e0 5e       	subi	r30, 0xE0	; 224
     930:	fe 4f       	sbci	r31, 0xFE	; 254
		disp[start_line][color] = n_line[i];
     932:	88 81       	ld	r24, Y
     934:	80 83       	st	Z, r24
		start_line = 8;
	else
		start_line += 8;

	end_line = start_line + line_num;
	for(unsigned int i = 0; start_line< end_line && start_line < 24; i++, start_line++)
     936:	11 96       	adiw	r26, 0x01	; 1
     938:	a4 17       	cp	r26, r20
     93a:	b5 07       	cpc	r27, r21
     93c:	28 f4       	brcc	.+10     	; 0x948 <print_number+0x4a>
     93e:	21 96       	adiw	r28, 0x01	; 1
     940:	32 96       	adiw	r30, 0x02	; 2
     942:	a8 31       	cpi	r26, 0x18	; 24
     944:	b1 05       	cpc	r27, r1
     946:	a8 f3       	brcs	.-22     	; 0x932 <print_number+0x34>
		disp[start_line][color] = n_line[i];
}
     948:	df 91       	pop	r29
     94a:	cf 91       	pop	r28
     94c:	08 95       	ret

0000094e <clear_up>:
	unsigned int end_line;

	if(start_line < 0)
		start_line = 8;
	else
		start_line += 8;
     94e:	9c 01       	movw	r18, r24
     950:	28 5f       	subi	r18, 0xF8	; 248
     952:	3f 4f       	sbci	r19, 0xFF	; 255

	end_line = start_line + line_num;
     954:	42 0f       	add	r20, r18
     956:	53 1f       	adc	r21, r19
	for(unsigned int i = 0; start_line< end_line && start_line < 24; i++, start_line++)
     958:	24 17       	cp	r18, r20
     95a:	35 07       	cpc	r19, r21
     95c:	a8 f4       	brcc	.+42     	; 0x988 <clear_up+0x3a>
     95e:	28 31       	cpi	r18, 0x18	; 24
     960:	31 05       	cpc	r19, r1
     962:	90 f4       	brcc	.+36     	; 0x988 <clear_up+0x3a>
     964:	c9 01       	movw	r24, r18
     966:	88 0f       	add	r24, r24
     968:	99 1f       	adc	r25, r25
     96a:	86 0f       	add	r24, r22
     96c:	97 1f       	adc	r25, r23
     96e:	fc 01       	movw	r30, r24
     970:	e0 5e       	subi	r30, 0xE0	; 224
     972:	fe 4f       	sbci	r31, 0xFE	; 254
		disp[start_line][color] = 0;
     974:	10 82       	st	Z, r1
		start_line = 8;
	else
		start_line += 8;

	end_line = start_line + line_num;
	for(unsigned int i = 0; start_line< end_line && start_line < 24; i++, start_line++)
     976:	2f 5f       	subi	r18, 0xFF	; 255
     978:	3f 4f       	sbci	r19, 0xFF	; 255
     97a:	24 17       	cp	r18, r20
     97c:	35 07       	cpc	r19, r21
     97e:	20 f4       	brcc	.+8      	; 0x988 <clear_up+0x3a>
     980:	32 96       	adiw	r30, 0x02	; 2
     982:	28 31       	cpi	r18, 0x18	; 24
     984:	31 05       	cpc	r19, r1
     986:	b0 f3       	brcs	.-20     	; 0x974 <clear_up+0x26>
     988:	08 95       	ret

0000098a <start_count>:
		disp[start_line][color] = 0;
}  
void start_count()
{
     98a:	ef 92       	push	r14
     98c:	ff 92       	push	r15
     98e:	0f 93       	push	r16
     990:	1f 93       	push	r17
     992:	cf 93       	push	r28
     994:	df 93       	push	r29
	TIMSK &= ~(1 << TOIE1);
     996:	e9 e5       	ldi	r30, 0x59	; 89
     998:	f0 e0       	ldi	r31, 0x00	; 0
     99a:	80 81       	ld	r24, Z
     99c:	8b 7f       	andi	r24, 0xFB	; 251
     99e:	80 83       	st	Z, r24
	clear_up(0,0,16);
     9a0:	80 e0       	ldi	r24, 0x00	; 0
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	60 e0       	ldi	r22, 0x00	; 0
     9a6:	70 e0       	ldi	r23, 0x00	; 0
     9a8:	40 e1       	ldi	r20, 0x10	; 16
     9aa:	50 e0       	ldi	r21, 0x00	; 0
     9ac:	0e 94 a7 04 	call	0x94e	; 0x94e <clear_up>
	clear_up(0,1,16);
     9b0:	80 e0       	ldi	r24, 0x00	; 0
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	61 e0       	ldi	r22, 0x01	; 1
     9b6:	70 e0       	ldi	r23, 0x00	; 0
     9b8:	40 e1       	ldi	r20, 0x10	; 16
     9ba:	50 e0       	ldi	r21, 0x00	; 0
     9bc:	0e 94 a7 04 	call	0x94e	; 0x94e <clear_up>
     9c0:	0f e0       	ldi	r16, 0x0F	; 15
     9c2:	10 e0       	ldi	r17, 0x00	; 0
	for(int i = 15; i >= 6; i--)
	{
		clear_up(i+4,0,1);
		print_number(i,0,numbers[3],4);
     9c4:	0f 2e       	mov	r0, r31
     9c6:	fd e6       	ldi	r31, 0x6D	; 109
     9c8:	ef 2e       	mov	r14, r31
     9ca:	f0 e0       	ldi	r31, 0x00	; 0
     9cc:	ff 2e       	mov	r15, r31
     9ce:	f0 2d       	mov	r31, r0
     9d0:	c0 e9       	ldi	r28, 0x90	; 144
     9d2:	d1 e0       	ldi	r29, 0x01	; 1
	TIMSK &= ~(1 << TOIE1);
	clear_up(0,0,16);
	clear_up(0,1,16);
	for(int i = 15; i >= 6; i--)
	{
		clear_up(i+4,0,1);
     9d4:	c8 01       	movw	r24, r16
     9d6:	04 96       	adiw	r24, 0x04	; 4
     9d8:	60 e0       	ldi	r22, 0x00	; 0
     9da:	70 e0       	ldi	r23, 0x00	; 0
     9dc:	41 e0       	ldi	r20, 0x01	; 1
     9de:	50 e0       	ldi	r21, 0x00	; 0
     9e0:	0e 94 a7 04 	call	0x94e	; 0x94e <clear_up>
		print_number(i,0,numbers[3],4);
     9e4:	c8 01       	movw	r24, r16
     9e6:	60 e0       	ldi	r22, 0x00	; 0
     9e8:	70 e0       	ldi	r23, 0x00	; 0
     9ea:	a7 01       	movw	r20, r14
     9ec:	24 e0       	ldi	r18, 0x04	; 4
     9ee:	30 e0       	ldi	r19, 0x00	; 0
     9f0:	0e 94 7f 04 	call	0x8fe	; 0x8fe <print_number>
     9f4:	9e 01       	movw	r18, r28
     9f6:	ce 01       	movw	r24, r28
     9f8:	01 97       	sbiw	r24, 0x01	; 1
     9fa:	f1 f7       	brne	.-4      	; 0x9f8 <start_count+0x6e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9fc:	21 50       	subi	r18, 0x01	; 1
     9fe:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a00:	d1 f7       	brne	.-12     	; 0x9f6 <start_count+0x6c>
void start_count()
{
	TIMSK &= ~(1 << TOIE1);
	clear_up(0,0,16);
	clear_up(0,1,16);
	for(int i = 15; i >= 6; i--)
     a02:	01 50       	subi	r16, 0x01	; 1
     a04:	10 40       	sbci	r17, 0x00	; 0
     a06:	05 30       	cpi	r16, 0x05	; 5
     a08:	11 05       	cpc	r17, r1
     a0a:	21 f7       	brne	.-56     	; 0x9d4 <start_count+0x4a>
     a0c:	20 e7       	ldi	r18, 0x70	; 112
     a0e:	37 e1       	ldi	r19, 0x17	; 23
     a10:	40 e9       	ldi	r20, 0x90	; 144
     a12:	51 e0       	ldi	r21, 0x01	; 1
     a14:	ca 01       	movw	r24, r20
     a16:	01 97       	sbiw	r24, 0x01	; 1
     a18:	f1 f7       	brne	.-4      	; 0xa16 <start_count+0x8c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a1a:	21 50       	subi	r18, 0x01	; 1
     a1c:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a1e:	d1 f7       	brne	.-12     	; 0xa14 <start_count+0x8a>
     a20:	0d ef       	ldi	r16, 0xFD	; 253
     a22:	1f ef       	ldi	r17, 0xFF	; 255
	}
	_delay_ms(600);
	for(int i = -3; i <= 6; i++)
	{
		clear_up(i - 1,0,1);
		print_number(i,0,numbers[2],4);
     a24:	0f 2e       	mov	r0, r31
     a26:	f9 e6       	ldi	r31, 0x69	; 105
     a28:	ef 2e       	mov	r14, r31
     a2a:	f0 e0       	ldi	r31, 0x00	; 0
     a2c:	ff 2e       	mov	r15, r31
     a2e:	f0 2d       	mov	r31, r0
     a30:	c0 e9       	ldi	r28, 0x90	; 144
     a32:	d1 e0       	ldi	r29, 0x01	; 1
		_delay_ms(40);
	}
	_delay_ms(600);
	for(int i = -3; i <= 6; i++)
	{
		clear_up(i - 1,0,1);
     a34:	c8 01       	movw	r24, r16
     a36:	01 97       	sbiw	r24, 0x01	; 1
     a38:	60 e0       	ldi	r22, 0x00	; 0
     a3a:	70 e0       	ldi	r23, 0x00	; 0
     a3c:	41 e0       	ldi	r20, 0x01	; 1
     a3e:	50 e0       	ldi	r21, 0x00	; 0
     a40:	0e 94 a7 04 	call	0x94e	; 0x94e <clear_up>
		print_number(i,0,numbers[2],4);
     a44:	c8 01       	movw	r24, r16
     a46:	60 e0       	ldi	r22, 0x00	; 0
     a48:	70 e0       	ldi	r23, 0x00	; 0
     a4a:	a7 01       	movw	r20, r14
     a4c:	24 e0       	ldi	r18, 0x04	; 4
     a4e:	30 e0       	ldi	r19, 0x00	; 0
     a50:	0e 94 7f 04 	call	0x8fe	; 0x8fe <print_number>
     a54:	9e 01       	movw	r18, r28
     a56:	ce 01       	movw	r24, r28
     a58:	01 97       	sbiw	r24, 0x01	; 1
     a5a:	f1 f7       	brne	.-4      	; 0xa58 <start_count+0xce>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a5c:	21 50       	subi	r18, 0x01	; 1
     a5e:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a60:	d1 f7       	brne	.-12     	; 0xa56 <start_count+0xcc>
		clear_up(i+4,0,1);
		print_number(i,0,numbers[3],4);
		_delay_ms(40);
	}
	_delay_ms(600);
	for(int i = -3; i <= 6; i++)
     a62:	0f 5f       	subi	r16, 0xFF	; 255
     a64:	1f 4f       	sbci	r17, 0xFF	; 255
     a66:	07 30       	cpi	r16, 0x07	; 7
     a68:	11 05       	cpc	r17, r1
     a6a:	21 f7       	brne	.-56     	; 0xa34 <start_count+0xaa>
     a6c:	20 e7       	ldi	r18, 0x70	; 112
     a6e:	37 e1       	ldi	r19, 0x17	; 23
     a70:	40 e9       	ldi	r20, 0x90	; 144
     a72:	51 e0       	ldi	r21, 0x01	; 1
     a74:	ca 01       	movw	r24, r20
     a76:	01 97       	sbiw	r24, 0x01	; 1
     a78:	f1 f7       	brne	.-4      	; 0xa76 <start_count+0xec>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a7a:	21 50       	subi	r18, 0x01	; 1
     a7c:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a7e:	d1 f7       	brne	.-12     	; 0xa74 <start_count+0xea>
     a80:	0f e0       	ldi	r16, 0x0F	; 15
     a82:	10 e0       	ldi	r17, 0x00	; 0
	}
	_delay_ms(600);
	for(int i = 15; i >= 6; i--)
	{
		clear_up(i+4,0,1);
		print_number(i,0,numbers[1],4);
     a84:	0f 2e       	mov	r0, r31
     a86:	f5 e6       	ldi	r31, 0x65	; 101
     a88:	ef 2e       	mov	r14, r31
     a8a:	f0 e0       	ldi	r31, 0x00	; 0
     a8c:	ff 2e       	mov	r15, r31
     a8e:	f0 2d       	mov	r31, r0
     a90:	c0 e9       	ldi	r28, 0x90	; 144
     a92:	d1 e0       	ldi	r29, 0x01	; 1
		_delay_ms(40);
	}
	_delay_ms(600);
	for(int i = 15; i >= 6; i--)
	{
		clear_up(i+4,0,1);
     a94:	c8 01       	movw	r24, r16
     a96:	04 96       	adiw	r24, 0x04	; 4
     a98:	60 e0       	ldi	r22, 0x00	; 0
     a9a:	70 e0       	ldi	r23, 0x00	; 0
     a9c:	41 e0       	ldi	r20, 0x01	; 1
     a9e:	50 e0       	ldi	r21, 0x00	; 0
     aa0:	0e 94 a7 04 	call	0x94e	; 0x94e <clear_up>
		print_number(i,0,numbers[1],4);
     aa4:	c8 01       	movw	r24, r16
     aa6:	60 e0       	ldi	r22, 0x00	; 0
     aa8:	70 e0       	ldi	r23, 0x00	; 0
     aaa:	a7 01       	movw	r20, r14
     aac:	24 e0       	ldi	r18, 0x04	; 4
     aae:	30 e0       	ldi	r19, 0x00	; 0
     ab0:	0e 94 7f 04 	call	0x8fe	; 0x8fe <print_number>
     ab4:	9e 01       	movw	r18, r28
     ab6:	ce 01       	movw	r24, r28
     ab8:	01 97       	sbiw	r24, 0x01	; 1
     aba:	f1 f7       	brne	.-4      	; 0xab8 <start_count+0x12e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     abc:	21 50       	subi	r18, 0x01	; 1
     abe:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <start_count+0x12c>
		clear_up(i - 1,0,1);
		print_number(i,0,numbers[2],4);
		_delay_ms(40);
	}
	_delay_ms(600);
	for(int i = 15; i >= 6; i--)
     ac2:	01 50       	subi	r16, 0x01	; 1
     ac4:	10 40       	sbci	r17, 0x00	; 0
     ac6:	05 30       	cpi	r16, 0x05	; 5
     ac8:	11 05       	cpc	r17, r1
     aca:	21 f7       	brne	.-56     	; 0xa94 <start_count+0x10a>
     acc:	20 e7       	ldi	r18, 0x70	; 112
     ace:	37 e1       	ldi	r19, 0x17	; 23
     ad0:	40 e9       	ldi	r20, 0x90	; 144
     ad2:	51 e0       	ldi	r21, 0x01	; 1
     ad4:	ca 01       	movw	r24, r20
     ad6:	01 97       	sbiw	r24, 0x01	; 1
     ad8:	f1 f7       	brne	.-4      	; 0xad6 <start_count+0x14c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ada:	21 50       	subi	r18, 0x01	; 1
     adc:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ade:	d1 f7       	brne	.-12     	; 0xad4 <start_count+0x14a>
		clear_up(i+4,0,1);
		print_number(i,0,numbers[1],4);
		_delay_ms(40);
	}
	_delay_ms(600);
	clear_up(6,0,4);
     ae0:	86 e0       	ldi	r24, 0x06	; 6
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	60 e0       	ldi	r22, 0x00	; 0
     ae6:	70 e0       	ldi	r23, 0x00	; 0
     ae8:	44 e0       	ldi	r20, 0x04	; 4
     aea:	50 e0       	ldi	r21, 0x00	; 0
     aec:	0e 94 a7 04 	call	0x94e	; 0x94e <clear_up>
	TIMSK |= (1 << TOIE1);
     af0:	e9 e5       	ldi	r30, 0x59	; 89
     af2:	f0 e0       	ldi	r31, 0x00	; 0
     af4:	80 81       	ld	r24, Z
     af6:	84 60       	ori	r24, 0x04	; 4
     af8:	80 83       	st	Z, r24
}
     afa:	df 91       	pop	r29
     afc:	cf 91       	pop	r28
     afe:	1f 91       	pop	r17
     b00:	0f 91       	pop	r16
     b02:	ff 90       	pop	r15
     b04:	ef 90       	pop	r14
     b06:	08 95       	ret

00000b08 <print_score>:

void print_score(unsigned int score)
{
     b08:	cf 92       	push	r12
     b0a:	df 92       	push	r13
     b0c:	ef 92       	push	r14
     b0e:	ff 92       	push	r15
     b10:	0f 93       	push	r16
     b12:	1f 93       	push	r17
     b14:	df 93       	push	r29
     b16:	cf 93       	push	r28
     b18:	00 d0       	rcall	.+0      	; 0xb1a <print_score+0x12>
     b1a:	0f 92       	push	r0
     b1c:	cd b7       	in	r28, 0x3d	; 61
     b1e:	de b7       	in	r29, 0x3e	; 62
     b20:	9c 01       	movw	r18, r24
	TIMSK &= ~(1 << TOIE1);
     b22:	e9 e5       	ldi	r30, 0x59	; 89
     b24:	f0 e0       	ldi	r31, 0x00	; 0
     b26:	80 81       	ld	r24, Z
     b28:	8b 7f       	andi	r24, 0xFB	; 251
     b2a:	80 83       	st	Z, r24
	unsigned char p_score[3];
	for(int i = 2; i >= 0; i--)
	{
		p_score[i] = score % 10;
     b2c:	c9 01       	movw	r24, r18
     b2e:	6a e0       	ldi	r22, 0x0A	; 10
     b30:	70 e0       	ldi	r23, 0x00	; 0
     b32:	0e 94 29 12 	call	0x2452	; 0x2452 <__udivmodhi4>
     b36:	8b 83       	std	Y+3, r24	; 0x03
		score /= 10;
     b38:	c9 01       	movw	r24, r18
     b3a:	6a e0       	ldi	r22, 0x0A	; 10
     b3c:	70 e0       	ldi	r23, 0x00	; 0
     b3e:	0e 94 29 12 	call	0x2452	; 0x2452 <__udivmodhi4>
     b42:	26 2f       	mov	r18, r22
     b44:	37 2f       	mov	r19, r23
{
	TIMSK &= ~(1 << TOIE1);
	unsigned char p_score[3];
	for(int i = 2; i >= 0; i--)
	{
		p_score[i] = score % 10;
     b46:	86 2f       	mov	r24, r22
     b48:	97 2f       	mov	r25, r23
     b4a:	6a e0       	ldi	r22, 0x0A	; 10
     b4c:	70 e0       	ldi	r23, 0x00	; 0
     b4e:	0e 94 29 12 	call	0x2452	; 0x2452 <__udivmodhi4>
     b52:	8a 83       	std	Y+2, r24	; 0x02
     b54:	82 2f       	mov	r24, r18
     b56:	93 2f       	mov	r25, r19
     b58:	6a e0       	ldi	r22, 0x0A	; 10
     b5a:	70 e0       	ldi	r23, 0x00	; 0
     b5c:	0e 94 29 12 	call	0x2452	; 0x2452 <__udivmodhi4>
     b60:	cb 01       	movw	r24, r22
     b62:	6a e0       	ldi	r22, 0x0A	; 10
     b64:	70 e0       	ldi	r23, 0x00	; 0
     b66:	0e 94 29 12 	call	0x2452	; 0x2452 <__udivmodhi4>
     b6a:	08 2f       	mov	r16, r24
     b6c:	89 83       	std	Y+1, r24	; 0x01
		score /= 10;
	}
	
	clear_up(0,0,16);
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	60 e0       	ldi	r22, 0x00	; 0
     b74:	70 e0       	ldi	r23, 0x00	; 0
     b76:	40 e1       	ldi	r20, 0x10	; 16
     b78:	50 e0       	ldi	r21, 0x00	; 0
     b7a:	0e 94 a7 04 	call	0x94e	; 0x94e <clear_up>
	clear_up(0,1,16);
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	61 e0       	ldi	r22, 0x01	; 1
     b84:	70 e0       	ldi	r23, 0x00	; 0
     b86:	40 e1       	ldi	r20, 0x10	; 16
     b88:	50 e0       	ldi	r21, 0x00	; 0
     b8a:	0e 94 a7 04 	call	0x94e	; 0x94e <clear_up>
	print_number(1,0,numbers[p_score[0]],4);
     b8e:	0f 2e       	mov	r0, r31
     b90:	f1 e6       	ldi	r31, 0x61	; 97
     b92:	ef 2e       	mov	r14, r31
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	ff 2e       	mov	r15, r31
     b98:	f0 2d       	mov	r31, r0
     b9a:	10 e0       	ldi	r17, 0x00	; 0
     b9c:	00 0f       	add	r16, r16
     b9e:	11 1f       	adc	r17, r17
     ba0:	00 0f       	add	r16, r16
     ba2:	11 1f       	adc	r17, r17
     ba4:	67 01       	movw	r12, r14
     ba6:	c0 0e       	add	r12, r16
     ba8:	d1 1e       	adc	r13, r17
     baa:	81 e0       	ldi	r24, 0x01	; 1
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	60 e0       	ldi	r22, 0x00	; 0
     bb0:	70 e0       	ldi	r23, 0x00	; 0
     bb2:	a6 01       	movw	r20, r12
     bb4:	24 e0       	ldi	r18, 0x04	; 4
     bb6:	30 e0       	ldi	r19, 0x00	; 0
     bb8:	0e 94 7f 04 	call	0x8fe	; 0x8fe <print_number>
	print_number(6,0,numbers[p_score[1]],4);
     bbc:	8a 81       	ldd	r24, Y+2	; 0x02
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	88 0f       	add	r24, r24
     bc2:	99 1f       	adc	r25, r25
     bc4:	88 0f       	add	r24, r24
     bc6:	99 1f       	adc	r25, r25
     bc8:	87 01       	movw	r16, r14
     bca:	08 0f       	add	r16, r24
     bcc:	19 1f       	adc	r17, r25
     bce:	86 e0       	ldi	r24, 0x06	; 6
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	60 e0       	ldi	r22, 0x00	; 0
     bd4:	70 e0       	ldi	r23, 0x00	; 0
     bd6:	a8 01       	movw	r20, r16
     bd8:	24 e0       	ldi	r18, 0x04	; 4
     bda:	30 e0       	ldi	r19, 0x00	; 0
     bdc:	0e 94 7f 04 	call	0x8fe	; 0x8fe <print_number>
	print_number(11,0,numbers[p_score[2]],4);
     be0:	8b 81       	ldd	r24, Y+3	; 0x03
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	88 0f       	add	r24, r24
     be6:	99 1f       	adc	r25, r25
     be8:	88 0f       	add	r24, r24
     bea:	99 1f       	adc	r25, r25
     bec:	e8 0e       	add	r14, r24
     bee:	f9 1e       	adc	r15, r25
     bf0:	8b e0       	ldi	r24, 0x0B	; 11
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	60 e0       	ldi	r22, 0x00	; 0
     bf6:	70 e0       	ldi	r23, 0x00	; 0
     bf8:	a7 01       	movw	r20, r14
     bfa:	24 e0       	ldi	r18, 0x04	; 4
     bfc:	30 e0       	ldi	r19, 0x00	; 0
     bfe:	0e 94 7f 04 	call	0x8fe	; 0x8fe <print_number>
     c02:	28 e5       	ldi	r18, 0x58	; 88
     c04:	3b e1       	ldi	r19, 0x1B	; 27
     c06:	40 e9       	ldi	r20, 0x90	; 144
     c08:	51 e0       	ldi	r21, 0x01	; 1
     c0a:	ca 01       	movw	r24, r20
     c0c:	01 97       	sbiw	r24, 0x01	; 1
     c0e:	f1 f7       	brne	.-4      	; 0xc0c <print_score+0x104>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c10:	21 50       	subi	r18, 0x01	; 1
     c12:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c14:	d1 f7       	brne	.-12     	; 0xc0a <print_score+0x102>
	_delay_ms(700);
	clear_up(1,0,14);
     c16:	81 e0       	ldi	r24, 0x01	; 1
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	60 e0       	ldi	r22, 0x00	; 0
     c1c:	70 e0       	ldi	r23, 0x00	; 0
     c1e:	4e e0       	ldi	r20, 0x0E	; 14
     c20:	50 e0       	ldi	r21, 0x00	; 0
     c22:	0e 94 a7 04 	call	0x94e	; 0x94e <clear_up>
     c26:	28 eb       	ldi	r18, 0xB8	; 184
     c28:	3b e0       	ldi	r19, 0x0B	; 11
     c2a:	40 e9       	ldi	r20, 0x90	; 144
     c2c:	51 e0       	ldi	r21, 0x01	; 1
     c2e:	ca 01       	movw	r24, r20
     c30:	01 97       	sbiw	r24, 0x01	; 1
     c32:	f1 f7       	brne	.-4      	; 0xc30 <print_score+0x128>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c34:	21 50       	subi	r18, 0x01	; 1
     c36:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c38:	d1 f7       	brne	.-12     	; 0xc2e <print_score+0x126>
	_delay_ms(300);
	print_number(1,0,numbers[p_score[0]],4);
     c3a:	81 e0       	ldi	r24, 0x01	; 1
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	60 e0       	ldi	r22, 0x00	; 0
     c40:	70 e0       	ldi	r23, 0x00	; 0
     c42:	a6 01       	movw	r20, r12
     c44:	24 e0       	ldi	r18, 0x04	; 4
     c46:	30 e0       	ldi	r19, 0x00	; 0
     c48:	0e 94 7f 04 	call	0x8fe	; 0x8fe <print_number>
	print_number(6,0,numbers[p_score[1]],4);
     c4c:	86 e0       	ldi	r24, 0x06	; 6
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	60 e0       	ldi	r22, 0x00	; 0
     c52:	70 e0       	ldi	r23, 0x00	; 0
     c54:	a8 01       	movw	r20, r16
     c56:	24 e0       	ldi	r18, 0x04	; 4
     c58:	30 e0       	ldi	r19, 0x00	; 0
     c5a:	0e 94 7f 04 	call	0x8fe	; 0x8fe <print_number>
	print_number(11,0,numbers[p_score[2]],4);
     c5e:	8b e0       	ldi	r24, 0x0B	; 11
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	60 e0       	ldi	r22, 0x00	; 0
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	a7 01       	movw	r20, r14
     c68:	24 e0       	ldi	r18, 0x04	; 4
     c6a:	30 e0       	ldi	r19, 0x00	; 0
     c6c:	0e 94 7f 04 	call	0x8fe	; 0x8fe <print_number>
     c70:	28 e5       	ldi	r18, 0x58	; 88
     c72:	3b e1       	ldi	r19, 0x1B	; 27
     c74:	40 e9       	ldi	r20, 0x90	; 144
     c76:	51 e0       	ldi	r21, 0x01	; 1
     c78:	ca 01       	movw	r24, r20
     c7a:	01 97       	sbiw	r24, 0x01	; 1
     c7c:	f1 f7       	brne	.-4      	; 0xc7a <print_score+0x172>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c7e:	21 50       	subi	r18, 0x01	; 1
     c80:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c82:	d1 f7       	brne	.-12     	; 0xc78 <print_score+0x170>
	_delay_ms(700);
	clear_up(1,0,14);
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	60 e0       	ldi	r22, 0x00	; 0
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	4e e0       	ldi	r20, 0x0E	; 14
     c8e:	50 e0       	ldi	r21, 0x00	; 0
     c90:	0e 94 a7 04 	call	0x94e	; 0x94e <clear_up>
     c94:	28 eb       	ldi	r18, 0xB8	; 184
     c96:	3b e0       	ldi	r19, 0x0B	; 11
     c98:	40 e9       	ldi	r20, 0x90	; 144
     c9a:	51 e0       	ldi	r21, 0x01	; 1
     c9c:	ca 01       	movw	r24, r20
     c9e:	01 97       	sbiw	r24, 0x01	; 1
     ca0:	f1 f7       	brne	.-4      	; 0xc9e <print_score+0x196>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ca2:	21 50       	subi	r18, 0x01	; 1
     ca4:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ca6:	d1 f7       	brne	.-12     	; 0xc9c <print_score+0x194>
	_delay_ms(300);
	print_number(1,0,numbers[p_score[0]],4);
     ca8:	81 e0       	ldi	r24, 0x01	; 1
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	60 e0       	ldi	r22, 0x00	; 0
     cae:	70 e0       	ldi	r23, 0x00	; 0
     cb0:	a6 01       	movw	r20, r12
     cb2:	24 e0       	ldi	r18, 0x04	; 4
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	0e 94 7f 04 	call	0x8fe	; 0x8fe <print_number>
	print_number(6,0,numbers[p_score[1]],4);
     cba:	86 e0       	ldi	r24, 0x06	; 6
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	60 e0       	ldi	r22, 0x00	; 0
     cc0:	70 e0       	ldi	r23, 0x00	; 0
     cc2:	a8 01       	movw	r20, r16
     cc4:	24 e0       	ldi	r18, 0x04	; 4
     cc6:	30 e0       	ldi	r19, 0x00	; 0
     cc8:	0e 94 7f 04 	call	0x8fe	; 0x8fe <print_number>
	print_number(11,0,numbers[p_score[2]],4);
     ccc:	8b e0       	ldi	r24, 0x0B	; 11
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	60 e0       	ldi	r22, 0x00	; 0
     cd2:	70 e0       	ldi	r23, 0x00	; 0
     cd4:	a7 01       	movw	r20, r14
     cd6:	24 e0       	ldi	r18, 0x04	; 4
     cd8:	30 e0       	ldi	r19, 0x00	; 0
     cda:	0e 94 7f 04 	call	0x8fe	; 0x8fe <print_number>
     cde:	20 e2       	ldi	r18, 0x20	; 32
     ce0:	3e e4       	ldi	r19, 0x4E	; 78
     ce2:	40 e9       	ldi	r20, 0x90	; 144
     ce4:	51 e0       	ldi	r21, 0x01	; 1
     ce6:	ca 01       	movw	r24, r20
     ce8:	01 97       	sbiw	r24, 0x01	; 1
     cea:	f1 f7       	brne	.-4      	; 0xce8 <print_score+0x1e0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cec:	21 50       	subi	r18, 0x01	; 1
     cee:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cf0:	d1 f7       	brne	.-12     	; 0xce6 <print_score+0x1de>
	_delay_ms(2000);
	clear_up(1,0,14);
     cf2:	81 e0       	ldi	r24, 0x01	; 1
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	60 e0       	ldi	r22, 0x00	; 0
     cf8:	70 e0       	ldi	r23, 0x00	; 0
     cfa:	4e e0       	ldi	r20, 0x0E	; 14
     cfc:	50 e0       	ldi	r21, 0x00	; 0
     cfe:	0e 94 a7 04 	call	0x94e	; 0x94e <clear_up>
	TIMSK |= (1 << TOIE1);
     d02:	e9 e5       	ldi	r30, 0x59	; 89
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	80 81       	ld	r24, Z
     d08:	84 60       	ori	r24, 0x04	; 4
     d0a:	80 83       	st	Z, r24
} 
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	cf 91       	pop	r28
     d14:	df 91       	pop	r29
     d16:	1f 91       	pop	r17
     d18:	0f 91       	pop	r16
     d1a:	ff 90       	pop	r15
     d1c:	ef 90       	pop	r14
     d1e:	df 90       	pop	r13
     d20:	cf 90       	pop	r12
     d22:	08 95       	ret

00000d24 <print_record>:
void print_record(unsigned char rank)
{
     d24:	4f 92       	push	r4
     d26:	5f 92       	push	r5
     d28:	6f 92       	push	r6
     d2a:	7f 92       	push	r7
     d2c:	8f 92       	push	r8
     d2e:	9f 92       	push	r9
     d30:	af 92       	push	r10
     d32:	bf 92       	push	r11
     d34:	cf 92       	push	r12
     d36:	df 92       	push	r13
     d38:	ef 92       	push	r14
     d3a:	ff 92       	push	r15
     d3c:	0f 93       	push	r16
     d3e:	1f 93       	push	r17
     d40:	cf 93       	push	r28
     d42:	df 93       	push	r29
     d44:	08 2f       	mov	r16, r24
	TIMSK &= ~(1 << TOIE1);
     d46:	e9 e5       	ldi	r30, 0x59	; 89
     d48:	f0 e0       	ldi	r31, 0x00	; 0
     d4a:	80 81       	ld	r24, Z
     d4c:	8b 7f       	andi	r24, 0xFB	; 251
     d4e:	80 83       	st	Z, r24
	clear_up(0,0,16);
     d50:	80 e0       	ldi	r24, 0x00	; 0
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	60 e0       	ldi	r22, 0x00	; 0
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	40 e1       	ldi	r20, 0x10	; 16
     d5a:	50 e0       	ldi	r21, 0x00	; 0
     d5c:	0e 94 a7 04 	call	0x94e	; 0x94e <clear_up>
	clear_up(0,1,16);
     d60:	80 e0       	ldi	r24, 0x00	; 0
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	61 e0       	ldi	r22, 0x01	; 1
     d66:	70 e0       	ldi	r23, 0x00	; 0
     d68:	40 e1       	ldi	r20, 0x10	; 16
     d6a:	50 e0       	ldi	r21, 0x00	; 0
     d6c:	0e 94 a7 04 	call	0x94e	; 0x94e <clear_up>
	{
		print_number(i,0,No[0],5);
		clear_up(i + 5,0,1);
		print_number(i + 6,0,No[1],3);
		clear_up(i + 9,0,1);
		print_number(i + 10,1,numbers[rank],4);
     d70:	10 e0       	ldi	r17, 0x00	; 0
     d72:	00 0f       	add	r16, r16
     d74:	11 1f       	adc	r17, r17
     d76:	00 0f       	add	r16, r16
     d78:	11 1f       	adc	r17, r17
     d7a:	0f 2e       	mov	r0, r31
     d7c:	f1 e6       	ldi	r31, 0x61	; 97
     d7e:	af 2e       	mov	r10, r31
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	bf 2e       	mov	r11, r31
     d84:	f0 2d       	mov	r31, r0
     d86:	a0 0e       	add	r10, r16
     d88:	b1 1e       	adc	r11, r17
     d8a:	0e e0       	ldi	r16, 0x0E	; 14
     d8c:	10 e0       	ldi	r17, 0x00	; 0
	TIMSK &= ~(1 << TOIE1);
	clear_up(0,0,16);
	clear_up(0,1,16);
	for(signed int i = 14; i>=1; i--)
	{
		print_number(i,0,No[0],5);
     d8e:	0f 2e       	mov	r0, r31
     d90:	f9 e8       	ldi	r31, 0x89	; 137
     d92:	ef 2e       	mov	r14, r31
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	ff 2e       	mov	r15, r31
     d98:	f0 2d       	mov	r31, r0
		clear_up(i + 5,0,1);
		print_number(i + 6,0,No[1],3);
     d9a:	0f 2e       	mov	r0, r31
     d9c:	f5 e0       	ldi	r31, 0x05	; 5
     d9e:	cf 2e       	mov	r12, r31
     da0:	dd 24       	eor	r13, r13
     da2:	f0 2d       	mov	r31, r0
     da4:	ce 0c       	add	r12, r14
     da6:	df 1c       	adc	r13, r15
		clear_up(i + 9,0,1);
		print_number(i + 10,1,numbers[rank],4);
		clear_up(i + 14,1,1);
     da8:	0f 2e       	mov	r0, r31
     daa:	f4 ef       	ldi	r31, 0xF4	; 244
     dac:	8f 2e       	mov	r8, r31
     dae:	f1 e0       	ldi	r31, 0x01	; 1
     db0:	9f 2e       	mov	r9, r31
     db2:	f0 2d       	mov	r31, r0
     db4:	c0 e9       	ldi	r28, 0x90	; 144
     db6:	d1 e0       	ldi	r29, 0x01	; 1
	TIMSK &= ~(1 << TOIE1);
	clear_up(0,0,16);
	clear_up(0,1,16);
	for(signed int i = 14; i>=1; i--)
	{
		print_number(i,0,No[0],5);
     db8:	c7 01       	movw	r24, r14
     dba:	5e 2c       	mov	r5, r14
     dbc:	49 2e       	mov	r4, r25
     dbe:	c8 01       	movw	r24, r16
     dc0:	60 e0       	ldi	r22, 0x00	; 0
     dc2:	70 e0       	ldi	r23, 0x00	; 0
     dc4:	a7 01       	movw	r20, r14
     dc6:	25 e0       	ldi	r18, 0x05	; 5
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	0e 94 7f 04 	call	0x8fe	; 0x8fe <print_number>
		clear_up(i + 5,0,1);
     dce:	c8 01       	movw	r24, r16
     dd0:	05 96       	adiw	r24, 0x05	; 5
     dd2:	60 e0       	ldi	r22, 0x00	; 0
     dd4:	70 e0       	ldi	r23, 0x00	; 0
     dd6:	41 e0       	ldi	r20, 0x01	; 1
     dd8:	50 e0       	ldi	r21, 0x00	; 0
     dda:	0e 94 a7 04 	call	0x94e	; 0x94e <clear_up>
		print_number(i + 6,0,No[1],3);
     dde:	c6 01       	movw	r24, r12
     de0:	7c 2c       	mov	r7, r12
     de2:	69 2e       	mov	r6, r25
     de4:	c8 01       	movw	r24, r16
     de6:	06 96       	adiw	r24, 0x06	; 6
     de8:	60 e0       	ldi	r22, 0x00	; 0
     dea:	70 e0       	ldi	r23, 0x00	; 0
     dec:	a6 01       	movw	r20, r12
     dee:	23 e0       	ldi	r18, 0x03	; 3
     df0:	30 e0       	ldi	r19, 0x00	; 0
     df2:	0e 94 7f 04 	call	0x8fe	; 0x8fe <print_number>
		clear_up(i + 9,0,1);
     df6:	c8 01       	movw	r24, r16
     df8:	09 96       	adiw	r24, 0x09	; 9
     dfa:	60 e0       	ldi	r22, 0x00	; 0
     dfc:	70 e0       	ldi	r23, 0x00	; 0
     dfe:	41 e0       	ldi	r20, 0x01	; 1
     e00:	50 e0       	ldi	r21, 0x00	; 0
     e02:	0e 94 a7 04 	call	0x94e	; 0x94e <clear_up>
		print_number(i + 10,1,numbers[rank],4);
     e06:	c8 01       	movw	r24, r16
     e08:	0a 96       	adiw	r24, 0x0a	; 10
     e0a:	61 e0       	ldi	r22, 0x01	; 1
     e0c:	70 e0       	ldi	r23, 0x00	; 0
     e0e:	a5 01       	movw	r20, r10
     e10:	24 e0       	ldi	r18, 0x04	; 4
     e12:	30 e0       	ldi	r19, 0x00	; 0
     e14:	0e 94 7f 04 	call	0x8fe	; 0x8fe <print_number>
		clear_up(i + 14,1,1);
     e18:	c8 01       	movw	r24, r16
     e1a:	0e 96       	adiw	r24, 0x0e	; 14
     e1c:	61 e0       	ldi	r22, 0x01	; 1
     e1e:	70 e0       	ldi	r23, 0x00	; 0
     e20:	41 e0       	ldi	r20, 0x01	; 1
     e22:	50 e0       	ldi	r21, 0x00	; 0
     e24:	0e 94 a7 04 	call	0x94e	; 0x94e <clear_up>
     e28:	94 01       	movw	r18, r8
     e2a:	ce 01       	movw	r24, r28
     e2c:	01 97       	sbiw	r24, 0x01	; 1
     e2e:	f1 f7       	brne	.-4      	; 0xe2c <print_record+0x108>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e30:	21 50       	subi	r18, 0x01	; 1
     e32:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e34:	d1 f7       	brne	.-12     	; 0xe2a <print_record+0x106>
void print_record(unsigned char rank)
{
	TIMSK &= ~(1 << TOIE1);
	clear_up(0,0,16);
	clear_up(0,1,16);
	for(signed int i = 14; i>=1; i--)
     e36:	01 50       	subi	r16, 0x01	; 1
     e38:	10 40       	sbci	r17, 0x00	; 0
     e3a:	09 f0       	breq	.+2      	; 0xe3e <print_record+0x11a>
     e3c:	bd cf       	rjmp	.-134    	; 0xdb8 <print_record+0x94>
     e3e:	20 e1       	ldi	r18, 0x10	; 16
     e40:	37 e2       	ldi	r19, 0x27	; 39
     e42:	40 e9       	ldi	r20, 0x90	; 144
     e44:	51 e0       	ldi	r21, 0x01	; 1
     e46:	ca 01       	movw	r24, r20
     e48:	01 97       	sbiw	r24, 0x01	; 1
     e4a:	f1 f7       	brne	.-4      	; 0xe48 <print_record+0x124>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e4c:	21 50       	subi	r18, 0x01	; 1
     e4e:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e50:	d1 f7       	brne	.-12     	; 0xe46 <print_record+0x122>
		print_number(i + 10,1,numbers[rank],4);
		clear_up(i + 14,1,1);
		_delay_ms(50);
	}
	_delay_ms(1000);
	clear_up(1,0,9);
     e52:	81 e0       	ldi	r24, 0x01	; 1
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	60 e0       	ldi	r22, 0x00	; 0
     e58:	70 e0       	ldi	r23, 0x00	; 0
     e5a:	49 e0       	ldi	r20, 0x09	; 9
     e5c:	50 e0       	ldi	r21, 0x00	; 0
     e5e:	0e 94 a7 04 	call	0x94e	; 0x94e <clear_up>
	clear_up(11,1,4);
     e62:	8b e0       	ldi	r24, 0x0B	; 11
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	61 e0       	ldi	r22, 0x01	; 1
     e68:	70 e0       	ldi	r23, 0x00	; 0
     e6a:	44 e0       	ldi	r20, 0x04	; 4
     e6c:	50 e0       	ldi	r21, 0x00	; 0
     e6e:	0e 94 a7 04 	call	0x94e	; 0x94e <clear_up>
     e72:	20 ea       	ldi	r18, 0xA0	; 160
     e74:	3f e0       	ldi	r19, 0x0F	; 15
     e76:	40 e9       	ldi	r20, 0x90	; 144
     e78:	51 e0       	ldi	r21, 0x01	; 1
     e7a:	ca 01       	movw	r24, r20
     e7c:	01 97       	sbiw	r24, 0x01	; 1
     e7e:	f1 f7       	brne	.-4      	; 0xe7c <print_record+0x158>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e80:	21 50       	subi	r18, 0x01	; 1
     e82:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e84:	d1 f7       	brne	.-12     	; 0xe7a <print_record+0x156>
	_delay_ms(400);
	print_number(1,0,No[0],5);
     e86:	81 e0       	ldi	r24, 0x01	; 1
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	60 e0       	ldi	r22, 0x00	; 0
     e8c:	70 e0       	ldi	r23, 0x00	; 0
     e8e:	45 2d       	mov	r20, r5
     e90:	54 2d       	mov	r21, r4
     e92:	25 e0       	ldi	r18, 0x05	; 5
     e94:	30 e0       	ldi	r19, 0x00	; 0
     e96:	0e 94 7f 04 	call	0x8fe	; 0x8fe <print_number>
	print_number(7,0,No[1],5);
     e9a:	87 e0       	ldi	r24, 0x07	; 7
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	60 e0       	ldi	r22, 0x00	; 0
     ea0:	70 e0       	ldi	r23, 0x00	; 0
     ea2:	47 2d       	mov	r20, r7
     ea4:	56 2d       	mov	r21, r6
     ea6:	25 e0       	ldi	r18, 0x05	; 5
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	0e 94 7f 04 	call	0x8fe	; 0x8fe <print_number>
	print_number(11,1,numbers[rank],4);
     eae:	8b e0       	ldi	r24, 0x0B	; 11
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	61 e0       	ldi	r22, 0x01	; 1
     eb4:	70 e0       	ldi	r23, 0x00	; 0
     eb6:	a5 01       	movw	r20, r10
     eb8:	24 e0       	ldi	r18, 0x04	; 4
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	0e 94 7f 04 	call	0x8fe	; 0x8fe <print_number>
     ec0:	20 e1       	ldi	r18, 0x10	; 16
     ec2:	37 e2       	ldi	r19, 0x27	; 39
     ec4:	40 e9       	ldi	r20, 0x90	; 144
     ec6:	51 e0       	ldi	r21, 0x01	; 1
     ec8:	ca 01       	movw	r24, r20
     eca:	01 97       	sbiw	r24, 0x01	; 1
     ecc:	f1 f7       	brne	.-4      	; 0xeca <print_record+0x1a6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ece:	21 50       	subi	r18, 0x01	; 1
     ed0:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ed2:	d1 f7       	brne	.-12     	; 0xec8 <print_record+0x1a4>
	_delay_ms(1000);
	clear_up(1,0,9);
     ed4:	81 e0       	ldi	r24, 0x01	; 1
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	60 e0       	ldi	r22, 0x00	; 0
     eda:	70 e0       	ldi	r23, 0x00	; 0
     edc:	49 e0       	ldi	r20, 0x09	; 9
     ede:	50 e0       	ldi	r21, 0x00	; 0
     ee0:	0e 94 a7 04 	call	0x94e	; 0x94e <clear_up>
	clear_up(11,1,4);
     ee4:	8b e0       	ldi	r24, 0x0B	; 11
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	61 e0       	ldi	r22, 0x01	; 1
     eea:	70 e0       	ldi	r23, 0x00	; 0
     eec:	44 e0       	ldi	r20, 0x04	; 4
     eee:	50 e0       	ldi	r21, 0x00	; 0
     ef0:	0e 94 a7 04 	call	0x94e	; 0x94e <clear_up>
	TIMSK |= (1 << TOIE1);
     ef4:	e9 e5       	ldi	r30, 0x59	; 89
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	80 81       	ld	r24, Z
     efa:	84 60       	ori	r24, 0x04	; 4
     efc:	80 83       	st	Z, r24
}
     efe:	df 91       	pop	r29
     f00:	cf 91       	pop	r28
     f02:	1f 91       	pop	r17
     f04:	0f 91       	pop	r16
     f06:	ff 90       	pop	r15
     f08:	ef 90       	pop	r14
     f0a:	df 90       	pop	r13
     f0c:	cf 90       	pop	r12
     f0e:	bf 90       	pop	r11
     f10:	af 90       	pop	r10
     f12:	9f 90       	pop	r9
     f14:	8f 90       	pop	r8
     f16:	7f 90       	pop	r7
     f18:	6f 90       	pop	r6
     f1a:	5f 90       	pop	r5
     f1c:	4f 90       	pop	r4
     f1e:	08 95       	ret

00000f20 <curtain>:
void curtain()
{
     f20:	1f 93       	push	r17
     f22:	cf 93       	push	r28
     f24:	df 93       	push	r29
	TIMSK &= ~(1 << TOIE1);
     f26:	e9 e5       	ldi	r30, 0x59	; 89
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	80 81       	ld	r24, Z
     f2c:	8b 7f       	andi	r24, 0xFB	; 251
     f2e:	80 83       	st	Z, r24
     f30:	e0 e3       	ldi	r30, 0x30	; 48
     f32:	f1 e0       	ldi	r31, 0x01	; 1
     f34:	df 01       	movw	r26, r30
     f36:	5e 96       	adiw	r26, 0x1e	; 30
	for(int i = 8; i <= 15; i++)
 	{
 		disp[i][0] = 0xFF;
     f38:	1f ef       	ldi	r17, 0xFF	; 255
		disp[i][1] = 0x00;
		disp[31 - i][0] = 0xFF;
		disp[31 - i][1] = 0x00;
     f3a:	c4 ef       	ldi	r28, 0xF4	; 244
     f3c:	d1 e0       	ldi	r29, 0x01	; 1
     f3e:	40 e9       	ldi	r20, 0x90	; 144
     f40:	51 e0       	ldi	r21, 0x01	; 1
	TIMSK |= (1 << TOIE1);
}
void curtain()
{
	TIMSK &= ~(1 << TOIE1);
	for(int i = 8; i <= 15; i++)
     f42:	60 e4       	ldi	r22, 0x40	; 64
     f44:	71 e0       	ldi	r23, 0x01	; 1
 	{
 		disp[i][0] = 0xFF;
     f46:	10 83       	st	Z, r17
		disp[i][1] = 0x00;
     f48:	11 82       	std	Z+1, r1	; 0x01
		disp[31 - i][0] = 0xFF;
     f4a:	1c 93       	st	X, r17
		disp[31 - i][1] = 0x00;
     f4c:	11 96       	adiw	r26, 0x01	; 1
     f4e:	1c 92       	st	X, r1
     f50:	11 97       	sbiw	r26, 0x01	; 1
     f52:	9e 01       	movw	r18, r28
     f54:	ca 01       	movw	r24, r20
     f56:	01 97       	sbiw	r24, 0x01	; 1
     f58:	f1 f7       	brne	.-4      	; 0xf56 <curtain+0x36>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f5a:	21 50       	subi	r18, 0x01	; 1
     f5c:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f5e:	d1 f7       	brne	.-12     	; 0xf54 <curtain+0x34>
     f60:	32 96       	adiw	r30, 0x02	; 2
     f62:	12 97       	sbiw	r26, 0x02	; 2
	TIMSK |= (1 << TOIE1);
}
void curtain()
{
	TIMSK &= ~(1 << TOIE1);
	for(int i = 8; i <= 15; i++)
     f64:	e6 17       	cp	r30, r22
     f66:	f7 07       	cpc	r31, r23
     f68:	71 f7       	brne	.-36     	; 0xf46 <curtain+0x26>
     f6a:	20 ea       	ldi	r18, 0xA0	; 160
     f6c:	3f e0       	ldi	r19, 0x0F	; 15
     f6e:	40 e9       	ldi	r20, 0x90	; 144
     f70:	51 e0       	ldi	r21, 0x01	; 1
     f72:	ca 01       	movw	r24, r20
     f74:	01 97       	sbiw	r24, 0x01	; 1
     f76:	f1 f7       	brne	.-4      	; 0xf74 <curtain+0x54>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f78:	21 50       	subi	r18, 0x01	; 1
     f7a:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f7c:	d1 f7       	brne	.-12     	; 0xf72 <curtain+0x52>
     f7e:	ee e3       	ldi	r30, 0x3E	; 62
     f80:	f1 e0       	ldi	r31, 0x01	; 1
     f82:	df 01       	movw	r26, r30
     f84:	12 96       	adiw	r26, 0x02	; 2
 	}
	_delay_ms(400);
	for(int i = 15; i >= 8; i--)
 	{
 		disp[i][0] = 0x00;
		disp[31 - i][0] = 0x00;
     f86:	c4 ef       	ldi	r28, 0xF4	; 244
     f88:	d1 e0       	ldi	r29, 0x01	; 1
     f8a:	40 e9       	ldi	r20, 0x90	; 144
     f8c:	51 e0       	ldi	r21, 0x01	; 1
		disp[31 - i][0] = 0xFF;
		disp[31 - i][1] = 0x00;
		_delay_ms(50);
 	}
	_delay_ms(400);
	for(int i = 15; i >= 8; i--)
     f8e:	6e e2       	ldi	r22, 0x2E	; 46
     f90:	71 e0       	ldi	r23, 0x01	; 1
 	{
 		disp[i][0] = 0x00;
     f92:	10 82       	st	Z, r1
		disp[31 - i][0] = 0x00;
     f94:	1c 92       	st	X, r1
     f96:	9e 01       	movw	r18, r28
     f98:	ca 01       	movw	r24, r20
     f9a:	01 97       	sbiw	r24, 0x01	; 1
     f9c:	f1 f7       	brne	.-4      	; 0xf9a <curtain+0x7a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f9e:	21 50       	subi	r18, 0x01	; 1
     fa0:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fa2:	d1 f7       	brne	.-12     	; 0xf98 <curtain+0x78>
     fa4:	32 97       	sbiw	r30, 0x02	; 2
     fa6:	12 96       	adiw	r26, 0x02	; 2
		disp[31 - i][0] = 0xFF;
		disp[31 - i][1] = 0x00;
		_delay_ms(50);
 	}
	_delay_ms(400);
	for(int i = 15; i >= 8; i--)
     fa8:	e6 17       	cp	r30, r22
     faa:	f7 07       	cpc	r31, r23
     fac:	91 f7       	brne	.-28     	; 0xf92 <curtain+0x72>
     fae:	20 ea       	ldi	r18, 0xA0	; 160
     fb0:	3f e0       	ldi	r19, 0x0F	; 15
     fb2:	40 e9       	ldi	r20, 0x90	; 144
     fb4:	51 e0       	ldi	r21, 0x01	; 1
     fb6:	ca 01       	movw	r24, r20
     fb8:	01 97       	sbiw	r24, 0x01	; 1
     fba:	f1 f7       	brne	.-4      	; 0xfb8 <curtain+0x98>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fbc:	21 50       	subi	r18, 0x01	; 1
     fbe:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fc0:	d1 f7       	brne	.-12     	; 0xfb6 <curtain+0x96>
 		disp[i][0] = 0x00;
		disp[31 - i][0] = 0x00;
		_delay_ms(50);
 	}
	_delay_ms(400);
	TIMSK |= (1 << TOIE1);
     fc2:	e9 e5       	ldi	r30, 0x59	; 89
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	80 81       	ld	r24, Z
     fc8:	84 60       	ori	r24, 0x04	; 4
     fca:	80 83       	st	Z, r24
}
     fcc:	df 91       	pop	r29
     fce:	cf 91       	pop	r28
     fd0:	1f 91       	pop	r17
     fd2:	08 95       	ret

00000fd4 <init_process>:
unsigned char No[2][5] = 	{ {0b01111110, 0b00000100, 0b00011000, 0b00100000, 0b01111110},
 														{0b01110000, 0b01010000, 0b01110000, 0b00000000, 0b00000000}
													};
unsigned char R[4] = { 0b01111111, 0b00011001, 0b00101001, 0b01000110};
void init_process()
{
     fd4:	ef 92       	push	r14
     fd6:	ff 92       	push	r15
     fd8:	0f 93       	push	r16
     fda:	1f 93       	push	r17
     fdc:	cf 93       	push	r28
     fde:	df 93       	push	r29
	curtain();
     fe0:	0e 94 90 07 	call	0xf20	; 0xf20 <curtain>
	check = 0;
     fe4:	10 92 5d 01 	sts	0x015D, r1
	player_x = 1;
     fe8:	81 e0       	ldi	r24, 0x01	; 1
     fea:	80 93 60 01 	sts	0x0160, r24
	mode = INIT_DISP;
     fee:	10 92 52 01 	sts	0x0152, r1
	while(mode == INIT_DISP)
	{
		switch(player_x){
			case 0:
				print_number(1,0,numbers[1],4);
     ff2:	0f 2e       	mov	r0, r31
     ff4:	f5 e6       	ldi	r31, 0x65	; 101
     ff6:	ef 2e       	mov	r14, r31
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	ff 2e       	mov	r15, r31
     ffc:	f0 2d       	mov	r31, r0
				print_number(6,0,numbers[2],4);
				clear_up(11,0,4);
				break;
			case 2:
				clear_up(1,0,9);
				print_number(11,0,R,4);
     ffe:	c3 e9       	ldi	r28, 0x93	; 147
    1000:	d0 e0       	ldi	r29, 0x00	; 0
				print_number(1,0,numbers[1],4);
				clear_up(6,0,9);
				break;
			case 1:
				clear_up(1,0,4);
				print_number(6,0,numbers[2],4);
    1002:	09 e6       	ldi	r16, 0x69	; 105
    1004:	10 e0       	ldi	r17, 0x00	; 0
    1006:	44 c0       	rjmp	.+136    	; 0x1090 <init_process+0xbc>
	check = 0;
	player_x = 1;
	mode = INIT_DISP;
	while(mode == INIT_DISP)
	{
		switch(player_x){
    1008:	91 30       	cpi	r25, 0x01	; 1
    100a:	b9 f0       	breq	.+46     	; 0x103a <init_process+0x66>
    100c:	91 30       	cpi	r25, 0x01	; 1
    100e:	18 f0       	brcs	.+6      	; 0x1016 <init_process+0x42>
    1010:	92 30       	cpi	r25, 0x02	; 2
    1012:	d1 f7       	brne	.-12     	; 0x1008 <init_process+0x34>
    1014:	2c c0       	rjmp	.+88     	; 0x106e <init_process+0x9a>
			case 0:
				print_number(1,0,numbers[1],4);
    1016:	81 e0       	ldi	r24, 0x01	; 1
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	60 e0       	ldi	r22, 0x00	; 0
    101c:	70 e0       	ldi	r23, 0x00	; 0
    101e:	a7 01       	movw	r20, r14
    1020:	24 e0       	ldi	r18, 0x04	; 4
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	0e 94 7f 04 	call	0x8fe	; 0x8fe <print_number>
				clear_up(6,0,9);
    1028:	86 e0       	ldi	r24, 0x06	; 6
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	60 e0       	ldi	r22, 0x00	; 0
    102e:	70 e0       	ldi	r23, 0x00	; 0
    1030:	49 e0       	ldi	r20, 0x09	; 9
    1032:	50 e0       	ldi	r21, 0x00	; 0
    1034:	0e 94 a7 04 	call	0x94e	; 0x94e <clear_up>
    1038:	2b c0       	rjmp	.+86     	; 0x1090 <init_process+0xbc>
				break;
			case 1:
				clear_up(1,0,4);
    103a:	81 e0       	ldi	r24, 0x01	; 1
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	60 e0       	ldi	r22, 0x00	; 0
    1040:	70 e0       	ldi	r23, 0x00	; 0
    1042:	44 e0       	ldi	r20, 0x04	; 4
    1044:	50 e0       	ldi	r21, 0x00	; 0
    1046:	0e 94 a7 04 	call	0x94e	; 0x94e <clear_up>
				print_number(6,0,numbers[2],4);
    104a:	86 e0       	ldi	r24, 0x06	; 6
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	60 e0       	ldi	r22, 0x00	; 0
    1050:	70 e0       	ldi	r23, 0x00	; 0
    1052:	a8 01       	movw	r20, r16
    1054:	24 e0       	ldi	r18, 0x04	; 4
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	0e 94 7f 04 	call	0x8fe	; 0x8fe <print_number>
				clear_up(11,0,4);
    105c:	8b e0       	ldi	r24, 0x0B	; 11
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	60 e0       	ldi	r22, 0x00	; 0
    1062:	70 e0       	ldi	r23, 0x00	; 0
    1064:	44 e0       	ldi	r20, 0x04	; 4
    1066:	50 e0       	ldi	r21, 0x00	; 0
    1068:	0e 94 a7 04 	call	0x94e	; 0x94e <clear_up>
    106c:	11 c0       	rjmp	.+34     	; 0x1090 <init_process+0xbc>
				break;
			case 2:
				clear_up(1,0,9);
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	60 e0       	ldi	r22, 0x00	; 0
    1074:	70 e0       	ldi	r23, 0x00	; 0
    1076:	49 e0       	ldi	r20, 0x09	; 9
    1078:	50 e0       	ldi	r21, 0x00	; 0
    107a:	0e 94 a7 04 	call	0x94e	; 0x94e <clear_up>
				print_number(11,0,R,4);
    107e:	8b e0       	ldi	r24, 0x0B	; 11
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	60 e0       	ldi	r22, 0x00	; 0
    1084:	70 e0       	ldi	r23, 0x00	; 0
    1086:	ae 01       	movw	r20, r28
    1088:	24 e0       	ldi	r18, 0x04	; 4
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	0e 94 7f 04 	call	0x8fe	; 0x8fe <print_number>
	check = 0;
	player_x = 1;
	mode = INIT_DISP;
	while(mode == INIT_DISP)
	{
		switch(player_x){
    1090:	90 91 60 01 	lds	r25, 0x0160
{
	curtain();
	check = 0;
	player_x = 1;
	mode = INIT_DISP;
	while(mode == INIT_DISP)
    1094:	80 91 52 01 	lds	r24, 0x0152
    1098:	88 23       	and	r24, r24
    109a:	09 f4       	brne	.+2      	; 0x109e <init_process+0xca>
    109c:	b5 cf       	rjmp	.-150    	; 0x1008 <init_process+0x34>
				break;
			default:
				break;
		}
	}
	TIMSK &= ~(1 << TOIE1);
    109e:	e9 e5       	ldi	r30, 0x59	; 89
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	80 81       	ld	r24, Z
    10a4:	8b 7f       	andi	r24, 0xFB	; 251
    10a6:	80 83       	st	Z, r24
	for(int i = (player_x * 5) + 9; i < (player_x * 5) + 13; i++)
    10a8:	85 e0       	ldi	r24, 0x05	; 5
    10aa:	98 9f       	mul	r25, r24
    10ac:	90 01       	movw	r18, r0
    10ae:	11 24       	eor	r1, r1
    10b0:	a9 01       	movw	r20, r18
    10b2:	47 5f       	subi	r20, 0xF7	; 247
    10b4:	5f 4f       	sbci	r21, 0xFF	; 255
    10b6:	c9 01       	movw	r24, r18
    10b8:	0d 96       	adiw	r24, 0x0d	; 13
    10ba:	48 17       	cp	r20, r24
    10bc:	59 07       	cpc	r21, r25
    10be:	9c f4       	brge	.+38     	; 0x10e6 <init_process+0x112>
    10c0:	ca 01       	movw	r24, r20
    10c2:	88 0f       	add	r24, r24
    10c4:	99 1f       	adc	r25, r25
    10c6:	fc 01       	movw	r30, r24
    10c8:	e0 5e       	subi	r30, 0xE0	; 224
    10ca:	fe 4f       	sbci	r31, 0xFE	; 254
    10cc:	c9 01       	movw	r24, r18
    10ce:	88 0f       	add	r24, r24
    10d0:	99 1f       	adc	r25, r25
    10d2:	9c 01       	movw	r18, r24
    10d4:	26 5c       	subi	r18, 0xC6	; 198
    10d6:	3e 4f       	sbci	r19, 0xFE	; 254
	{	
		disp[i][1] = disp[i][0];
    10d8:	80 81       	ld	r24, Z
    10da:	81 83       	std	Z+1, r24	; 0x01
		disp[i][0] = 0;
    10dc:	10 82       	st	Z, r1
    10de:	32 96       	adiw	r30, 0x02	; 2
			default:
				break;
		}
	}
	TIMSK &= ~(1 << TOIE1);
	for(int i = (player_x * 5) + 9; i < (player_x * 5) + 13; i++)
    10e0:	e2 17       	cp	r30, r18
    10e2:	f3 07       	cpc	r31, r19
    10e4:	c9 f7       	brne	.-14     	; 0x10d8 <init_process+0x104>
    10e6:	20 e4       	ldi	r18, 0x40	; 64
    10e8:	3f e1       	ldi	r19, 0x1F	; 31
    10ea:	40 e9       	ldi	r20, 0x90	; 144
    10ec:	51 e0       	ldi	r21, 0x01	; 1
    10ee:	ca 01       	movw	r24, r20
    10f0:	01 97       	sbiw	r24, 0x01	; 1
    10f2:	f1 f7       	brne	.-4      	; 0x10f0 <init_process+0x11c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10f4:	21 50       	subi	r18, 0x01	; 1
    10f6:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10f8:	d1 f7       	brne	.-12     	; 0x10ee <init_process+0x11a>
	{	
		disp[i][1] = disp[i][0];
		disp[i][0] = 0;
	}
	_delay_ms(800);
	curtain();
    10fa:	0e 94 90 07 	call	0xf20	; 0xf20 <curtain>
	TIMSK |= (1 << TOIE1);
    10fe:	e9 e5       	ldi	r30, 0x59	; 89
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	80 81       	ld	r24, Z
    1104:	84 60       	ori	r24, 0x04	; 4
    1106:	80 83       	st	Z, r24
}
    1108:	df 91       	pop	r29
    110a:	cf 91       	pop	r28
    110c:	1f 91       	pop	r17
    110e:	0f 91       	pop	r16
    1110:	ff 90       	pop	r15
    1112:	ef 90       	pop	r14
    1114:	08 95       	ret

00001116 <init_enemy>:
volatile unsigned char bullet_flag;
struct enemy enemys[POOL_SIZE];
struct enemy *top = enemys;

void init_enemy()
{
    1116:	df 93       	push	r29
    1118:	cf 93       	push	r28
    111a:	00 d0       	rcall	.+0      	; 0x111c <init_enemy+0x6>
    111c:	00 d0       	rcall	.+0      	; 0x111e <init_enemy+0x8>
    111e:	00 d0       	rcall	.+0      	; 0x1120 <init_enemy+0xa>
    1120:	cd b7       	in	r28, 0x3d	; 61
    1122:	de b7       	in	r29, 0x3e	; 62
  struct enemy *r=enemys;
    1124:	84 e6       	ldi	r24, 0x64	; 100
    1126:	91 e0       	ldi	r25, 0x01	; 1
    1128:	9e 83       	std	Y+6, r25	; 0x06
    112a:	8d 83       	std	Y+5, r24	; 0x05
  struct enemy *s;

  enemys[POOL_SIZE - 1].next=NULL;  
    112c:	10 92 07 03 	sts	0x0307, r1
    1130:	10 92 06 03 	sts	0x0306, r1

  for(int i = 1; i < POOL_SIZE; i++) { 
    1134:	81 e0       	ldi	r24, 0x01	; 1
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	9a 83       	std	Y+2, r25	; 0x02
    113a:	89 83       	std	Y+1, r24	; 0x01
    113c:	14 c0       	rjmp	.+40     	; 0x1166 <init_enemy+0x50>
    s = r++;
    113e:	8d 81       	ldd	r24, Y+5	; 0x05
    1140:	9e 81       	ldd	r25, Y+6	; 0x06
    1142:	9c 83       	std	Y+4, r25	; 0x04
    1144:	8b 83       	std	Y+3, r24	; 0x03
    1146:	8d 81       	ldd	r24, Y+5	; 0x05
    1148:	9e 81       	ldd	r25, Y+6	; 0x06
    114a:	06 96       	adiw	r24, 0x06	; 6
    114c:	9e 83       	std	Y+6, r25	; 0x06
    114e:	8d 83       	std	Y+5, r24	; 0x05
    s->next = r;
    1150:	eb 81       	ldd	r30, Y+3	; 0x03
    1152:	fc 81       	ldd	r31, Y+4	; 0x04
    1154:	8d 81       	ldd	r24, Y+5	; 0x05
    1156:	9e 81       	ldd	r25, Y+6	; 0x06
    1158:	95 83       	std	Z+5, r25	; 0x05
    115a:	84 83       	std	Z+4, r24	; 0x04
  struct enemy *r=enemys;
  struct enemy *s;

  enemys[POOL_SIZE - 1].next=NULL;  

  for(int i = 1; i < POOL_SIZE; i++) { 
    115c:	89 81       	ldd	r24, Y+1	; 0x01
    115e:	9a 81       	ldd	r25, Y+2	; 0x02
    1160:	01 96       	adiw	r24, 0x01	; 1
    1162:	9a 83       	std	Y+2, r25	; 0x02
    1164:	89 83       	std	Y+1, r24	; 0x01
    1166:	89 81       	ldd	r24, Y+1	; 0x01
    1168:	9a 81       	ldd	r25, Y+2	; 0x02
    116a:	86 34       	cpi	r24, 0x46	; 70
    116c:	91 05       	cpc	r25, r1
    116e:	3c f3       	brlt	.-50     	; 0x113e <init_enemy+0x28>
    s = r++;
    s->next = r;
  }
}
    1170:	26 96       	adiw	r28, 0x06	; 6
    1172:	0f b6       	in	r0, 0x3f	; 63
    1174:	f8 94       	cli
    1176:	de bf       	out	0x3e, r29	; 62
    1178:	0f be       	out	0x3f, r0	; 63
    117a:	cd bf       	out	0x3d, r28	; 61
    117c:	cf 91       	pop	r28
    117e:	df 91       	pop	r29
    1180:	08 95       	ret

00001182 <new_enemy>:

struct enemy* new_enemy(unsigned char y, unsigned char rate)
{	
    1182:	df 93       	push	r29
    1184:	cf 93       	push	r28
    1186:	00 d0       	rcall	.+0      	; 0x1188 <new_enemy+0x6>
    1188:	00 d0       	rcall	.+0      	; 0x118a <new_enemy+0x8>
    118a:	00 d0       	rcall	.+0      	; 0x118c <new_enemy+0xa>
    118c:	cd b7       	in	r28, 0x3d	; 61
    118e:	de b7       	in	r29, 0x3e	; 62
    1190:	8b 83       	std	Y+3, r24	; 0x03
    1192:	6c 83       	std	Y+4, r22	; 0x04
	struct enemy *node = top;
    1194:	80 91 97 00 	lds	r24, 0x0097
    1198:	90 91 98 00 	lds	r25, 0x0098
    119c:	9a 83       	std	Y+2, r25	; 0x02
    119e:	89 83       	std	Y+1, r24	; 0x01
	if(top == NULL)
    11a0:	80 91 97 00 	lds	r24, 0x0097
    11a4:	90 91 98 00 	lds	r25, 0x0098
    11a8:	00 97       	sbiw	r24, 0x00	; 0
    11aa:	19 f4       	brne	.+6      	; 0x11b2 <new_enemy+0x30>
		return NULL;
    11ac:	1e 82       	std	Y+6, r1	; 0x06
    11ae:	1d 82       	std	Y+5, r1	; 0x05
    11b0:	2b c0       	rjmp	.+86     	; 0x1208 <new_enemy+0x86>

	top = top->next;
    11b2:	e0 91 97 00 	lds	r30, 0x0097
    11b6:	f0 91 98 00 	lds	r31, 0x0098
    11ba:	84 81       	ldd	r24, Z+4	; 0x04
    11bc:	95 81       	ldd	r25, Z+5	; 0x05
    11be:	90 93 98 00 	sts	0x0098, r25
    11c2:	80 93 97 00 	sts	0x0097, r24
	node->x = 23;
    11c6:	e9 81       	ldd	r30, Y+1	; 0x01
    11c8:	fa 81       	ldd	r31, Y+2	; 0x02
    11ca:	87 e1       	ldi	r24, 0x17	; 23
    11cc:	80 83       	st	Z, r24
	node->y = (1 << y);
    11ce:	8b 81       	ldd	r24, Y+3	; 0x03
    11d0:	28 2f       	mov	r18, r24
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	02 2e       	mov	r0, r18
    11da:	02 c0       	rjmp	.+4      	; 0x11e0 <new_enemy+0x5e>
    11dc:	88 0f       	add	r24, r24
    11de:	99 1f       	adc	r25, r25
    11e0:	0a 94       	dec	r0
    11e2:	e2 f7       	brpl	.-8      	; 0x11dc <new_enemy+0x5a>
    11e4:	e9 81       	ldd	r30, Y+1	; 0x01
    11e6:	fa 81       	ldd	r31, Y+2	; 0x02
    11e8:	81 83       	std	Z+1, r24	; 0x01
	node->rate = rate;
    11ea:	e9 81       	ldd	r30, Y+1	; 0x01
    11ec:	fa 81       	ldd	r31, Y+2	; 0x02
    11ee:	8c 81       	ldd	r24, Y+4	; 0x04
    11f0:	82 83       	std	Z+2, r24	; 0x02
	node->del = 0;
    11f2:	e9 81       	ldd	r30, Y+1	; 0x01
    11f4:	fa 81       	ldd	r31, Y+2	; 0x02
    11f6:	13 82       	std	Z+3, r1	; 0x03
	node->next = NULL;
    11f8:	e9 81       	ldd	r30, Y+1	; 0x01
    11fa:	fa 81       	ldd	r31, Y+2	; 0x02
    11fc:	15 82       	std	Z+5, r1	; 0x05
    11fe:	14 82       	std	Z+4, r1	; 0x04
	return node;
    1200:	89 81       	ldd	r24, Y+1	; 0x01
    1202:	9a 81       	ldd	r25, Y+2	; 0x02
    1204:	9e 83       	std	Y+6, r25	; 0x06
    1206:	8d 83       	std	Y+5, r24	; 0x05
    1208:	8d 81       	ldd	r24, Y+5	; 0x05
    120a:	9e 81       	ldd	r25, Y+6	; 0x06
}
    120c:	26 96       	adiw	r28, 0x06	; 6
    120e:	0f b6       	in	r0, 0x3f	; 63
    1210:	f8 94       	cli
    1212:	de bf       	out	0x3e, r29	; 62
    1214:	0f be       	out	0x3f, r0	; 63
    1216:	cd bf       	out	0x3d, r28	; 61
    1218:	cf 91       	pop	r28
    121a:	df 91       	pop	r29
    121c:	08 95       	ret

0000121e <Galug_game>:

unsigned int Galug_game(int seed)
{
    121e:	df 93       	push	r29
    1220:	cf 93       	push	r28
    1222:	cd b7       	in	r28, 0x3d	; 61
    1224:	de b7       	in	r29, 0x3e	; 62
    1226:	67 97       	sbiw	r28, 0x17	; 23
    1228:	0f b6       	in	r0, 0x3f	; 63
    122a:	f8 94       	cli
    122c:	de bf       	out	0x3e, r29	; 62
    122e:	0f be       	out	0x3f, r0	; 63
    1230:	cd bf       	out	0x3d, r28	; 61
    1232:	9f 8b       	std	Y+23, r25	; 0x17
    1234:	8e 8b       	std	Y+22, r24	; 0x16
	struct enemy *LL;
	struct enemy *tmp;
	unsigned char tmp_x;
	unsigned char tmp_y;
	int i;
	unsigned int score = 0;
    1236:	1d 86       	std	Y+13, r1	; 0x0d
    1238:	1c 86       	std	Y+12, r1	; 0x0c
	unsigned char round_rate = 27;
    123a:	8b e1       	ldi	r24, 0x1B	; 27
    123c:	8b 87       	std	Y+11, r24	; 0x0b
	unsigned char rate_flag = 1;
    123e:	81 e0       	ldi	r24, 0x01	; 1
    1240:	8a 87       	std	Y+10, r24	; 0x0a
	srand(seed);
    1242:	8e 89       	ldd	r24, Y+22	; 0x16
    1244:	9f 89       	ldd	r25, Y+23	; 0x17
    1246:	0e 94 a6 12 	call	0x254c	; 0x254c <srand>

	player_x = 10;
    124a:	8a e0       	ldi	r24, 0x0A	; 10
    124c:	80 93 60 01 	sts	0x0160, r24
	player_y = 0x08;
    1250:	88 e0       	ldi	r24, 0x08	; 8
    1252:	80 93 5a 01 	sts	0x015A, r24
	disp[player_x][1] = player_y;
    1256:	80 91 60 01 	lds	r24, 0x0160
    125a:	88 2f       	mov	r24, r24
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	20 91 5a 01 	lds	r18, 0x015A
    1262:	88 0f       	add	r24, r24
    1264:	99 1f       	adc	r25, r25
    1266:	fc 01       	movw	r30, r24
    1268:	ef 5d       	subi	r30, 0xDF	; 223
    126a:	fe 4f       	sbci	r31, 0xFE	; 254
    126c:	20 83       	st	Z, r18
	disp[8][1] = 0xFF;
    126e:	8f ef       	ldi	r24, 0xFF	; 255
    1270:	80 93 31 01 	sts	0x0131, r24
	game_flag = 1;
    1274:	81 e0       	ldi	r24, 0x01	; 1
    1276:	80 93 59 01 	sts	0x0159, r24
	init_enemy();
    127a:	0e 94 8b 08 	call	0x1116	; 0x1116 <init_enemy>
	LL = NULL;
    127e:	1d 8a       	std	Y+21, r1	; 0x15
    1280:	1c 8a       	std	Y+20, r1	; 0x14
	Round_check = 0;
    1282:	10 92 5c 01 	sts	0x015C, r1
    1286:	10 92 5b 01 	sts	0x015B, r1
	check = 0;
    128a:	10 92 5e 01 	sts	0x015E, r1
    128e:	10 92 5d 01 	sts	0x015D, r1
	skill_flag = 0;
    1292:	10 92 5f 01 	sts	0x015F, r1
	bullet_num = 0;
    1296:	10 92 62 01 	sts	0x0162, r1
    129a:	10 92 61 01 	sts	0x0161, r1
	bullet_flag = 0;
    129e:	10 92 63 01 	sts	0x0163, r1
	
	while(1)
	{
		if(check >= 1)
    12a2:	80 91 5d 01 	lds	r24, 0x015D
    12a6:	90 91 5e 01 	lds	r25, 0x015E
    12aa:	18 16       	cp	r1, r24
    12ac:	19 06       	cpc	r1, r25
    12ae:	cc f7       	brge	.-14     	; 0x12a2 <Galug_game+0x84>
		{
			if((Round_check % round_rate) == 0)
    12b0:	40 91 5b 01 	lds	r20, 0x015B
    12b4:	50 91 5c 01 	lds	r21, 0x015C
    12b8:	8b 85       	ldd	r24, Y+11	; 0x0b
    12ba:	28 2f       	mov	r18, r24
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	ca 01       	movw	r24, r20
    12c0:	b9 01       	movw	r22, r18
    12c2:	0e 94 29 12 	call	0x2452	; 0x2452 <__udivmodhi4>
    12c6:	00 97       	sbiw	r24, 0x00	; 0
    12c8:	29 f5       	brne	.+74     	; 0x1314 <Galug_game+0xf6>
			{	
				unsigned char index = rand();
    12ca:	0e 94 a1 12 	call	0x2542	; 0x2542 <rand>
    12ce:	89 87       	std	Y+9, r24	; 0x09
				tmp = new_enemy(index % 8, 5 - (index % rate_flag));
    12d0:	89 85       	ldd	r24, Y+9	; 0x09
    12d2:	28 2f       	mov	r18, r24
    12d4:	27 70       	andi	r18, 0x07	; 7
    12d6:	89 85       	ldd	r24, Y+9	; 0x09
    12d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    12da:	69 2f       	mov	r22, r25
    12dc:	0e 94 1d 12 	call	0x243a	; 0x243a <__udivmodqi4>
    12e0:	89 2f       	mov	r24, r25
    12e2:	98 2f       	mov	r25, r24
    12e4:	85 e0       	ldi	r24, 0x05	; 5
    12e6:	38 2f       	mov	r19, r24
    12e8:	39 1b       	sub	r19, r25
    12ea:	93 2f       	mov	r25, r19
    12ec:	82 2f       	mov	r24, r18
    12ee:	69 2f       	mov	r22, r25
    12f0:	0e 94 c1 08 	call	0x1182	; 0x1182 <new_enemy>
    12f4:	9b 8b       	std	Y+19, r25	; 0x13
    12f6:	8a 8b       	std	Y+18, r24	; 0x12
				if(tmp == NULL)
    12f8:	8a 89       	ldd	r24, Y+18	; 0x12
    12fa:	9b 89       	ldd	r25, Y+19	; 0x13
    12fc:	00 97       	sbiw	r24, 0x00	; 0
    12fe:	89 f2       	breq	.-94     	; 0x12a2 <Galug_game+0x84>
					continue;
				tmp->next = LL;
    1300:	ea 89       	ldd	r30, Y+18	; 0x12
    1302:	fb 89       	ldd	r31, Y+19	; 0x13
    1304:	8c 89       	ldd	r24, Y+20	; 0x14
    1306:	9d 89       	ldd	r25, Y+21	; 0x15
    1308:	95 83       	std	Z+5, r25	; 0x05
    130a:	84 83       	std	Z+4, r24	; 0x04
				LL = tmp;
    130c:	8a 89       	ldd	r24, Y+18	; 0x12
    130e:	9b 89       	ldd	r25, Y+19	; 0x13
    1310:	9d 8b       	std	Y+21, r25	; 0x15
    1312:	8c 8b       	std	Y+20, r24	; 0x14
				
			}
			if((Round_check % 800) == 0)
    1314:	80 91 5b 01 	lds	r24, 0x015B
    1318:	90 91 5c 01 	lds	r25, 0x015C
    131c:	20 e2       	ldi	r18, 0x20	; 32
    131e:	33 e0       	ldi	r19, 0x03	; 3
    1320:	b9 01       	movw	r22, r18
    1322:	0e 94 29 12 	call	0x2452	; 0x2452 <__udivmodhi4>
    1326:	00 97       	sbiw	r24, 0x00	; 0
    1328:	61 f4       	brne	.+24     	; 0x1342 <Galug_game+0x124>
			{
				skill_flag = 1;
    132a:	81 e0       	ldi	r24, 0x01	; 1
    132c:	80 93 5f 01 	sts	0x015F, r24
				if(round_rate > 9)
    1330:	8b 85       	ldd	r24, Y+11	; 0x0b
    1332:	8a 30       	cpi	r24, 0x0A	; 10
    1334:	18 f0       	brcs	.+6      	; 0x133c <Galug_game+0x11e>
					round_rate -= 3;
    1336:	8b 85       	ldd	r24, Y+11	; 0x0b
    1338:	83 50       	subi	r24, 0x03	; 3
    133a:	8b 87       	std	Y+11, r24	; 0x0b
				if(rate_flag < 4);
					rate_flag++;
    133c:	8a 85       	ldd	r24, Y+10	; 0x0a
    133e:	8f 5f       	subi	r24, 0xFF	; 255
    1340:	8a 87       	std	Y+10, r24	; 0x0a
			}
			tmp = LL;
    1342:	8c 89       	ldd	r24, Y+20	; 0x14
    1344:	9d 89       	ldd	r25, Y+21	; 0x15
    1346:	9b 8b       	std	Y+19, r25	; 0x13
    1348:	8a 8b       	std	Y+18, r24	; 0x12
    134a:	20 c0       	rjmp	.+64     	; 0x138c <Galug_game+0x16e>
			while(tmp)
			{
				if(tmp->rate <= tmp->del)
    134c:	ea 89       	ldd	r30, Y+18	; 0x12
    134e:	fb 89       	ldd	r31, Y+19	; 0x13
    1350:	92 81       	ldd	r25, Z+2	; 0x02
    1352:	ea 89       	ldd	r30, Y+18	; 0x12
    1354:	fb 89       	ldd	r31, Y+19	; 0x13
    1356:	83 81       	ldd	r24, Z+3	; 0x03
    1358:	89 17       	cp	r24, r25
    135a:	58 f0       	brcs	.+22     	; 0x1372 <Galug_game+0x154>
				{
					(tmp->x)--;
    135c:	ea 89       	ldd	r30, Y+18	; 0x12
    135e:	fb 89       	ldd	r31, Y+19	; 0x13
    1360:	80 81       	ld	r24, Z
    1362:	81 50       	subi	r24, 0x01	; 1
    1364:	ea 89       	ldd	r30, Y+18	; 0x12
    1366:	fb 89       	ldd	r31, Y+19	; 0x13
    1368:	80 83       	st	Z, r24
					tmp->del = 0;
    136a:	ea 89       	ldd	r30, Y+18	; 0x12
    136c:	fb 89       	ldd	r31, Y+19	; 0x13
    136e:	13 82       	std	Z+3, r1	; 0x03
    1370:	07 c0       	rjmp	.+14     	; 0x1380 <Galug_game+0x162>
				}
				else
					(tmp->del)++;
    1372:	ea 89       	ldd	r30, Y+18	; 0x12
    1374:	fb 89       	ldd	r31, Y+19	; 0x13
    1376:	83 81       	ldd	r24, Z+3	; 0x03
    1378:	8f 5f       	subi	r24, 0xFF	; 255
    137a:	ea 89       	ldd	r30, Y+18	; 0x12
    137c:	fb 89       	ldd	r31, Y+19	; 0x13
    137e:	83 83       	std	Z+3, r24	; 0x03
				tmp = tmp->next;
    1380:	ea 89       	ldd	r30, Y+18	; 0x12
    1382:	fb 89       	ldd	r31, Y+19	; 0x13
    1384:	84 81       	ldd	r24, Z+4	; 0x04
    1386:	95 81       	ldd	r25, Z+5	; 0x05
    1388:	9b 8b       	std	Y+19, r25	; 0x13
    138a:	8a 8b       	std	Y+18, r24	; 0x12
					round_rate -= 3;
				if(rate_flag < 4);
					rate_flag++;
			}
			tmp = LL;
			while(tmp)
    138c:	8a 89       	ldd	r24, Y+18	; 0x12
    138e:	9b 89       	ldd	r25, Y+19	; 0x13
    1390:	00 97       	sbiw	r24, 0x00	; 0
    1392:	e1 f6       	brne	.-72     	; 0x134c <Galug_game+0x12e>
				}
				else
					(tmp->del)++;
				tmp = tmp->next;
			}
			clear_up(0,0,16);
    1394:	80 e0       	ldi	r24, 0x00	; 0
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	60 e0       	ldi	r22, 0x00	; 0
    139a:	70 e0       	ldi	r23, 0x00	; 0
    139c:	40 e1       	ldi	r20, 0x10	; 16
    139e:	50 e0       	ldi	r21, 0x00	; 0
    13a0:	0e 94 a7 04 	call	0x94e	; 0x94e <clear_up>
				
			tmp = LL;
    13a4:	8c 89       	ldd	r24, Y+20	; 0x14
    13a6:	9d 89       	ldd	r25, Y+21	; 0x15
    13a8:	9b 8b       	std	Y+19, r25	; 0x13
    13aa:	8a 8b       	std	Y+18, r24	; 0x12
    13ac:	bb c0       	rjmp	.+374    	; 0x1524 <Galug_game+0x306>
			while(tmp)
			{
				tmp_x = tmp->x;
    13ae:	ea 89       	ldd	r30, Y+18	; 0x12
    13b0:	fb 89       	ldd	r31, Y+19	; 0x13
    13b2:	80 81       	ld	r24, Z
    13b4:	89 8b       	std	Y+17, r24	; 0x11
				tmp_y = tmp->y;
    13b6:	ea 89       	ldd	r30, Y+18	; 0x12
    13b8:	fb 89       	ldd	r31, Y+19	; 0x13
    13ba:	81 81       	ldd	r24, Z+1	; 0x01
    13bc:	88 8b       	std	Y+16, r24	; 0x10
				disp[tmp_x][0] |= tmp_y;
    13be:	89 89       	ldd	r24, Y+17	; 0x11
    13c0:	48 2f       	mov	r20, r24
    13c2:	50 e0       	ldi	r21, 0x00	; 0
    13c4:	89 89       	ldd	r24, Y+17	; 0x11
    13c6:	88 2f       	mov	r24, r24
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	88 0f       	add	r24, r24
    13cc:	99 1f       	adc	r25, r25
    13ce:	fc 01       	movw	r30, r24
    13d0:	e0 5e       	subi	r30, 0xE0	; 224
    13d2:	fe 4f       	sbci	r31, 0xFE	; 254
    13d4:	90 81       	ld	r25, Z
    13d6:	88 89       	ldd	r24, Y+16	; 0x10
    13d8:	29 2f       	mov	r18, r25
    13da:	28 2b       	or	r18, r24
    13dc:	ca 01       	movw	r24, r20
    13de:	88 0f       	add	r24, r24
    13e0:	99 1f       	adc	r25, r25
    13e2:	fc 01       	movw	r30, r24
    13e4:	e0 5e       	subi	r30, 0xE0	; 224
    13e6:	fe 4f       	sbci	r31, 0xFE	; 254
    13e8:	20 83       	st	Z, r18
				
				if((disp[tmp_x][0] & tmp_y) && (disp[tmp_x][1] & tmp_y))
    13ea:	89 89       	ldd	r24, Y+17	; 0x11
    13ec:	88 2f       	mov	r24, r24
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	88 0f       	add	r24, r24
    13f2:	99 1f       	adc	r25, r25
    13f4:	fc 01       	movw	r30, r24
    13f6:	e0 5e       	subi	r30, 0xE0	; 224
    13f8:	fe 4f       	sbci	r31, 0xFE	; 254
    13fa:	90 81       	ld	r25, Z
    13fc:	88 89       	ldd	r24, Y+16	; 0x10
    13fe:	89 23       	and	r24, r25
    1400:	88 23       	and	r24, r24
    1402:	09 f4       	brne	.+2      	; 0x1406 <Galug_game+0x1e8>
    1404:	89 c0       	rjmp	.+274    	; 0x1518 <Galug_game+0x2fa>
    1406:	89 89       	ldd	r24, Y+17	; 0x11
    1408:	88 2f       	mov	r24, r24
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	88 0f       	add	r24, r24
    140e:	99 1f       	adc	r25, r25
    1410:	fc 01       	movw	r30, r24
    1412:	ef 5d       	subi	r30, 0xDF	; 223
    1414:	fe 4f       	sbci	r31, 0xFE	; 254
    1416:	90 81       	ld	r25, Z
    1418:	88 89       	ldd	r24, Y+16	; 0x10
    141a:	89 23       	and	r24, r25
    141c:	88 23       	and	r24, r24
    141e:	09 f4       	brne	.+2      	; 0x1422 <Galug_game+0x204>
    1420:	7b c0       	rjmp	.+246    	; 0x1518 <Galug_game+0x2fa>
				{	
					struct enemy *r = tmp->next;
    1422:	ea 89       	ldd	r30, Y+18	; 0x12
    1424:	fb 89       	ldd	r31, Y+19	; 0x13
    1426:	84 81       	ldd	r24, Z+4	; 0x04
    1428:	95 81       	ldd	r25, Z+5	; 0x05
    142a:	98 87       	std	Y+8, r25	; 0x08
    142c:	8f 83       	std	Y+7, r24	; 0x07
					disp[tmp_x][0] &= ~tmp_y;
    142e:	89 89       	ldd	r24, Y+17	; 0x11
    1430:	48 2f       	mov	r20, r24
    1432:	50 e0       	ldi	r21, 0x00	; 0
    1434:	89 89       	ldd	r24, Y+17	; 0x11
    1436:	88 2f       	mov	r24, r24
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	88 0f       	add	r24, r24
    143c:	99 1f       	adc	r25, r25
    143e:	fc 01       	movw	r30, r24
    1440:	e0 5e       	subi	r30, 0xE0	; 224
    1442:	fe 4f       	sbci	r31, 0xFE	; 254
    1444:	80 81       	ld	r24, Z
    1446:	98 2f       	mov	r25, r24
    1448:	88 89       	ldd	r24, Y+16	; 0x10
    144a:	80 95       	com	r24
    144c:	89 23       	and	r24, r25
    144e:	28 2f       	mov	r18, r24
    1450:	ca 01       	movw	r24, r20
    1452:	88 0f       	add	r24, r24
    1454:	99 1f       	adc	r25, r25
    1456:	fc 01       	movw	r30, r24
    1458:	e0 5e       	subi	r30, 0xE0	; 224
    145a:	fe 4f       	sbci	r31, 0xFE	; 254
    145c:	20 83       	st	Z, r18
					if(tmp_x != 10)
    145e:	89 89       	ldd	r24, Y+17	; 0x11
    1460:	8a 30       	cpi	r24, 0x0A	; 10
    1462:	e9 f0       	breq	.+58     	; 0x149e <Galug_game+0x280>
					{	
						disp[tmp_x][1] &= ~tmp_y;
    1464:	89 89       	ldd	r24, Y+17	; 0x11
    1466:	48 2f       	mov	r20, r24
    1468:	50 e0       	ldi	r21, 0x00	; 0
    146a:	89 89       	ldd	r24, Y+17	; 0x11
    146c:	88 2f       	mov	r24, r24
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	88 0f       	add	r24, r24
    1472:	99 1f       	adc	r25, r25
    1474:	fc 01       	movw	r30, r24
    1476:	ef 5d       	subi	r30, 0xDF	; 223
    1478:	fe 4f       	sbci	r31, 0xFE	; 254
    147a:	80 81       	ld	r24, Z
    147c:	98 2f       	mov	r25, r24
    147e:	88 89       	ldd	r24, Y+16	; 0x10
    1480:	80 95       	com	r24
    1482:	89 23       	and	r24, r25
    1484:	28 2f       	mov	r18, r24
    1486:	ca 01       	movw	r24, r20
    1488:	88 0f       	add	r24, r24
    148a:	99 1f       	adc	r25, r25
    148c:	fc 01       	movw	r30, r24
    148e:	ef 5d       	subi	r30, 0xDF	; 223
    1490:	fe 4f       	sbci	r31, 0xFE	; 254
    1492:	20 83       	st	Z, r18
						score += 3;
    1494:	8c 85       	ldd	r24, Y+12	; 0x0c
    1496:	9d 85       	ldd	r25, Y+13	; 0x0d
    1498:	03 96       	adiw	r24, 0x03	; 3
    149a:	9d 87       	std	Y+13, r25	; 0x0d
    149c:	8c 87       	std	Y+12, r24	; 0x0c
					}
					if(tmp == LL)
    149e:	2a 89       	ldd	r18, Y+18	; 0x12
    14a0:	3b 89       	ldd	r19, Y+19	; 0x13
    14a2:	8c 89       	ldd	r24, Y+20	; 0x14
    14a4:	9d 89       	ldd	r25, Y+21	; 0x15
    14a6:	28 17       	cp	r18, r24
    14a8:	39 07       	cpc	r19, r25
    14aa:	39 f4       	brne	.+14     	; 0x14ba <Galug_game+0x29c>
						LL = LL->next;
    14ac:	ec 89       	ldd	r30, Y+20	; 0x14
    14ae:	fd 89       	ldd	r31, Y+21	; 0x15
    14b0:	84 81       	ldd	r24, Z+4	; 0x04
    14b2:	95 81       	ldd	r25, Z+5	; 0x05
    14b4:	9d 8b       	std	Y+21, r25	; 0x15
    14b6:	8c 8b       	std	Y+20, r24	; 0x14
    14b8:	1c c0       	rjmp	.+56     	; 0x14f2 <Galug_game+0x2d4>
					else
					{
						struct enemy *p = LL;
    14ba:	8c 89       	ldd	r24, Y+20	; 0x14
    14bc:	9d 89       	ldd	r25, Y+21	; 0x15
    14be:	9e 83       	std	Y+6, r25	; 0x06
    14c0:	8d 83       	std	Y+5, r24	; 0x05
    14c2:	06 c0       	rjmp	.+12     	; 0x14d0 <Galug_game+0x2b2>
						while(p->next != tmp)
							p = p->next;
    14c4:	ed 81       	ldd	r30, Y+5	; 0x05
    14c6:	fe 81       	ldd	r31, Y+6	; 0x06
    14c8:	84 81       	ldd	r24, Z+4	; 0x04
    14ca:	95 81       	ldd	r25, Z+5	; 0x05
    14cc:	9e 83       	std	Y+6, r25	; 0x06
    14ce:	8d 83       	std	Y+5, r24	; 0x05
					if(tmp == LL)
						LL = LL->next;
					else
					{
						struct enemy *p = LL;
						while(p->next != tmp)
    14d0:	ed 81       	ldd	r30, Y+5	; 0x05
    14d2:	fe 81       	ldd	r31, Y+6	; 0x06
    14d4:	24 81       	ldd	r18, Z+4	; 0x04
    14d6:	35 81       	ldd	r19, Z+5	; 0x05
    14d8:	8a 89       	ldd	r24, Y+18	; 0x12
    14da:	9b 89       	ldd	r25, Y+19	; 0x13
    14dc:	28 17       	cp	r18, r24
    14de:	39 07       	cpc	r19, r25
    14e0:	89 f7       	brne	.-30     	; 0x14c4 <Galug_game+0x2a6>
							p = p->next;
						p->next = tmp->next;
    14e2:	ea 89       	ldd	r30, Y+18	; 0x12
    14e4:	fb 89       	ldd	r31, Y+19	; 0x13
    14e6:	84 81       	ldd	r24, Z+4	; 0x04
    14e8:	95 81       	ldd	r25, Z+5	; 0x05
    14ea:	ed 81       	ldd	r30, Y+5	; 0x05
    14ec:	fe 81       	ldd	r31, Y+6	; 0x06
    14ee:	95 83       	std	Z+5, r25	; 0x05
    14f0:	84 83       	std	Z+4, r24	; 0x04
					}
					tmp->next = top;
    14f2:	80 91 97 00 	lds	r24, 0x0097
    14f6:	90 91 98 00 	lds	r25, 0x0098
    14fa:	ea 89       	ldd	r30, Y+18	; 0x12
    14fc:	fb 89       	ldd	r31, Y+19	; 0x13
    14fe:	95 83       	std	Z+5, r25	; 0x05
    1500:	84 83       	std	Z+4, r24	; 0x04
					top = tmp;
    1502:	8a 89       	ldd	r24, Y+18	; 0x12
    1504:	9b 89       	ldd	r25, Y+19	; 0x13
    1506:	90 93 98 00 	sts	0x0098, r25
    150a:	80 93 97 00 	sts	0x0097, r24
					tmp = r;
    150e:	8f 81       	ldd	r24, Y+7	; 0x07
    1510:	98 85       	ldd	r25, Y+8	; 0x08
    1512:	9b 8b       	std	Y+19, r25	; 0x13
    1514:	8a 8b       	std	Y+18, r24	; 0x12
    1516:	06 c0       	rjmp	.+12     	; 0x1524 <Galug_game+0x306>
				}
				else
					tmp = tmp->next;
    1518:	ea 89       	ldd	r30, Y+18	; 0x12
    151a:	fb 89       	ldd	r31, Y+19	; 0x13
    151c:	84 81       	ldd	r24, Z+4	; 0x04
    151e:	95 81       	ldd	r25, Z+5	; 0x05
    1520:	9b 8b       	std	Y+19, r25	; 0x13
    1522:	8a 8b       	std	Y+18, r24	; 0x12
				tmp = tmp->next;
			}
			clear_up(0,0,16);
				
			tmp = LL;
			while(tmp)
    1524:	8a 89       	ldd	r24, Y+18	; 0x12
    1526:	9b 89       	ldd	r25, Y+19	; 0x13
    1528:	00 97       	sbiw	r24, 0x00	; 0
    152a:	09 f0       	breq	.+2      	; 0x152e <Galug_game+0x310>
    152c:	40 cf       	rjmp	.-384    	; 0x13ae <Galug_game+0x190>
					tmp = r;
				}
				else
					tmp = tmp->next;
			}
			clear_up(0,0,16);
    152e:	80 e0       	ldi	r24, 0x00	; 0
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	60 e0       	ldi	r22, 0x00	; 0
    1534:	70 e0       	ldi	r23, 0x00	; 0
    1536:	40 e1       	ldi	r20, 0x10	; 16
    1538:	50 e0       	ldi	r21, 0x00	; 0
    153a:	0e 94 a7 04 	call	0x94e	; 0x94e <clear_up>
			tmp = LL;
    153e:	8c 89       	ldd	r24, Y+20	; 0x14
    1540:	9d 89       	ldd	r25, Y+21	; 0x15
    1542:	9b 8b       	std	Y+19, r25	; 0x13
    1544:	8a 8b       	std	Y+18, r24	; 0x12
    1546:	22 c0       	rjmp	.+68     	; 0x158c <Galug_game+0x36e>
			while(tmp)
			{
				disp[tmp->x][0] |= tmp->y;
    1548:	ea 89       	ldd	r30, Y+18	; 0x12
    154a:	fb 89       	ldd	r31, Y+19	; 0x13
    154c:	80 81       	ld	r24, Z
    154e:	48 2f       	mov	r20, r24
    1550:	50 e0       	ldi	r21, 0x00	; 0
    1552:	ea 89       	ldd	r30, Y+18	; 0x12
    1554:	fb 89       	ldd	r31, Y+19	; 0x13
    1556:	80 81       	ld	r24, Z
    1558:	88 2f       	mov	r24, r24
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	88 0f       	add	r24, r24
    155e:	99 1f       	adc	r25, r25
    1560:	fc 01       	movw	r30, r24
    1562:	e0 5e       	subi	r30, 0xE0	; 224
    1564:	fe 4f       	sbci	r31, 0xFE	; 254
    1566:	90 81       	ld	r25, Z
    1568:	ea 89       	ldd	r30, Y+18	; 0x12
    156a:	fb 89       	ldd	r31, Y+19	; 0x13
    156c:	81 81       	ldd	r24, Z+1	; 0x01
    156e:	29 2f       	mov	r18, r25
    1570:	28 2b       	or	r18, r24
    1572:	ca 01       	movw	r24, r20
    1574:	88 0f       	add	r24, r24
    1576:	99 1f       	adc	r25, r25
    1578:	fc 01       	movw	r30, r24
    157a:	e0 5e       	subi	r30, 0xE0	; 224
    157c:	fe 4f       	sbci	r31, 0xFE	; 254
    157e:	20 83       	st	Z, r18
				tmp = tmp->next;
    1580:	ea 89       	ldd	r30, Y+18	; 0x12
    1582:	fb 89       	ldd	r31, Y+19	; 0x13
    1584:	84 81       	ldd	r24, Z+4	; 0x04
    1586:	95 81       	ldd	r25, Z+5	; 0x05
    1588:	9b 8b       	std	Y+19, r25	; 0x13
    158a:	8a 8b       	std	Y+18, r24	; 0x12
				else
					tmp = tmp->next;
			}
			clear_up(0,0,16);
			tmp = LL;
			while(tmp)
    158c:	8a 89       	ldd	r24, Y+18	; 0x12
    158e:	9b 89       	ldd	r25, Y+19	; 0x13
    1590:	00 97       	sbiw	r24, 0x00	; 0
    1592:	d1 f6       	brne	.-76     	; 0x1548 <Galug_game+0x32a>
			{
				disp[tmp->x][0] |= tmp->y;
				tmp = tmp->next;
			}
			if(skill_flag)
    1594:	80 91 5f 01 	lds	r24, 0x015F
    1598:	88 23       	and	r24, r24
    159a:	c9 f0       	breq	.+50     	; 0x15ce <Galug_game+0x3b0>
			{
				disp[player_x][0] |= player_y;
    159c:	80 91 60 01 	lds	r24, 0x0160
    15a0:	48 2f       	mov	r20, r24
    15a2:	50 e0       	ldi	r21, 0x00	; 0
    15a4:	80 91 60 01 	lds	r24, 0x0160
    15a8:	88 2f       	mov	r24, r24
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	88 0f       	add	r24, r24
    15ae:	99 1f       	adc	r25, r25
    15b0:	fc 01       	movw	r30, r24
    15b2:	e0 5e       	subi	r30, 0xE0	; 224
    15b4:	fe 4f       	sbci	r31, 0xFE	; 254
    15b6:	90 81       	ld	r25, Z
    15b8:	80 91 5a 01 	lds	r24, 0x015A
    15bc:	29 2f       	mov	r18, r25
    15be:	28 2b       	or	r18, r24
    15c0:	ca 01       	movw	r24, r20
    15c2:	88 0f       	add	r24, r24
    15c4:	99 1f       	adc	r25, r25
    15c6:	fc 01       	movw	r30, r24
    15c8:	e0 5e       	subi	r30, 0xE0	; 224
    15ca:	fe 4f       	sbci	r31, 0xFE	; 254
    15cc:	20 83       	st	Z, r18
			}
			i = disp[23][1];
    15ce:	80 91 4f 01 	lds	r24, 0x014F
    15d2:	88 2f       	mov	r24, r24
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	9f 87       	std	Y+15, r25	; 0x0f
    15d8:	8e 87       	std	Y+14, r24	; 0x0e
			for(i = 23; i > 11; i--)
    15da:	87 e1       	ldi	r24, 0x17	; 23
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	9f 87       	std	Y+15, r25	; 0x0f
    15e0:	8e 87       	std	Y+14, r24	; 0x0e
    15e2:	17 c0       	rjmp	.+46     	; 0x1612 <Galug_game+0x3f4>
				disp[i][1] = disp[i - 1][1];
    15e4:	2e 85       	ldd	r18, Y+14	; 0x0e
    15e6:	3f 85       	ldd	r19, Y+15	; 0x0f
    15e8:	8e 85       	ldd	r24, Y+14	; 0x0e
    15ea:	9f 85       	ldd	r25, Y+15	; 0x0f
    15ec:	01 97       	sbiw	r24, 0x01	; 1
    15ee:	88 0f       	add	r24, r24
    15f0:	99 1f       	adc	r25, r25
    15f2:	fc 01       	movw	r30, r24
    15f4:	ef 5d       	subi	r30, 0xDF	; 223
    15f6:	fe 4f       	sbci	r31, 0xFE	; 254
    15f8:	40 81       	ld	r20, Z
    15fa:	c9 01       	movw	r24, r18
    15fc:	88 0f       	add	r24, r24
    15fe:	99 1f       	adc	r25, r25
    1600:	fc 01       	movw	r30, r24
    1602:	ef 5d       	subi	r30, 0xDF	; 223
    1604:	fe 4f       	sbci	r31, 0xFE	; 254
    1606:	40 83       	st	Z, r20
			if(skill_flag)
			{
				disp[player_x][0] |= player_y;
			}
			i = disp[23][1];
			for(i = 23; i > 11; i--)
    1608:	8e 85       	ldd	r24, Y+14	; 0x0e
    160a:	9f 85       	ldd	r25, Y+15	; 0x0f
    160c:	01 97       	sbiw	r24, 0x01	; 1
    160e:	9f 87       	std	Y+15, r25	; 0x0f
    1610:	8e 87       	std	Y+14, r24	; 0x0e
    1612:	8e 85       	ldd	r24, Y+14	; 0x0e
    1614:	9f 85       	ldd	r25, Y+15	; 0x0f
    1616:	8c 30       	cpi	r24, 0x0C	; 12
    1618:	91 05       	cpc	r25, r1
    161a:	24 f7       	brge	.-56     	; 0x15e4 <Galug_game+0x3c6>
				disp[i][1] = disp[i - 1][1];
			
			if(bullet_flag > 1)
    161c:	80 91 63 01 	lds	r24, 0x0163
    1620:	82 30       	cpi	r24, 0x02	; 2
    1622:	68 f0       	brcs	.+26     	; 0x163e <Galug_game+0x420>
			{
				disp[11][1] = 0xFF;	
    1624:	8f ef       	ldi	r24, 0xFF	; 255
    1626:	80 93 37 01 	sts	0x0137, r24
				bullet_flag--;
    162a:	80 91 63 01 	lds	r24, 0x0163
    162e:	81 50       	subi	r24, 0x01	; 1
    1630:	80 93 63 01 	sts	0x0163, r24
				bullet_num = 0;
    1634:	10 92 62 01 	sts	0x0162, r1
    1638:	10 92 61 01 	sts	0x0161, r1
    163c:	1e c0       	rjmp	.+60     	; 0x167a <Galug_game+0x45c>
			}
			else if(bullet_flag == 1)
    163e:	80 91 63 01 	lds	r24, 0x0163
    1642:	81 30       	cpi	r24, 0x01	; 1
    1644:	39 f4       	brne	.+14     	; 0x1654 <Galug_game+0x436>
			{
				disp[11][1] = player_y;
    1646:	80 91 5a 01 	lds	r24, 0x015A
    164a:	80 93 37 01 	sts	0x0137, r24
				bullet_flag = 0;
    164e:	10 92 63 01 	sts	0x0163, r1
    1652:	13 c0       	rjmp	.+38     	; 0x167a <Galug_game+0x45c>
			}
			else
			{
				disp[11][1] = 0;
    1654:	10 92 37 01 	sts	0x0137, r1
				bullet_flag = 0;
    1658:	10 92 63 01 	sts	0x0163, r1
				if(bullet_num < 0)
    165c:	80 91 61 01 	lds	r24, 0x0161
    1660:	90 91 62 01 	lds	r25, 0x0162
    1664:	99 23       	and	r25, r25
    1666:	4c f4       	brge	.+18     	; 0x167a <Galug_game+0x45c>
					bullet_num++;		
    1668:	80 91 61 01 	lds	r24, 0x0161
    166c:	90 91 62 01 	lds	r25, 0x0162
    1670:	01 96       	adiw	r24, 0x01	; 1
    1672:	90 93 62 01 	sts	0x0162, r25
    1676:	80 93 61 01 	sts	0x0161, r24
			}
			tmp = LL;
    167a:	8c 89       	ldd	r24, Y+20	; 0x14
    167c:	9d 89       	ldd	r25, Y+21	; 0x15
    167e:	9b 8b       	std	Y+19, r25	; 0x13
    1680:	8a 8b       	std	Y+18, r24	; 0x12
    1682:	a5 c0       	rjmp	.+330    	; 0x17ce <Galug_game+0x5b0>
			while(tmp)
			{
				tmp_x = tmp->x;
    1684:	ea 89       	ldd	r30, Y+18	; 0x12
    1686:	fb 89       	ldd	r31, Y+19	; 0x13
    1688:	80 81       	ld	r24, Z
    168a:	89 8b       	std	Y+17, r24	; 0x11
				tmp_y = tmp->y;
    168c:	ea 89       	ldd	r30, Y+18	; 0x12
    168e:	fb 89       	ldd	r31, Y+19	; 0x13
    1690:	81 81       	ldd	r24, Z+1	; 0x01
    1692:	88 8b       	std	Y+16, r24	; 0x10
				
				if((disp[tmp_x][0] & tmp_y) && (disp[tmp_x][1] & tmp_y))
    1694:	89 89       	ldd	r24, Y+17	; 0x11
    1696:	88 2f       	mov	r24, r24
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	88 0f       	add	r24, r24
    169c:	99 1f       	adc	r25, r25
    169e:	fc 01       	movw	r30, r24
    16a0:	e0 5e       	subi	r30, 0xE0	; 224
    16a2:	fe 4f       	sbci	r31, 0xFE	; 254
    16a4:	90 81       	ld	r25, Z
    16a6:	88 89       	ldd	r24, Y+16	; 0x10
    16a8:	89 23       	and	r24, r25
    16aa:	88 23       	and	r24, r24
    16ac:	09 f4       	brne	.+2      	; 0x16b0 <Galug_game+0x492>
    16ae:	89 c0       	rjmp	.+274    	; 0x17c2 <Galug_game+0x5a4>
    16b0:	89 89       	ldd	r24, Y+17	; 0x11
    16b2:	88 2f       	mov	r24, r24
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	88 0f       	add	r24, r24
    16b8:	99 1f       	adc	r25, r25
    16ba:	fc 01       	movw	r30, r24
    16bc:	ef 5d       	subi	r30, 0xDF	; 223
    16be:	fe 4f       	sbci	r31, 0xFE	; 254
    16c0:	90 81       	ld	r25, Z
    16c2:	88 89       	ldd	r24, Y+16	; 0x10
    16c4:	89 23       	and	r24, r25
    16c6:	88 23       	and	r24, r24
    16c8:	09 f4       	brne	.+2      	; 0x16cc <Galug_game+0x4ae>
    16ca:	7b c0       	rjmp	.+246    	; 0x17c2 <Galug_game+0x5a4>
				{	
					struct enemy *r = tmp->next;
    16cc:	ea 89       	ldd	r30, Y+18	; 0x12
    16ce:	fb 89       	ldd	r31, Y+19	; 0x13
    16d0:	84 81       	ldd	r24, Z+4	; 0x04
    16d2:	95 81       	ldd	r25, Z+5	; 0x05
    16d4:	9c 83       	std	Y+4, r25	; 0x04
    16d6:	8b 83       	std	Y+3, r24	; 0x03
					disp[tmp_x][0] &= ~tmp_y;
    16d8:	89 89       	ldd	r24, Y+17	; 0x11
    16da:	48 2f       	mov	r20, r24
    16dc:	50 e0       	ldi	r21, 0x00	; 0
    16de:	89 89       	ldd	r24, Y+17	; 0x11
    16e0:	88 2f       	mov	r24, r24
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	88 0f       	add	r24, r24
    16e6:	99 1f       	adc	r25, r25
    16e8:	fc 01       	movw	r30, r24
    16ea:	e0 5e       	subi	r30, 0xE0	; 224
    16ec:	fe 4f       	sbci	r31, 0xFE	; 254
    16ee:	80 81       	ld	r24, Z
    16f0:	98 2f       	mov	r25, r24
    16f2:	88 89       	ldd	r24, Y+16	; 0x10
    16f4:	80 95       	com	r24
    16f6:	89 23       	and	r24, r25
    16f8:	28 2f       	mov	r18, r24
    16fa:	ca 01       	movw	r24, r20
    16fc:	88 0f       	add	r24, r24
    16fe:	99 1f       	adc	r25, r25
    1700:	fc 01       	movw	r30, r24
    1702:	e0 5e       	subi	r30, 0xE0	; 224
    1704:	fe 4f       	sbci	r31, 0xFE	; 254
    1706:	20 83       	st	Z, r18
					if(tmp_x != 10)
    1708:	89 89       	ldd	r24, Y+17	; 0x11
    170a:	8a 30       	cpi	r24, 0x0A	; 10
    170c:	e9 f0       	breq	.+58     	; 0x1748 <Galug_game+0x52a>
					{	
						disp[tmp_x][1] &= ~tmp_y;
    170e:	89 89       	ldd	r24, Y+17	; 0x11
    1710:	48 2f       	mov	r20, r24
    1712:	50 e0       	ldi	r21, 0x00	; 0
    1714:	89 89       	ldd	r24, Y+17	; 0x11
    1716:	88 2f       	mov	r24, r24
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	88 0f       	add	r24, r24
    171c:	99 1f       	adc	r25, r25
    171e:	fc 01       	movw	r30, r24
    1720:	ef 5d       	subi	r30, 0xDF	; 223
    1722:	fe 4f       	sbci	r31, 0xFE	; 254
    1724:	80 81       	ld	r24, Z
    1726:	98 2f       	mov	r25, r24
    1728:	88 89       	ldd	r24, Y+16	; 0x10
    172a:	80 95       	com	r24
    172c:	89 23       	and	r24, r25
    172e:	28 2f       	mov	r18, r24
    1730:	ca 01       	movw	r24, r20
    1732:	88 0f       	add	r24, r24
    1734:	99 1f       	adc	r25, r25
    1736:	fc 01       	movw	r30, r24
    1738:	ef 5d       	subi	r30, 0xDF	; 223
    173a:	fe 4f       	sbci	r31, 0xFE	; 254
    173c:	20 83       	st	Z, r18
						score += 5;
    173e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1740:	9d 85       	ldd	r25, Y+13	; 0x0d
    1742:	05 96       	adiw	r24, 0x05	; 5
    1744:	9d 87       	std	Y+13, r25	; 0x0d
    1746:	8c 87       	std	Y+12, r24	; 0x0c
					}
					if(tmp == LL)
    1748:	2a 89       	ldd	r18, Y+18	; 0x12
    174a:	3b 89       	ldd	r19, Y+19	; 0x13
    174c:	8c 89       	ldd	r24, Y+20	; 0x14
    174e:	9d 89       	ldd	r25, Y+21	; 0x15
    1750:	28 17       	cp	r18, r24
    1752:	39 07       	cpc	r19, r25
    1754:	39 f4       	brne	.+14     	; 0x1764 <Galug_game+0x546>
						LL = LL->next;
    1756:	ec 89       	ldd	r30, Y+20	; 0x14
    1758:	fd 89       	ldd	r31, Y+21	; 0x15
    175a:	84 81       	ldd	r24, Z+4	; 0x04
    175c:	95 81       	ldd	r25, Z+5	; 0x05
    175e:	9d 8b       	std	Y+21, r25	; 0x15
    1760:	8c 8b       	std	Y+20, r24	; 0x14
    1762:	1c c0       	rjmp	.+56     	; 0x179c <Galug_game+0x57e>
					else
					{
						struct enemy *p = LL;
    1764:	8c 89       	ldd	r24, Y+20	; 0x14
    1766:	9d 89       	ldd	r25, Y+21	; 0x15
    1768:	9a 83       	std	Y+2, r25	; 0x02
    176a:	89 83       	std	Y+1, r24	; 0x01
    176c:	06 c0       	rjmp	.+12     	; 0x177a <Galug_game+0x55c>
						while(p->next != tmp)
							p = p->next;
    176e:	e9 81       	ldd	r30, Y+1	; 0x01
    1770:	fa 81       	ldd	r31, Y+2	; 0x02
    1772:	84 81       	ldd	r24, Z+4	; 0x04
    1774:	95 81       	ldd	r25, Z+5	; 0x05
    1776:	9a 83       	std	Y+2, r25	; 0x02
    1778:	89 83       	std	Y+1, r24	; 0x01
					if(tmp == LL)
						LL = LL->next;
					else
					{
						struct enemy *p = LL;
						while(p->next != tmp)
    177a:	e9 81       	ldd	r30, Y+1	; 0x01
    177c:	fa 81       	ldd	r31, Y+2	; 0x02
    177e:	24 81       	ldd	r18, Z+4	; 0x04
    1780:	35 81       	ldd	r19, Z+5	; 0x05
    1782:	8a 89       	ldd	r24, Y+18	; 0x12
    1784:	9b 89       	ldd	r25, Y+19	; 0x13
    1786:	28 17       	cp	r18, r24
    1788:	39 07       	cpc	r19, r25
    178a:	89 f7       	brne	.-30     	; 0x176e <Galug_game+0x550>
							p = p->next;
						p->next = tmp->next;
    178c:	ea 89       	ldd	r30, Y+18	; 0x12
    178e:	fb 89       	ldd	r31, Y+19	; 0x13
    1790:	84 81       	ldd	r24, Z+4	; 0x04
    1792:	95 81       	ldd	r25, Z+5	; 0x05
    1794:	e9 81       	ldd	r30, Y+1	; 0x01
    1796:	fa 81       	ldd	r31, Y+2	; 0x02
    1798:	95 83       	std	Z+5, r25	; 0x05
    179a:	84 83       	std	Z+4, r24	; 0x04
					}
					tmp->next = top;
    179c:	80 91 97 00 	lds	r24, 0x0097
    17a0:	90 91 98 00 	lds	r25, 0x0098
    17a4:	ea 89       	ldd	r30, Y+18	; 0x12
    17a6:	fb 89       	ldd	r31, Y+19	; 0x13
    17a8:	95 83       	std	Z+5, r25	; 0x05
    17aa:	84 83       	std	Z+4, r24	; 0x04
					top = tmp;
    17ac:	8a 89       	ldd	r24, Y+18	; 0x12
    17ae:	9b 89       	ldd	r25, Y+19	; 0x13
    17b0:	90 93 98 00 	sts	0x0098, r25
    17b4:	80 93 97 00 	sts	0x0097, r24
					tmp = r;
    17b8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ba:	9c 81       	ldd	r25, Y+4	; 0x04
    17bc:	9b 8b       	std	Y+19, r25	; 0x13
    17be:	8a 8b       	std	Y+18, r24	; 0x12
    17c0:	06 c0       	rjmp	.+12     	; 0x17ce <Galug_game+0x5b0>
				}
				else
					tmp = tmp->next;
    17c2:	ea 89       	ldd	r30, Y+18	; 0x12
    17c4:	fb 89       	ldd	r31, Y+19	; 0x13
    17c6:	84 81       	ldd	r24, Z+4	; 0x04
    17c8:	95 81       	ldd	r25, Z+5	; 0x05
    17ca:	9b 8b       	std	Y+19, r25	; 0x13
    17cc:	8a 8b       	std	Y+18, r24	; 0x12
				bullet_flag = 0;
				if(bullet_num < 0)
					bullet_num++;		
			}
			tmp = LL;
			while(tmp)
    17ce:	8a 89       	ldd	r24, Y+18	; 0x12
    17d0:	9b 89       	ldd	r25, Y+19	; 0x13
    17d2:	00 97       	sbiw	r24, 0x00	; 0
    17d4:	09 f0       	breq	.+2      	; 0x17d8 <Galug_game+0x5ba>
    17d6:	56 cf       	rjmp	.-340    	; 0x1684 <Galug_game+0x466>
					tmp = r;
				}
				else
					tmp = tmp->next;
			}
			if(disp[8][0])
    17d8:	80 91 30 01 	lds	r24, 0x0130
    17dc:	88 23       	and	r24, r24
    17de:	29 f4       	brne	.+10     	; 0x17ea <Galug_game+0x5cc>
				break;

			check = 0;
    17e0:	10 92 5e 01 	sts	0x015E, r1
    17e4:	10 92 5d 01 	sts	0x015D, r1
    17e8:	5c cd       	rjmp	.-1352   	; 0x12a2 <Galug_game+0x84>
		}
	}
	if(score > 999)
    17ea:	8c 85       	ldd	r24, Y+12	; 0x0c
    17ec:	9d 85       	ldd	r25, Y+13	; 0x0d
    17ee:	23 e0       	ldi	r18, 0x03	; 3
    17f0:	88 3e       	cpi	r24, 0xE8	; 232
    17f2:	92 07       	cpc	r25, r18
    17f4:	20 f0       	brcs	.+8      	; 0x17fe <Galug_game+0x5e0>
		score = 999;
    17f6:	87 ee       	ldi	r24, 0xE7	; 231
    17f8:	93 e0       	ldi	r25, 0x03	; 3
    17fa:	9d 87       	std	Y+13, r25	; 0x0d
    17fc:	8c 87       	std	Y+12, r24	; 0x0c
	return score;
    17fe:	8c 85       	ldd	r24, Y+12	; 0x0c
    1800:	9d 85       	ldd	r25, Y+13	; 0x0d
}
    1802:	67 96       	adiw	r28, 0x17	; 23
    1804:	0f b6       	in	r0, 0x3f	; 63
    1806:	f8 94       	cli
    1808:	de bf       	out	0x3e, r29	; 62
    180a:	0f be       	out	0x3f, r0	; 63
    180c:	cd bf       	out	0x3d, r28	; 61
    180e:	cf 91       	pop	r28
    1810:	df 91       	pop	r29
    1812:	08 95       	ret

00001814 <Dodge_game>:
extern unsigned int Round_check;

volatile unsigned char wall;

unsigned int Dodge_game(int seed)
{
    1814:	2f 92       	push	r2
    1816:	3f 92       	push	r3
    1818:	4f 92       	push	r4
    181a:	5f 92       	push	r5
    181c:	6f 92       	push	r6
    181e:	7f 92       	push	r7
    1820:	8f 92       	push	r8
    1822:	9f 92       	push	r9
    1824:	af 92       	push	r10
    1826:	bf 92       	push	r11
    1828:	cf 92       	push	r12
    182a:	df 92       	push	r13
    182c:	ef 92       	push	r14
    182e:	ff 92       	push	r15
    1830:	0f 93       	push	r16
    1832:	1f 93       	push	r17
    1834:	df 93       	push	r29
    1836:	cf 93       	push	r28
    1838:	cd b7       	in	r28, 0x3d	; 61
    183a:	de b7       	in	r29, 0x3e	; 62
    183c:	ca 5c       	subi	r28, 0xCA	; 202
    183e:	d0 40       	sbci	r29, 0x00	; 0
    1840:	0f b6       	in	r0, 0x3f	; 63
    1842:	f8 94       	cli
    1844:	de bf       	out	0x3e, r29	; 62
    1846:	0f be       	out	0x3f, r0	; 63
    1848:	cd bf       	out	0x3d, r28	; 61
	unsigned char enemy_y;
	struct dodge_enemy enemy[50];
	unsigned char enemy_del[50];
	signed int i;
	
	srand(seed);
    184a:	0e 94 a6 12 	call	0x254c	; 0x254c <srand>

	player_x = 16;
    184e:	80 e1       	ldi	r24, 0x10	; 16
    1850:	80 93 60 01 	sts	0x0160, r24
	player_y = 0x08;
    1854:	88 e0       	ldi	r24, 0x08	; 8
    1856:	80 93 5a 01 	sts	0x015A, r24
	disp[player_x][1] = player_y;
    185a:	80 93 41 01 	sts	0x0141, r24
	
	game_flag = 1;
    185e:	81 e0       	ldi	r24, 0x01	; 1
    1860:	80 93 59 01 	sts	0x0159, r24
	Round_check = 0;
    1864:	10 92 5c 01 	sts	0x015C, r1
    1868:	10 92 5b 01 	sts	0x015B, r1
    186c:	ce 01       	movw	r24, r28
    186e:	89 56       	subi	r24, 0x69	; 105
    1870:	9f 4f       	sbci	r25, 0xFF	; 255
    1872:	fc 01       	movw	r30, r24
	for(i = 0; i< 50; i++)
    1874:	9e 01       	movw	r18, r28
    1876:	27 53       	subi	r18, 0x37	; 55
    1878:	3f 4f       	sbci	r19, 0xFF	; 255
		enemy_del[i] = 0;
    187a:	11 92       	st	Z+, r1
	player_y = 0x08;
	disp[player_x][1] = player_y;
	
	game_flag = 1;
	Round_check = 0;
	for(i = 0; i< 50; i++)
    187c:	e2 17       	cp	r30, r18
    187e:	f3 07       	cpc	r31, r19
    1880:	e1 f7       	brne	.-8      	; 0x187a <Dodge_game+0x66>
		enemy_del[i] = 0;
	check = 0;
    1882:	10 92 5e 01 	sts	0x015E, r1
    1886:	10 92 5d 01 	sts	0x015D, r1
	wall = 0;
    188a:	10 92 08 03 	sts	0x0308, r1
    188e:	bb 24       	eor	r11, r11
		}
		if(check >= 0)
		{
			for(i = 0; i < enemy_num; i++)
			{
				if(enemy[i].x == player_x && enemy[i].y == player_y)
    1890:	6e 01       	movw	r12, r28
    1892:	08 94       	sec
    1894:	c1 1c       	adc	r12, r1
    1896:	d1 1c       	adc	r13, r1
    1898:	88 24       	eor	r8, r8
    189a:	99 24       	eor	r9, r9
					enemy_del[i] = 0;
				}
				else
					enemy_del[i]++;
			}
			clear_up(wall,0,16 - 2 * wall);
    189c:	66 24       	eor	r6, r6
    189e:	77 24       	eor	r7, r7
    18a0:	68 94       	set
    18a2:	63 f8       	bld	r6, 3
			for(i = 0; i < enemy_num;i++)
				disp[enemy[i].x][0] |= enemy[i].y;
			if(skill_flag)
				disp[player_x][0] |= player_y;
    18a4:	0f 2e       	mov	r0, r31
    18a6:	f0 e2       	ldi	r31, 0x20	; 32
    18a8:	ef 2e       	mov	r14, r31
    18aa:	f1 e0       	ldi	r31, 0x01	; 1
    18ac:	ff 2e       	mov	r15, r31
    18ae:	f0 2d       	mov	r31, r0
					enemy_y = enemy[i].y;
					if(enemy_x < player_x)
						enemy[i].x++;
					else if(enemy_x > player_x)
						enemy[i].x--;
					if(enemy_y < player_y)
    18b0:	c7 53       	subi	r28, 0x37	; 55
    18b2:	df 4f       	sbci	r29, 0xFF	; 255
    18b4:	88 83       	st	Y, r24
    18b6:	c9 5c       	subi	r28, 0xC9	; 201
    18b8:	d0 40       	sbci	r29, 0x00	; 0
    18ba:	c6 53       	subi	r28, 0x36	; 54
    18bc:	df 4f       	sbci	r29, 0xFF	; 255
    18be:	98 83       	st	Y, r25
    18c0:	ca 5c       	subi	r28, 0xCA	; 202
    18c2:	d0 40       	sbci	r29, 0x00	; 0
					player_x--;
					disp[player_x][1] |= player_y;
				}
				skill_flag = 1;
			}
			for(i = 0; i< enemy_num;i++)
    18c4:	0f 2e       	mov	r0, r31
    18c6:	f3 e0       	ldi	r31, 0x03	; 3
    18c8:	3f 2e       	mov	r3, r31
    18ca:	f0 2d       	mov	r31, r0
					enemy[enemy_num].y = 0x01;
				enemy_num++;
			}
			if((Round_check % 800) == 0)
			{
				disp[8 + wall][0] = 0xFF;
    18cc:	aa 24       	eor	r10, r10
    18ce:	aa 94       	dec	r10
				disp[8 + wall][1] = 0xFF;
				disp[23 - wall][0] = 0xFF;
    18d0:	0f 2e       	mov	r0, r31
    18d2:	f7 e1       	ldi	r31, 0x17	; 23
    18d4:	4f 2e       	mov	r4, r31
    18d6:	55 24       	eor	r5, r5
    18d8:	f0 2d       	mov	r31, r0
				else if(player_x > 23 - wall)
				{
					player_x--;
					disp[player_x][1] |= player_y;
				}
				skill_flag = 1;
    18da:	22 24       	eor	r2, r2
    18dc:	23 94       	inc	r2
    18de:	63 c1       	rjmp	.+710    	; 0x1ba6 <Dodge_game+0x392>
	check = 0;
	wall = 0;

	while(game_flag)
	{
		if(check >= 4)
    18e0:	80 91 5d 01 	lds	r24, 0x015D
    18e4:	90 91 5e 01 	lds	r25, 0x015E
    18e8:	84 30       	cpi	r24, 0x04	; 4
    18ea:	91 05       	cpc	r25, r1
    18ec:	0c f4       	brge	.+2      	; 0x18f0 <Dodge_game+0xdc>
    18ee:	43 c1       	rjmp	.+646    	; 0x1b76 <Dodge_game+0x362>
		{ 
			if((Round_check % 172) == 0)
    18f0:	80 91 5b 01 	lds	r24, 0x015B
    18f4:	90 91 5c 01 	lds	r25, 0x015C
    18f8:	6c ea       	ldi	r22, 0xAC	; 172
    18fa:	70 e0       	ldi	r23, 0x00	; 0
    18fc:	0e 94 29 12 	call	0x2452	; 0x2452 <__udivmodhi4>
    1900:	89 2b       	or	r24, r25
    1902:	09 f0       	breq	.+2      	; 0x1906 <Dodge_game+0xf2>
    1904:	40 c0       	rjmp	.+128    	; 0x1986 <Dodge_game+0x172>
			{
				int tmp = rand();
    1906:	0e 94 a1 12 	call	0x2542	; 0x2542 <rand>
    190a:	38 2f       	mov	r19, r24
    190c:	49 2f       	mov	r20, r25
				enemy[enemy_num].rate = 10 - (Round_check / 1000);
    190e:	0b 2d       	mov	r16, r11
    1910:	10 e0       	ldi	r17, 0x00	; 0
    1912:	c8 01       	movw	r24, r16
    1914:	88 0f       	add	r24, r24
    1916:	99 1f       	adc	r25, r25
    1918:	80 0f       	add	r24, r16
    191a:	91 1f       	adc	r25, r17
    191c:	f6 01       	movw	r30, r12
    191e:	e8 0f       	add	r30, r24
    1920:	f9 1f       	adc	r31, r25
    1922:	80 91 5b 01 	lds	r24, 0x015B
    1926:	90 91 5c 01 	lds	r25, 0x015C
    192a:	68 ee       	ldi	r22, 0xE8	; 232
    192c:	73 e0       	ldi	r23, 0x03	; 3
    192e:	0e 94 29 12 	call	0x2452	; 0x2452 <__udivmodhi4>
    1932:	8a e0       	ldi	r24, 0x0A	; 10
    1934:	86 1b       	sub	r24, r22
    1936:	82 83       	std	Z+2, r24	; 0x02
				enemy[enemy_num].x = (tmp % (16 - (2 * wall))) + 8 + wall;
    1938:	80 91 08 03 	lds	r24, 0x0308
    193c:	20 91 08 03 	lds	r18, 0x0308
    1940:	28 5f       	subi	r18, 0xF8	; 248
    1942:	b3 01       	movw	r22, r6
    1944:	68 1b       	sub	r22, r24
    1946:	71 09       	sbc	r23, r1
    1948:	66 0f       	add	r22, r22
    194a:	77 1f       	adc	r23, r23
    194c:	83 2f       	mov	r24, r19
    194e:	94 2f       	mov	r25, r20
    1950:	0e 94 3d 12 	call	0x247a	; 0x247a <__divmodhi4>
    1954:	28 0f       	add	r18, r24
    1956:	20 83       	st	Z, r18
				if(tmp & 1)
    1958:	30 ff       	sbrs	r19, 0
    195a:	0b c0       	rjmp	.+22     	; 0x1972 <Dodge_game+0x15e>
					enemy[enemy_num].y = 0x80;
    195c:	c8 01       	movw	r24, r16
    195e:	88 0f       	add	r24, r24
    1960:	99 1f       	adc	r25, r25
    1962:	80 0f       	add	r24, r16
    1964:	91 1f       	adc	r25, r17
    1966:	f6 01       	movw	r30, r12
    1968:	e8 0f       	add	r30, r24
    196a:	f9 1f       	adc	r31, r25
    196c:	20 e8       	ldi	r18, 0x80	; 128
    196e:	21 83       	std	Z+1, r18	; 0x01
    1970:	09 c0       	rjmp	.+18     	; 0x1984 <Dodge_game+0x170>
				else
					enemy[enemy_num].y = 0x01;
    1972:	c8 01       	movw	r24, r16
    1974:	88 0f       	add	r24, r24
    1976:	99 1f       	adc	r25, r25
    1978:	80 0f       	add	r24, r16
    197a:	91 1f       	adc	r25, r17
    197c:	f6 01       	movw	r30, r12
    197e:	e8 0f       	add	r30, r24
    1980:	f9 1f       	adc	r31, r25
    1982:	21 82       	std	Z+1, r2	; 0x01
				enemy_num++;
    1984:	b3 94       	inc	r11
			}
			if((Round_check % 800) == 0)
    1986:	80 91 5b 01 	lds	r24, 0x015B
    198a:	90 91 5c 01 	lds	r25, 0x015C
    198e:	60 e2       	ldi	r22, 0x20	; 32
    1990:	73 e0       	ldi	r23, 0x03	; 3
    1992:	0e 94 29 12 	call	0x2452	; 0x2452 <__udivmodhi4>
    1996:	89 2b       	or	r24, r25
    1998:	09 f0       	breq	.+2      	; 0x199c <Dodge_game+0x188>
    199a:	67 c0       	rjmp	.+206    	; 0x1a6a <Dodge_game+0x256>
			{
				disp[8 + wall][0] = 0xFF;
    199c:	80 91 08 03 	lds	r24, 0x0308
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	08 96       	adiw	r24, 0x08	; 8
    19a4:	88 0f       	add	r24, r24
    19a6:	99 1f       	adc	r25, r25
    19a8:	f7 01       	movw	r30, r14
    19aa:	e8 0f       	add	r30, r24
    19ac:	f9 1f       	adc	r31, r25
    19ae:	a0 82       	st	Z, r10
				disp[8 + wall][1] = 0xFF;
    19b0:	80 91 08 03 	lds	r24, 0x0308
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	08 96       	adiw	r24, 0x08	; 8
    19b8:	88 0f       	add	r24, r24
    19ba:	99 1f       	adc	r25, r25
    19bc:	f7 01       	movw	r30, r14
    19be:	e8 0f       	add	r30, r24
    19c0:	f9 1f       	adc	r31, r25
    19c2:	a1 82       	std	Z+1, r10	; 0x01
				disp[23 - wall][0] = 0xFF;
    19c4:	80 91 08 03 	lds	r24, 0x0308
    19c8:	b2 01       	movw	r22, r4
    19ca:	68 1b       	sub	r22, r24
    19cc:	71 09       	sbc	r23, r1
    19ce:	cb 01       	movw	r24, r22
    19d0:	88 0f       	add	r24, r24
    19d2:	99 1f       	adc	r25, r25
    19d4:	f7 01       	movw	r30, r14
    19d6:	e8 0f       	add	r30, r24
    19d8:	f9 1f       	adc	r31, r25
    19da:	a0 82       	st	Z, r10
				disp[23 - wall][1] = 0xFF;
    19dc:	80 91 08 03 	lds	r24, 0x0308
    19e0:	d2 01       	movw	r26, r4
    19e2:	a8 1b       	sub	r26, r24
    19e4:	b1 09       	sbc	r27, r1
    19e6:	cd 01       	movw	r24, r26
    19e8:	88 0f       	add	r24, r24
    19ea:	99 1f       	adc	r25, r25
    19ec:	f7 01       	movw	r30, r14
    19ee:	e8 0f       	add	r30, r24
    19f0:	f9 1f       	adc	r31, r25
    19f2:	a1 82       	std	Z+1, r10	; 0x01
				wall++;
    19f4:	80 91 08 03 	lds	r24, 0x0308
    19f8:	8f 5f       	subi	r24, 0xFF	; 255
    19fa:	80 93 08 03 	sts	0x0308, r24
				if(player_x < 8 + wall)
    19fe:	40 91 60 01 	lds	r20, 0x0160
    1a02:	24 2f       	mov	r18, r20
    1a04:	30 e0       	ldi	r19, 0x00	; 0
    1a06:	80 91 08 03 	lds	r24, 0x0308
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	08 96       	adiw	r24, 0x08	; 8
    1a0e:	28 17       	cp	r18, r24
    1a10:	39 07       	cpc	r19, r25
    1a12:	8c f4       	brge	.+34     	; 0x1a36 <Dodge_game+0x222>
				{
					player_x++;
    1a14:	84 2f       	mov	r24, r20
    1a16:	8f 5f       	subi	r24, 0xFF	; 255
    1a18:	80 93 60 01 	sts	0x0160, r24
					disp[player_x][1] |= player_y;
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	88 0f       	add	r24, r24
    1a20:	99 1f       	adc	r25, r25
    1a22:	f7 01       	movw	r30, r14
    1a24:	e8 0f       	add	r30, r24
    1a26:	f9 1f       	adc	r31, r25
    1a28:	31 96       	adiw	r30, 0x01	; 1
    1a2a:	80 91 5a 01 	lds	r24, 0x015A
    1a2e:	90 81       	ld	r25, Z
    1a30:	89 2b       	or	r24, r25
    1a32:	80 83       	st	Z, r24
    1a34:	18 c0       	rjmp	.+48     	; 0x1a66 <Dodge_game+0x252>
				}
				else if(player_x > 23 - wall)
    1a36:	80 91 08 03 	lds	r24, 0x0308
    1a3a:	b2 01       	movw	r22, r4
    1a3c:	68 1b       	sub	r22, r24
    1a3e:	71 09       	sbc	r23, r1
    1a40:	62 17       	cp	r22, r18
    1a42:	73 07       	cpc	r23, r19
    1a44:	84 f4       	brge	.+32     	; 0x1a66 <Dodge_game+0x252>
				{
					player_x--;
    1a46:	84 2f       	mov	r24, r20
    1a48:	81 50       	subi	r24, 0x01	; 1
    1a4a:	80 93 60 01 	sts	0x0160, r24
					disp[player_x][1] |= player_y;
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	88 0f       	add	r24, r24
    1a52:	99 1f       	adc	r25, r25
    1a54:	f7 01       	movw	r30, r14
    1a56:	e8 0f       	add	r30, r24
    1a58:	f9 1f       	adc	r31, r25
    1a5a:	31 96       	adiw	r30, 0x01	; 1
    1a5c:	80 91 5a 01 	lds	r24, 0x015A
    1a60:	90 81       	ld	r25, Z
    1a62:	89 2b       	or	r24, r25
    1a64:	80 83       	st	Z, r24
				}
				skill_flag = 1;
    1a66:	20 92 5f 01 	sts	0x015F, r2
			}
			for(i = 0; i< enemy_num;i++)
    1a6a:	bb 20       	and	r11, r11
    1a6c:	09 f4       	brne	.+2      	; 0x1a70 <Dodge_game+0x25c>
    1a6e:	d1 c0       	rjmp	.+418    	; 0x1c12 <Dodge_game+0x3fe>
			{
				if(enemy[i].rate <= enemy_del[i])
				{
					enemy_x = enemy[i].x;
					enemy_y = enemy[i].y;
					if(enemy_x < player_x)
    1a70:	50 91 60 01 	lds	r21, 0x0160
						enemy[i].x++;
					else if(enemy_x > player_x)
						enemy[i].x--;
					if(enemy_y < player_y)
    1a74:	40 91 5a 01 	lds	r20, 0x015A
    1a78:	86 01       	movw	r16, r12
    1a7a:	c7 53       	subi	r28, 0x37	; 55
    1a7c:	df 4f       	sbci	r29, 0xFF	; 255
    1a7e:	88 81       	ld	r24, Y
    1a80:	c9 5c       	subi	r28, 0xC9	; 201
    1a82:	d0 40       	sbci	r29, 0x00	; 0
    1a84:	c6 53       	subi	r28, 0x36	; 54
    1a86:	df 4f       	sbci	r29, 0xFF	; 255
    1a88:	98 81       	ld	r25, Y
    1a8a:	ca 5c       	subi	r28, 0xCA	; 202
    1a8c:	d0 40       	sbci	r29, 0x00	; 0
    1a8e:	fc 01       	movw	r30, r24
					player_x--;
					disp[player_x][1] |= player_y;
				}
				skill_flag = 1;
			}
			for(i = 0; i< enemy_num;i++)
    1a90:	b3 9c       	mul	r11, r3
    1a92:	c0 01       	movw	r24, r0
    1a94:	11 24       	eor	r1, r1
    1a96:	96 01       	movw	r18, r12
    1a98:	28 0f       	add	r18, r24
    1a9a:	39 1f       	adc	r19, r25
			{
				if(enemy[i].rate <= enemy_del[i])
    1a9c:	90 81       	ld	r25, Z
    1a9e:	d8 01       	movw	r26, r16
    1aa0:	12 96       	adiw	r26, 0x02	; 2
    1aa2:	8c 91       	ld	r24, X
    1aa4:	12 97       	sbiw	r26, 0x02	; 2
    1aa6:	98 17       	cp	r25, r24
    1aa8:	18 f1       	brcs	.+70     	; 0x1af0 <Dodge_game+0x2dc>
				{
					enemy_x = enemy[i].x;
    1aaa:	8c 91       	ld	r24, X
					enemy_y = enemy[i].y;
    1aac:	11 96       	adiw	r26, 0x01	; 1
    1aae:	9c 91       	ld	r25, X
    1ab0:	11 97       	sbiw	r26, 0x01	; 1
					if(enemy_x < player_x)
    1ab2:	85 17       	cp	r24, r21
    1ab4:	18 f4       	brcc	.+6      	; 0x1abc <Dodge_game+0x2a8>
						enemy[i].x++;
    1ab6:	8f 5f       	subi	r24, 0xFF	; 255
    1ab8:	8c 93       	st	X, r24
    1aba:	05 c0       	rjmp	.+10     	; 0x1ac6 <Dodge_game+0x2b2>
					else if(enemy_x > player_x)
    1abc:	58 17       	cp	r21, r24
    1abe:	18 f4       	brcc	.+6      	; 0x1ac6 <Dodge_game+0x2b2>
						enemy[i].x--;
    1ac0:	81 50       	subi	r24, 0x01	; 1
    1ac2:	d8 01       	movw	r26, r16
    1ac4:	8c 93       	st	X, r24
					if(enemy_y < player_y)
    1ac6:	94 17       	cp	r25, r20
    1ac8:	40 f4       	brcc	.+16     	; 0x1ada <Dodge_game+0x2c6>
						enemy[i].y <<= 1;
    1aca:	d8 01       	movw	r26, r16
    1acc:	11 96       	adiw	r26, 0x01	; 1
    1ace:	8c 91       	ld	r24, X
    1ad0:	11 97       	sbiw	r26, 0x01	; 1
    1ad2:	88 0f       	add	r24, r24
    1ad4:	11 96       	adiw	r26, 0x01	; 1
    1ad6:	8c 93       	st	X, r24
    1ad8:	09 c0       	rjmp	.+18     	; 0x1aec <Dodge_game+0x2d8>
					else if(enemy_y > player_y)
    1ada:	49 17       	cp	r20, r25
    1adc:	38 f4       	brcc	.+14     	; 0x1aec <Dodge_game+0x2d8>
						enemy[i].y >>= 1;
    1ade:	d8 01       	movw	r26, r16
    1ae0:	11 96       	adiw	r26, 0x01	; 1
    1ae2:	8c 91       	ld	r24, X
    1ae4:	11 97       	sbiw	r26, 0x01	; 1
    1ae6:	86 95       	lsr	r24
    1ae8:	11 96       	adiw	r26, 0x01	; 1
    1aea:	8c 93       	st	X, r24
					enemy_del[i] = 0;
    1aec:	10 82       	st	Z, r1
    1aee:	03 c0       	rjmp	.+6      	; 0x1af6 <Dodge_game+0x2e2>
				}
				else
					enemy_del[i]++;
    1af0:	89 2f       	mov	r24, r25
    1af2:	8f 5f       	subi	r24, 0xFF	; 255
    1af4:	80 83       	st	Z, r24
    1af6:	0d 5f       	subi	r16, 0xFD	; 253
    1af8:	1f 4f       	sbci	r17, 0xFF	; 255
    1afa:	31 96       	adiw	r30, 0x01	; 1
					player_x--;
					disp[player_x][1] |= player_y;
				}
				skill_flag = 1;
			}
			for(i = 0; i< enemy_num;i++)
    1afc:	02 17       	cp	r16, r18
    1afe:	13 07       	cpc	r17, r19
    1b00:	69 f6       	brne	.-102    	; 0x1a9c <Dodge_game+0x288>
					enemy_del[i] = 0;
				}
				else
					enemy_del[i]++;
			}
			clear_up(wall,0,16 - 2 * wall);
    1b02:	80 91 08 03 	lds	r24, 0x0308
    1b06:	90 91 08 03 	lds	r25, 0x0308
    1b0a:	a3 01       	movw	r20, r6
    1b0c:	49 1b       	sub	r20, r25
    1b0e:	51 09       	sbc	r21, r1
    1b10:	44 0f       	add	r20, r20
    1b12:	55 1f       	adc	r21, r21
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	b4 01       	movw	r22, r8
    1b18:	0e 94 a7 04 	call	0x94e	; 0x94e <clear_up>
    1b1c:	d6 01       	movw	r26, r12
			for(i = 0; i < enemy_num;i++)
				disp[enemy[i].x][0] |= enemy[i].y;
    1b1e:	8c 91       	ld	r24, X
    1b20:	90 e0       	ldi	r25, 0x00	; 0
    1b22:	88 0f       	add	r24, r24
    1b24:	99 1f       	adc	r25, r25
    1b26:	f7 01       	movw	r30, r14
    1b28:	e8 0f       	add	r30, r24
    1b2a:	f9 1f       	adc	r31, r25
    1b2c:	11 96       	adiw	r26, 0x01	; 1
    1b2e:	8c 91       	ld	r24, X
    1b30:	11 97       	sbiw	r26, 0x01	; 1
    1b32:	90 81       	ld	r25, Z
    1b34:	89 2b       	or	r24, r25
    1b36:	80 83       	st	Z, r24
    1b38:	13 96       	adiw	r26, 0x03	; 3
				}
				else
					enemy_del[i]++;
			}
			clear_up(wall,0,16 - 2 * wall);
			for(i = 0; i < enemy_num;i++)
    1b3a:	a0 17       	cp	r26, r16
    1b3c:	b1 07       	cpc	r27, r17
    1b3e:	79 f7       	brne	.-34     	; 0x1b1e <Dodge_game+0x30a>
				disp[enemy[i].x][0] |= enemy[i].y;
			if(skill_flag)
    1b40:	80 91 5f 01 	lds	r24, 0x015F
    1b44:	88 23       	and	r24, r24
    1b46:	69 f0       	breq	.+26     	; 0x1b62 <Dodge_game+0x34e>
				disp[player_x][0] |= player_y;
    1b48:	80 91 60 01 	lds	r24, 0x0160
    1b4c:	90 e0       	ldi	r25, 0x00	; 0
    1b4e:	88 0f       	add	r24, r24
    1b50:	99 1f       	adc	r25, r25
    1b52:	f7 01       	movw	r30, r14
    1b54:	e8 0f       	add	r30, r24
    1b56:	f9 1f       	adc	r31, r25
    1b58:	80 91 5a 01 	lds	r24, 0x015A
    1b5c:	90 81       	ld	r25, Z
    1b5e:	89 2b       	or	r24, r25
    1b60:	80 83       	st	Z, r24
			check = 0;
    1b62:	90 92 5e 01 	sts	0x015E, r9
    1b66:	80 92 5d 01 	sts	0x015D, r8
		}
		if(check >= 0)
		{
			for(i = 0; i < enemy_num; i++)
    1b6a:	4b 2d       	mov	r20, r11
    1b6c:	50 e0       	ldi	r21, 0x00	; 0
    1b6e:	14 16       	cp	r1, r20
    1b70:	15 06       	cpc	r1, r21
    1b72:	24 f0       	brlt	.+8      	; 0x1b7c <Dodge_game+0x368>
    1b74:	18 c0       	rjmp	.+48     	; 0x1ba6 <Dodge_game+0x392>
				disp[enemy[i].x][0] |= enemy[i].y;
			if(skill_flag)
				disp[player_x][0] |= player_y;
			check = 0;
		}
		if(check >= 0)
    1b76:	99 23       	and	r25, r25
    1b78:	b4 f0       	brlt	.+44     	; 0x1ba6 <Dodge_game+0x392>
    1b7a:	f7 cf       	rjmp	.-18     	; 0x1b6a <Dodge_game+0x356>
		{
			for(i = 0; i < enemy_num; i++)
			{
				if(enemy[i].x == player_x && enemy[i].y == player_y)
    1b7c:	90 91 60 01 	lds	r25, 0x0160
    1b80:	60 91 5a 01 	lds	r22, 0x015A
    1b84:	f6 01       	movw	r30, r12
    1b86:	94 01       	movw	r18, r8
    1b88:	80 81       	ld	r24, Z
    1b8a:	89 17       	cp	r24, r25
    1b8c:	31 f4       	brne	.+12     	; 0x1b9a <Dodge_game+0x386>
    1b8e:	81 81       	ldd	r24, Z+1	; 0x01
    1b90:	86 17       	cp	r24, r22
    1b92:	19 f4       	brne	.+6      	; 0x1b9a <Dodge_game+0x386>
				{
					game_flag = 0;
    1b94:	10 92 59 01 	sts	0x0159, r1
    1b98:	06 c0       	rjmp	.+12     	; 0x1ba6 <Dodge_game+0x392>
				disp[player_x][0] |= player_y;
			check = 0;
		}
		if(check >= 0)
		{
			for(i = 0; i < enemy_num; i++)
    1b9a:	2f 5f       	subi	r18, 0xFF	; 255
    1b9c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b9e:	33 96       	adiw	r30, 0x03	; 3
    1ba0:	24 17       	cp	r18, r20
    1ba2:	35 07       	cpc	r19, r21
    1ba4:	8c f3       	brlt	.-30     	; 0x1b88 <Dodge_game+0x374>
	for(i = 0; i< 50; i++)
		enemy_del[i] = 0;
	check = 0;
	wall = 0;

	while(game_flag)
    1ba6:	80 91 59 01 	lds	r24, 0x0159
    1baa:	88 23       	and	r24, r24
    1bac:	09 f0       	breq	.+2      	; 0x1bb0 <Dodge_game+0x39c>
    1bae:	98 ce       	rjmp	.-720    	; 0x18e0 <Dodge_game+0xcc>
					break;
				}
			}
		}
	}
	if(Round_check > 9990)
    1bb0:	80 91 5b 01 	lds	r24, 0x015B
    1bb4:	90 91 5c 01 	lds	r25, 0x015C
    1bb8:	87 50       	subi	r24, 0x07	; 7
    1bba:	97 42       	sbci	r25, 0x27	; 39
    1bbc:	30 f0       	brcs	.+12     	; 0x1bca <Dodge_game+0x3b6>
		Round_check = 9990;
    1bbe:	86 e0       	ldi	r24, 0x06	; 6
    1bc0:	97 e2       	ldi	r25, 0x27	; 39
    1bc2:	90 93 5c 01 	sts	0x015C, r25
    1bc6:	80 93 5b 01 	sts	0x015B, r24
    1bca:	80 91 5b 01 	lds	r24, 0x015B
    1bce:	90 91 5c 01 	lds	r25, 0x015C
    1bd2:	6a e0       	ldi	r22, 0x0A	; 10
    1bd4:	70 e0       	ldi	r23, 0x00	; 0
    1bd6:	0e 94 29 12 	call	0x2452	; 0x2452 <__udivmodhi4>
    1bda:	86 2f       	mov	r24, r22
    1bdc:	97 2f       	mov	r25, r23
	return (Round_check / 10);
}
    1bde:	c6 53       	subi	r28, 0x36	; 54
    1be0:	df 4f       	sbci	r29, 0xFF	; 255
    1be2:	0f b6       	in	r0, 0x3f	; 63
    1be4:	f8 94       	cli
    1be6:	de bf       	out	0x3e, r29	; 62
    1be8:	0f be       	out	0x3f, r0	; 63
    1bea:	cd bf       	out	0x3d, r28	; 61
    1bec:	cf 91       	pop	r28
    1bee:	df 91       	pop	r29
    1bf0:	1f 91       	pop	r17
    1bf2:	0f 91       	pop	r16
    1bf4:	ff 90       	pop	r15
    1bf6:	ef 90       	pop	r14
    1bf8:	df 90       	pop	r13
    1bfa:	cf 90       	pop	r12
    1bfc:	bf 90       	pop	r11
    1bfe:	af 90       	pop	r10
    1c00:	9f 90       	pop	r9
    1c02:	8f 90       	pop	r8
    1c04:	7f 90       	pop	r7
    1c06:	6f 90       	pop	r6
    1c08:	5f 90       	pop	r5
    1c0a:	4f 90       	pop	r4
    1c0c:	3f 90       	pop	r3
    1c0e:	2f 90       	pop	r2
    1c10:	08 95       	ret
					enemy_del[i] = 0;
				}
				else
					enemy_del[i]++;
			}
			clear_up(wall,0,16 - 2 * wall);
    1c12:	80 91 08 03 	lds	r24, 0x0308
    1c16:	90 91 08 03 	lds	r25, 0x0308
    1c1a:	a3 01       	movw	r20, r6
    1c1c:	49 1b       	sub	r20, r25
    1c1e:	51 09       	sbc	r21, r1
    1c20:	44 0f       	add	r20, r20
    1c22:	55 1f       	adc	r21, r21
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	b4 01       	movw	r22, r8
    1c28:	0e 94 a7 04 	call	0x94e	; 0x94e <clear_up>
    1c2c:	89 cf       	rjmp	.-238    	; 0x1b40 <Dodge_game+0x32c>

00001c2e <is_record>:
volatile unsigned char change_flag;
volatile unsigned char alpha_flag[3];
volatile unsigned char score_alpha;

unsigned char is_record(unsigned int score, unsigned char mode)
{
    1c2e:	0f 93       	push	r16
    1c30:	1f 93       	push	r17
    1c32:	cf 93       	push	r28
    1c34:	df 93       	push	r29
    1c36:	8c 01       	movw	r16, r24
	if(score > eeprom_read_word((unsigned int*)(0 + (6 * (mode - 2)))))
    1c38:	86 e0       	ldi	r24, 0x06	; 6
    1c3a:	68 9f       	mul	r22, r24
    1c3c:	e0 01       	movw	r28, r0
    1c3e:	11 24       	eor	r1, r1
    1c40:	ce 01       	movw	r24, r28
    1c42:	0c 97       	sbiw	r24, 0x0c	; 12
    1c44:	0e 94 b9 12 	call	0x2572	; 0x2572 <__eerd_word_m16>
    1c48:	80 17       	cp	r24, r16
    1c4a:	91 07       	cpc	r25, r17
    1c4c:	10 f4       	brcc	.+4      	; 0x1c52 <is_record+0x24>
    1c4e:	81 e0       	ldi	r24, 0x01	; 1
    1c50:	13 c0       	rjmp	.+38     	; 0x1c78 <is_record+0x4a>
		return 1;
	else if(score > eeprom_read_word((unsigned int*)(2 + (6 * (mode - 2)))))
    1c52:	ce 01       	movw	r24, r28
    1c54:	0a 97       	sbiw	r24, 0x0a	; 10
    1c56:	0e 94 b9 12 	call	0x2572	; 0x2572 <__eerd_word_m16>
    1c5a:	80 17       	cp	r24, r16
    1c5c:	91 07       	cpc	r25, r17
    1c5e:	10 f4       	brcc	.+4      	; 0x1c64 <is_record+0x36>
    1c60:	82 e0       	ldi	r24, 0x02	; 2
    1c62:	0a c0       	rjmp	.+20     	; 0x1c78 <is_record+0x4a>
		return 2;
	else if(score > eeprom_read_word((unsigned int*)(4 + (6 * (mode - 2)))))
    1c64:	ce 01       	movw	r24, r28
    1c66:	08 97       	sbiw	r24, 0x08	; 8
    1c68:	0e 94 b9 12 	call	0x2572	; 0x2572 <__eerd_word_m16>
    1c6c:	80 17       	cp	r24, r16
    1c6e:	91 07       	cpc	r25, r17
    1c70:	10 f0       	brcs	.+4      	; 0x1c76 <is_record+0x48>
    1c72:	80 e0       	ldi	r24, 0x00	; 0
    1c74:	01 c0       	rjmp	.+2      	; 0x1c78 <is_record+0x4a>
    1c76:	83 e0       	ldi	r24, 0x03	; 3
		return 3;

	return 0;
}
    1c78:	df 91       	pop	r29
    1c7a:	cf 91       	pop	r28
    1c7c:	1f 91       	pop	r17
    1c7e:	0f 91       	pop	r16
    1c80:	08 95       	ret

00001c82 <print_rank>:
void print_rank()
{
    1c82:	2f 92       	push	r2
    1c84:	3f 92       	push	r3
    1c86:	4f 92       	push	r4
    1c88:	5f 92       	push	r5
    1c8a:	6f 92       	push	r6
    1c8c:	7f 92       	push	r7
    1c8e:	8f 92       	push	r8
    1c90:	9f 92       	push	r9
    1c92:	af 92       	push	r10
    1c94:	bf 92       	push	r11
    1c96:	cf 92       	push	r12
    1c98:	df 92       	push	r13
    1c9a:	ef 92       	push	r14
    1c9c:	ff 92       	push	r15
    1c9e:	0f 93       	push	r16
    1ca0:	1f 93       	push	r17
    1ca2:	df 93       	push	r29
    1ca4:	cf 93       	push	r28
    1ca6:	00 d0       	rcall	.+0      	; 0x1ca8 <print_rank+0x26>
    1ca8:	00 d0       	rcall	.+0      	; 0x1caa <print_rank+0x28>
    1caa:	00 d0       	rcall	.+0      	; 0x1cac <print_rank+0x2a>
    1cac:	cd b7       	in	r28, 0x3d	; 61
    1cae:	de b7       	in	r29, 0x3e	; 62
	unsigned char color;
	unsigned char row;
	unsigned int score = 0;
	unsigned int name[3];
	rank_flag = 0;
    1cb0:	10 92 09 03 	sts	0x0309, r1
	game_flag = 1;
    1cb4:	81 e0       	ldi	r24, 0x01	; 1
    1cb6:	80 93 59 01 	sts	0x0159, r24
	clear_up(1, 0, 14);
    1cba:	81 e0       	ldi	r24, 0x01	; 1
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	60 e0       	ldi	r22, 0x00	; 0
    1cc0:	70 e0       	ldi	r23, 0x00	; 0
    1cc2:	4e e0       	ldi	r20, 0x0E	; 14
    1cc4:	50 e0       	ldi	r21, 0x00	; 0
    1cc6:	0e 94 a7 04 	call	0x94e	; 0x94e <clear_up>
	clear_up(1, 1, 14);
    1cca:	81 e0       	ldi	r24, 0x01	; 1
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	61 e0       	ldi	r22, 0x01	; 1
    1cd0:	70 e0       	ldi	r23, 0x00	; 0
    1cd2:	4e e0       	ldi	r20, 0x0E	; 14
    1cd4:	50 e0       	ldi	r21, 0x00	; 0
    1cd6:	0e 94 a7 04 	call	0x94e	; 0x94e <clear_up>
	change_flag = 0;
    1cda:	10 92 0e 03 	sts	0x030E, r1
	score_alpha = 0;
    1cde:	10 92 0a 03 	sts	0x030A, r1
	while(game_flag)
    1ce2:	80 91 59 01 	lds	r24, 0x0159
    1ce6:	88 23       	and	r24, r24
    1ce8:	09 f4       	brne	.+2      	; 0x1cec <print_rank+0x6a>
    1cea:	21 c1       	rjmp	.+578    	; 0x1f2e <print_rank+0x2ac>
		if((score_alpha & 1) == 0)
		{
			score = eeprom_read_word(rank_flag * 2);
			for(signed int i = 18; i >= 8; i-=5)
			{
				disp[i + 1][0] |= numbers[score % 10][0];
    1cec:	0f 2e       	mov	r0, r31
    1cee:	f1 e6       	ldi	r31, 0x61	; 97
    1cf0:	8f 2e       	mov	r8, r31
    1cf2:	f0 e0       	ldi	r31, 0x00	; 0
    1cf4:	9f 2e       	mov	r9, r31
    1cf6:	f0 2d       	mov	r31, r0
		row = (rank_flag % 3) * 5;
		
		if((score_alpha & 1) == 0)
		{
			score = eeprom_read_word(rank_flag * 2);
			for(signed int i = 18; i >= 8; i-=5)
    1cf8:	0f 2e       	mov	r0, r31
    1cfa:	f8 e2       	ldi	r31, 0x28	; 40
    1cfc:	2f 2e       	mov	r2, r31
    1cfe:	f1 e0       	ldi	r31, 0x01	; 1
    1d00:	3f 2e       	mov	r3, r31
    1d02:	f0 2d       	mov	r31, r0
				score /= 10;
			}
		}
		else
		{
			name[0] = eeprom_read_byte(15 + (3 * rank_flag));
    1d04:	0f 2e       	mov	r0, r31
    1d06:	f3 e0       	ldi	r31, 0x03	; 3
    1d08:	ef 2e       	mov	r14, r31
    1d0a:	f0 2d       	mov	r31, r0
			name[1] = eeprom_read_byte(16 + (3 * rank_flag));
			name[2] = eeprom_read_byte(17 + (3 * rank_flag));

			for(signed int i = 0; i < 3; i++)
			{
		  	disp[9 + (i * 5)][0] |= alpha[name[i]][0];
    1d0c:	0f 2e       	mov	r0, r31
    1d0e:	f9 e9       	ldi	r31, 0x99	; 153
    1d10:	6f 2e       	mov	r6, r31
    1d12:	f0 e0       	ldi	r31, 0x00	; 0
    1d14:	7f 2e       	mov	r7, r31
    1d16:	f0 2d       	mov	r31, r0
		{
			name[0] = eeprom_read_byte(15 + (3 * rank_flag));
			name[1] = eeprom_read_byte(16 + (3 * rank_flag));
			name[2] = eeprom_read_byte(17 + (3 * rank_flag));

			for(signed int i = 0; i < 3; i++)
    1d18:	0f 2e       	mov	r0, r31
    1d1a:	f0 e5       	ldi	r31, 0x50	; 80
    1d1c:	4f 2e       	mov	r4, r31
    1d1e:	f1 e0       	ldi	r31, 0x01	; 1
    1d20:	5f 2e       	mov	r5, r31
    1d22:	f0 2d       	mov	r31, r0
				disp[11 + (i * 5)][0] |= alpha[name[i]][2];
				disp[12 + (i * 5)][0] |= alpha[name[i]][3];
				disp[13 + (i * 5)][0] |= alpha[name[i]][4];
			}
		}
		disp[row + 9][color] |= 0x80;
    1d24:	0f 2e       	mov	r0, r31
    1d26:	f0 e2       	ldi	r31, 0x20	; 32
    1d28:	cf 2e       	mov	r12, r31
    1d2a:	f1 e0       	ldi	r31, 0x01	; 1
    1d2c:	df 2e       	mov	r13, r31
    1d2e:	f0 2d       	mov	r31, r0
	clear_up(1, 1, 14);
	change_flag = 0;
	score_alpha = 0;
	while(game_flag)
	{
		color = rank_flag / 3;
    1d30:	a0 90 09 03 	lds	r10, 0x0309
		row = (rank_flag % 3) * 5;
    1d34:	b0 90 09 03 	lds	r11, 0x0309
		
		if((score_alpha & 1) == 0)
    1d38:	80 91 0a 03 	lds	r24, 0x030A
    1d3c:	80 fd       	sbrc	r24, 0
    1d3e:	47 c0       	rjmp	.+142    	; 0x1dce <print_rank+0x14c>
		{
			score = eeprom_read_word(rank_flag * 2);
    1d40:	80 91 09 03 	lds	r24, 0x0309
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	88 0f       	add	r24, r24
    1d48:	99 1f       	adc	r25, r25
    1d4a:	0e 94 b9 12 	call	0x2572	; 0x2572 <__eerd_word_m16>
    1d4e:	f8 2e       	mov	r15, r24
    1d50:	49 2f       	mov	r20, r25
    1d52:	06 e4       	ldi	r16, 0x46	; 70
    1d54:	11 e0       	ldi	r17, 0x01	; 1
			for(signed int i = 18; i >= 8; i-=5)
			{
				disp[i + 1][0] |= numbers[score % 10][0];
    1d56:	8f 2d       	mov	r24, r15
    1d58:	94 2f       	mov	r25, r20
    1d5a:	6a e0       	ldi	r22, 0x0A	; 10
    1d5c:	70 e0       	ldi	r23, 0x00	; 0
    1d5e:	0e 94 29 12 	call	0x2452	; 0x2452 <__udivmodhi4>
    1d62:	28 2f       	mov	r18, r24
    1d64:	39 2f       	mov	r19, r25
    1d66:	c9 01       	movw	r24, r18
    1d68:	88 0f       	add	r24, r24
    1d6a:	99 1f       	adc	r25, r25
    1d6c:	88 0f       	add	r24, r24
    1d6e:	99 1f       	adc	r25, r25
    1d70:	b4 01       	movw	r22, r8
    1d72:	68 0f       	add	r22, r24
    1d74:	79 1f       	adc	r23, r25
    1d76:	d8 01       	movw	r26, r16
    1d78:	8c 91       	ld	r24, X
    1d7a:	fb 01       	movw	r30, r22
    1d7c:	91 91       	ld	r25, Z+
    1d7e:	89 2b       	or	r24, r25
    1d80:	8c 93       	st	X, r24
				disp[i + 2][0] |= numbers[score % 10][1];
    1d82:	12 96       	adiw	r26, 0x02	; 2
    1d84:	8c 91       	ld	r24, X
    1d86:	12 97       	sbiw	r26, 0x02	; 2
    1d88:	90 81       	ld	r25, Z
    1d8a:	89 2b       	or	r24, r25
    1d8c:	12 96       	adiw	r26, 0x02	; 2
    1d8e:	8c 93       	st	X, r24
    1d90:	12 97       	sbiw	r26, 0x02	; 2
				disp[i + 3][0] |= numbers[score % 10][2];
    1d92:	fb 01       	movw	r30, r22
    1d94:	14 96       	adiw	r26, 0x04	; 4
    1d96:	8c 91       	ld	r24, X
    1d98:	14 97       	sbiw	r26, 0x04	; 4
    1d9a:	92 81       	ldd	r25, Z+2	; 0x02
    1d9c:	89 2b       	or	r24, r25
    1d9e:	14 96       	adiw	r26, 0x04	; 4
    1da0:	8c 93       	st	X, r24
    1da2:	14 97       	sbiw	r26, 0x04	; 4
				disp[i + 4][0] |= numbers[score % 10][3];
    1da4:	16 96       	adiw	r26, 0x06	; 6
    1da6:	8c 91       	ld	r24, X
    1da8:	16 97       	sbiw	r26, 0x06	; 6
    1daa:	93 81       	ldd	r25, Z+3	; 0x03
    1dac:	89 2b       	or	r24, r25
    1dae:	16 96       	adiw	r26, 0x06	; 6
    1db0:	8c 93       	st	X, r24
				score /= 10;
    1db2:	8f 2d       	mov	r24, r15
    1db4:	94 2f       	mov	r25, r20
    1db6:	6a e0       	ldi	r22, 0x0A	; 10
    1db8:	70 e0       	ldi	r23, 0x00	; 0
    1dba:	0e 94 29 12 	call	0x2452	; 0x2452 <__udivmodhi4>
    1dbe:	f6 2e       	mov	r15, r22
    1dc0:	47 2f       	mov	r20, r23
    1dc2:	0a 50       	subi	r16, 0x0A	; 10
    1dc4:	10 40       	sbci	r17, 0x00	; 0
		row = (rank_flag % 3) * 5;
		
		if((score_alpha & 1) == 0)
		{
			score = eeprom_read_word(rank_flag * 2);
			for(signed int i = 18; i >= 8; i-=5)
    1dc6:	02 15       	cp	r16, r2
    1dc8:	13 05       	cpc	r17, r3
    1dca:	29 f6       	brne	.-118    	; 0x1d56 <print_rank+0xd4>
    1dcc:	55 c0       	rjmp	.+170    	; 0x1e78 <print_rank+0x1f6>
				score /= 10;
			}
		}
		else
		{
			name[0] = eeprom_read_byte(15 + (3 * rank_flag));
    1dce:	80 91 09 03 	lds	r24, 0x0309
    1dd2:	8e 9d       	mul	r24, r14
    1dd4:	c0 01       	movw	r24, r0
    1dd6:	11 24       	eor	r1, r1
    1dd8:	0f 96       	adiw	r24, 0x0f	; 15
    1dda:	0e 94 b1 12 	call	0x2562	; 0x2562 <__eerd_byte_m16>
    1dde:	89 83       	std	Y+1, r24	; 0x01
    1de0:	1a 82       	std	Y+2, r1	; 0x02
			name[1] = eeprom_read_byte(16 + (3 * rank_flag));
    1de2:	80 91 09 03 	lds	r24, 0x0309
    1de6:	8e 9d       	mul	r24, r14
    1de8:	c0 01       	movw	r24, r0
    1dea:	11 24       	eor	r1, r1
    1dec:	40 96       	adiw	r24, 0x10	; 16
    1dee:	0e 94 b1 12 	call	0x2562	; 0x2562 <__eerd_byte_m16>
    1df2:	8b 83       	std	Y+3, r24	; 0x03
    1df4:	1c 82       	std	Y+4, r1	; 0x04
			name[2] = eeprom_read_byte(17 + (3 * rank_flag));
    1df6:	80 91 09 03 	lds	r24, 0x0309
    1dfa:	8e 9d       	mul	r24, r14
    1dfc:	c0 01       	movw	r24, r0
    1dfe:	11 24       	eor	r1, r1
    1e00:	41 96       	adiw	r24, 0x11	; 17
    1e02:	0e 94 b1 12 	call	0x2562	; 0x2562 <__eerd_byte_m16>
    1e06:	8d 83       	std	Y+5, r24	; 0x05
    1e08:	1e 82       	std	Y+6, r1	; 0x06
    1e0a:	42 e3       	ldi	r20, 0x32	; 50
    1e0c:	51 e0       	ldi	r21, 0x01	; 1
    1e0e:	be 01       	movw	r22, r28
    1e10:	6f 5f       	subi	r22, 0xFF	; 255
    1e12:	7f 4f       	sbci	r23, 0xFF	; 255

			for(signed int i = 0; i < 3; i++)
			{
		  	disp[9 + (i * 5)][0] |= alpha[name[i]][0];
    1e14:	db 01       	movw	r26, r22
    1e16:	2d 91       	ld	r18, X+
    1e18:	3d 91       	ld	r19, X+
    1e1a:	bd 01       	movw	r22, r26
    1e1c:	c9 01       	movw	r24, r18
    1e1e:	88 0f       	add	r24, r24
    1e20:	99 1f       	adc	r25, r25
    1e22:	88 0f       	add	r24, r24
    1e24:	99 1f       	adc	r25, r25
    1e26:	82 0f       	add	r24, r18
    1e28:	93 1f       	adc	r25, r19
    1e2a:	d3 01       	movw	r26, r6
    1e2c:	a8 0f       	add	r26, r24
    1e2e:	b9 1f       	adc	r27, r25
    1e30:	fa 01       	movw	r30, r20
    1e32:	80 81       	ld	r24, Z
    1e34:	fd 01       	movw	r30, r26
    1e36:	91 91       	ld	r25, Z+
    1e38:	9f 01       	movw	r18, r30
    1e3a:	89 2b       	or	r24, r25
    1e3c:	fa 01       	movw	r30, r20
    1e3e:	80 83       	st	Z, r24
				disp[10 + (i * 5)][0] |= alpha[name[i]][1];
    1e40:	82 81       	ldd	r24, Z+2	; 0x02
    1e42:	f9 01       	movw	r30, r18
    1e44:	90 81       	ld	r25, Z
    1e46:	89 2b       	or	r24, r25
    1e48:	fa 01       	movw	r30, r20
    1e4a:	82 83       	std	Z+2, r24	; 0x02
				disp[11 + (i * 5)][0] |= alpha[name[i]][2];
    1e4c:	84 81       	ldd	r24, Z+4	; 0x04
    1e4e:	12 96       	adiw	r26, 0x02	; 2
    1e50:	9c 91       	ld	r25, X
    1e52:	12 97       	sbiw	r26, 0x02	; 2
    1e54:	89 2b       	or	r24, r25
    1e56:	84 83       	std	Z+4, r24	; 0x04
				disp[12 + (i * 5)][0] |= alpha[name[i]][3];
    1e58:	86 81       	ldd	r24, Z+6	; 0x06
    1e5a:	13 96       	adiw	r26, 0x03	; 3
    1e5c:	9c 91       	ld	r25, X
    1e5e:	13 97       	sbiw	r26, 0x03	; 3
    1e60:	89 2b       	or	r24, r25
    1e62:	86 83       	std	Z+6, r24	; 0x06
				disp[13 + (i * 5)][0] |= alpha[name[i]][4];
    1e64:	80 85       	ldd	r24, Z+8	; 0x08
    1e66:	14 96       	adiw	r26, 0x04	; 4
    1e68:	9c 91       	ld	r25, X
    1e6a:	89 2b       	or	r24, r25
    1e6c:	80 87       	std	Z+8, r24	; 0x08
    1e6e:	46 5f       	subi	r20, 0xF6	; 246
    1e70:	5f 4f       	sbci	r21, 0xFF	; 255
		{
			name[0] = eeprom_read_byte(15 + (3 * rank_flag));
			name[1] = eeprom_read_byte(16 + (3 * rank_flag));
			name[2] = eeprom_read_byte(17 + (3 * rank_flag));

			for(signed int i = 0; i < 3; i++)
    1e72:	44 15       	cp	r20, r4
    1e74:	55 05       	cpc	r21, r5
    1e76:	71 f6       	brne	.-100    	; 0x1e14 <print_rank+0x192>
				disp[11 + (i * 5)][0] |= alpha[name[i]][2];
				disp[12 + (i * 5)][0] |= alpha[name[i]][3];
				disp[13 + (i * 5)][0] |= alpha[name[i]][4];
			}
		}
		disp[row + 9][color] |= 0x80;
    1e78:	8b 2d       	mov	r24, r11
    1e7a:	6e 2d       	mov	r22, r14
    1e7c:	0e 94 1d 12 	call	0x243a	; 0x243a <__udivmodqi4>
    1e80:	f5 e0       	ldi	r31, 0x05	; 5
    1e82:	9f 9f       	mul	r25, r31
    1e84:	40 2d       	mov	r20, r0
    1e86:	11 24       	eor	r1, r1
    1e88:	50 e0       	ldi	r21, 0x00	; 0
    1e8a:	9a 01       	movw	r18, r20
    1e8c:	27 5f       	subi	r18, 0xF7	; 247
    1e8e:	3f 4f       	sbci	r19, 0xFF	; 255
    1e90:	8a 2d       	mov	r24, r10
    1e92:	0e 94 1d 12 	call	0x243a	; 0x243a <__udivmodqi4>
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	22 0f       	add	r18, r18
    1e9a:	33 1f       	adc	r19, r19
    1e9c:	28 0f       	add	r18, r24
    1e9e:	39 1f       	adc	r19, r25
    1ea0:	f6 01       	movw	r30, r12
    1ea2:	e2 0f       	add	r30, r18
    1ea4:	f3 1f       	adc	r31, r19
    1ea6:	20 81       	ld	r18, Z
    1ea8:	20 68       	ori	r18, 0x80	; 128
    1eaa:	20 83       	st	Z, r18
		disp[row + 10][color] |= 0x80;
    1eac:	9a 01       	movw	r18, r20
    1eae:	26 5f       	subi	r18, 0xF6	; 246
    1eb0:	3f 4f       	sbci	r19, 0xFF	; 255
    1eb2:	22 0f       	add	r18, r18
    1eb4:	33 1f       	adc	r19, r19
    1eb6:	28 0f       	add	r18, r24
    1eb8:	39 1f       	adc	r19, r25
    1eba:	f6 01       	movw	r30, r12
    1ebc:	e2 0f       	add	r30, r18
    1ebe:	f3 1f       	adc	r31, r19
    1ec0:	20 81       	ld	r18, Z
    1ec2:	20 68       	ori	r18, 0x80	; 128
    1ec4:	20 83       	st	Z, r18
		disp[row + 11][color] |= 0x80;
    1ec6:	9a 01       	movw	r18, r20
    1ec8:	25 5f       	subi	r18, 0xF5	; 245
    1eca:	3f 4f       	sbci	r19, 0xFF	; 255
    1ecc:	22 0f       	add	r18, r18
    1ece:	33 1f       	adc	r19, r19
    1ed0:	28 0f       	add	r18, r24
    1ed2:	39 1f       	adc	r19, r25
    1ed4:	f6 01       	movw	r30, r12
    1ed6:	e2 0f       	add	r30, r18
    1ed8:	f3 1f       	adc	r31, r19
    1eda:	20 81       	ld	r18, Z
    1edc:	20 68       	ori	r18, 0x80	; 128
    1ede:	20 83       	st	Z, r18
		disp[row + 12][color] |= 0x80;
    1ee0:	44 5f       	subi	r20, 0xF4	; 244
    1ee2:	5f 4f       	sbci	r21, 0xFF	; 255
    1ee4:	44 0f       	add	r20, r20
    1ee6:	55 1f       	adc	r21, r21
    1ee8:	48 0f       	add	r20, r24
    1eea:	59 1f       	adc	r21, r25
    1eec:	f6 01       	movw	r30, r12
    1eee:	e4 0f       	add	r30, r20
    1ef0:	f5 1f       	adc	r31, r21
    1ef2:	80 81       	ld	r24, Z
    1ef4:	80 68       	ori	r24, 0x80	; 128
    1ef6:	80 83       	st	Z, r24
		while(game_flag && change_flag == 0);
    1ef8:	80 91 0e 03 	lds	r24, 0x030E
    1efc:	88 23       	and	r24, r24
    1efe:	e1 f3       	breq	.-8      	; 0x1ef8 <print_rank+0x276>
		clear_up(0,0,16);
    1f00:	80 e0       	ldi	r24, 0x00	; 0
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	60 e0       	ldi	r22, 0x00	; 0
    1f06:	70 e0       	ldi	r23, 0x00	; 0
    1f08:	40 e1       	ldi	r20, 0x10	; 16
    1f0a:	50 e0       	ldi	r21, 0x00	; 0
    1f0c:	0e 94 a7 04 	call	0x94e	; 0x94e <clear_up>
		clear_up(0,1,16);
    1f10:	80 e0       	ldi	r24, 0x00	; 0
    1f12:	90 e0       	ldi	r25, 0x00	; 0
    1f14:	61 e0       	ldi	r22, 0x01	; 1
    1f16:	70 e0       	ldi	r23, 0x00	; 0
    1f18:	40 e1       	ldi	r20, 0x10	; 16
    1f1a:	50 e0       	ldi	r21, 0x00	; 0
    1f1c:	0e 94 a7 04 	call	0x94e	; 0x94e <clear_up>
		change_flag = 0;
    1f20:	10 92 0e 03 	sts	0x030E, r1
	game_flag = 1;
	clear_up(1, 0, 14);
	clear_up(1, 1, 14);
	change_flag = 0;
	score_alpha = 0;
	while(game_flag)
    1f24:	80 91 59 01 	lds	r24, 0x0159
    1f28:	88 23       	and	r24, r24
    1f2a:	09 f0       	breq	.+2      	; 0x1f2e <print_rank+0x2ac>
    1f2c:	01 cf       	rjmp	.-510    	; 0x1d30 <print_rank+0xae>
		while(game_flag && change_flag == 0);
		clear_up(0,0,16);
		clear_up(0,1,16);
		change_flag = 0;
	}
}
    1f2e:	26 96       	adiw	r28, 0x06	; 6
    1f30:	0f b6       	in	r0, 0x3f	; 63
    1f32:	f8 94       	cli
    1f34:	de bf       	out	0x3e, r29	; 62
    1f36:	0f be       	out	0x3f, r0	; 63
    1f38:	cd bf       	out	0x3d, r28	; 61
    1f3a:	cf 91       	pop	r28
    1f3c:	df 91       	pop	r29
    1f3e:	1f 91       	pop	r17
    1f40:	0f 91       	pop	r16
    1f42:	ff 90       	pop	r15
    1f44:	ef 90       	pop	r14
    1f46:	df 90       	pop	r13
    1f48:	cf 90       	pop	r12
    1f4a:	bf 90       	pop	r11
    1f4c:	af 90       	pop	r10
    1f4e:	9f 90       	pop	r9
    1f50:	8f 90       	pop	r8
    1f52:	7f 90       	pop	r7
    1f54:	6f 90       	pop	r6
    1f56:	5f 90       	pop	r5
    1f58:	4f 90       	pop	r4
    1f5a:	3f 90       	pop	r3
    1f5c:	2f 90       	pop	r2
    1f5e:	08 95       	ret

00001f60 <register_rank>:
void register_rank(unsigned int score, unsigned char rank, unsigned char mode)
{
    1f60:	6f 92       	push	r6
    1f62:	7f 92       	push	r7
    1f64:	8f 92       	push	r8
    1f66:	9f 92       	push	r9
    1f68:	af 92       	push	r10
    1f6a:	bf 92       	push	r11
    1f6c:	cf 92       	push	r12
    1f6e:	df 92       	push	r13
    1f70:	ef 92       	push	r14
    1f72:	ff 92       	push	r15
    1f74:	0f 93       	push	r16
    1f76:	1f 93       	push	r17
    1f78:	cf 93       	push	r28
    1f7a:	df 93       	push	r29
    1f7c:	3c 01       	movw	r6, r24
    1f7e:	86 2e       	mov	r8, r22
    1f80:	94 2e       	mov	r9, r20
	unsigned char tmp;
	rank_flag = 0;
    1f82:	10 92 09 03 	sts	0x0309, r1
	alpha_flag[0] = 0;
    1f86:	eb e0       	ldi	r30, 0x0B	; 11
    1f88:	f3 e0       	ldi	r31, 0x03	; 3
    1f8a:	df 01       	movw	r26, r30
    1f8c:	1d 92       	st	X+, r1
	alpha_flag[1] = 0;
    1f8e:	1c 92       	st	X, r1
	alpha_flag[2] = 0;
    1f90:	32 96       	adiw	r30, 0x02	; 2
    1f92:	10 82       	st	Z, r1
	game_flag = 1;
    1f94:	81 e0       	ldi	r24, 0x01	; 1
    1f96:	80 93 59 01 	sts	0x0159, r24
	disp[23][0] = 0;
    1f9a:	10 92 4e 01 	sts	0x014E, r1
	while(game_flag)
	{
		print_number(1,0,alpha[alpha_flag[0]],5);
    1f9e:	c9 e9       	ldi	r28, 0x99	; 153
    1fa0:	d0 e0       	ldi	r29, 0x00	; 0
    1fa2:	0f 2e       	mov	r0, r31
    1fa4:	fb e0       	ldi	r31, 0x0B	; 11
    1fa6:	af 2e       	mov	r10, r31
    1fa8:	f3 e0       	ldi	r31, 0x03	; 3
    1faa:	bf 2e       	mov	r11, r31
    1fac:	f0 2d       	mov	r31, r0
    1fae:	05 e0       	ldi	r16, 0x05	; 5
		print_number(6,0,alpha[alpha_flag[1]],5);
    1fb0:	75 01       	movw	r14, r10
    1fb2:	08 94       	sec
    1fb4:	e1 1c       	adc	r14, r1
    1fb6:	f1 1c       	adc	r15, r1
		print_number(11,0,alpha[alpha_flag[2]],5);
    1fb8:	6f 01       	movw	r12, r30
	alpha_flag[2] = 0;
	game_flag = 1;
	disp[23][0] = 0;
	while(game_flag)
	{
		print_number(1,0,alpha[alpha_flag[0]],5);
    1fba:	f5 01       	movw	r30, r10
    1fbc:	80 81       	ld	r24, Z
    1fbe:	80 9f       	mul	r24, r16
    1fc0:	c0 01       	movw	r24, r0
    1fc2:	11 24       	eor	r1, r1
    1fc4:	ae 01       	movw	r20, r28
    1fc6:	48 0f       	add	r20, r24
    1fc8:	59 1f       	adc	r21, r25
    1fca:	81 e0       	ldi	r24, 0x01	; 1
    1fcc:	90 e0       	ldi	r25, 0x00	; 0
    1fce:	60 e0       	ldi	r22, 0x00	; 0
    1fd0:	70 e0       	ldi	r23, 0x00	; 0
    1fd2:	25 e0       	ldi	r18, 0x05	; 5
    1fd4:	30 e0       	ldi	r19, 0x00	; 0
    1fd6:	0e 94 7f 04 	call	0x8fe	; 0x8fe <print_number>
		print_number(6,0,alpha[alpha_flag[1]],5);
    1fda:	f7 01       	movw	r30, r14
    1fdc:	80 81       	ld	r24, Z
    1fde:	80 9f       	mul	r24, r16
    1fe0:	c0 01       	movw	r24, r0
    1fe2:	11 24       	eor	r1, r1
    1fe4:	ae 01       	movw	r20, r28
    1fe6:	48 0f       	add	r20, r24
    1fe8:	59 1f       	adc	r21, r25
    1fea:	86 e0       	ldi	r24, 0x06	; 6
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	60 e0       	ldi	r22, 0x00	; 0
    1ff0:	70 e0       	ldi	r23, 0x00	; 0
    1ff2:	25 e0       	ldi	r18, 0x05	; 5
    1ff4:	30 e0       	ldi	r19, 0x00	; 0
    1ff6:	0e 94 7f 04 	call	0x8fe	; 0x8fe <print_number>
		print_number(11,0,alpha[alpha_flag[2]],5);
    1ffa:	f6 01       	movw	r30, r12
    1ffc:	80 81       	ld	r24, Z
    1ffe:	80 9f       	mul	r24, r16
    2000:	c0 01       	movw	r24, r0
    2002:	11 24       	eor	r1, r1
    2004:	ae 01       	movw	r20, r28
    2006:	48 0f       	add	r20, r24
    2008:	59 1f       	adc	r21, r25
    200a:	8b e0       	ldi	r24, 0x0B	; 11
    200c:	90 e0       	ldi	r25, 0x00	; 0
    200e:	60 e0       	ldi	r22, 0x00	; 0
    2010:	70 e0       	ldi	r23, 0x00	; 0
    2012:	25 e0       	ldi	r18, 0x05	; 5
    2014:	30 e0       	ldi	r19, 0x00	; 0
    2016:	0e 94 7f 04 	call	0x8fe	; 0x8fe <print_number>
		check = 0;
    201a:	10 92 5e 01 	sts	0x015E, r1
    201e:	10 92 5d 01 	sts	0x015D, r1
    2022:	35 c0       	rjmp	.+106    	; 0x208e <register_rank+0x12e>
		while(game_flag && change_flag	== 0)
		{
			if(check == 0)
    2024:	80 91 5d 01 	lds	r24, 0x015D
    2028:	90 91 5e 01 	lds	r25, 0x015E
    202c:	00 97       	sbiw	r24, 0x00	; 0
    202e:	c9 f4       	brne	.+50     	; 0x2062 <register_rank+0x102>
				print_number((rank_flag * 5) + 1, 0, alpha[alpha_flag[rank_flag]],5);
    2030:	80 91 09 03 	lds	r24, 0x0309
    2034:	20 91 09 03 	lds	r18, 0x0309
    2038:	f5 01       	movw	r30, r10
    203a:	e2 0f       	add	r30, r18
    203c:	f1 1d       	adc	r31, r1
    203e:	20 81       	ld	r18, Z
    2040:	80 9f       	mul	r24, r16
    2042:	c0 01       	movw	r24, r0
    2044:	11 24       	eor	r1, r1
    2046:	20 9f       	mul	r18, r16
    2048:	90 01       	movw	r18, r0
    204a:	11 24       	eor	r1, r1
    204c:	ae 01       	movw	r20, r28
    204e:	42 0f       	add	r20, r18
    2050:	53 1f       	adc	r21, r19
    2052:	01 96       	adiw	r24, 0x01	; 1
    2054:	60 e0       	ldi	r22, 0x00	; 0
    2056:	70 e0       	ldi	r23, 0x00	; 0
    2058:	25 e0       	ldi	r18, 0x05	; 5
    205a:	30 e0       	ldi	r19, 0x00	; 0
    205c:	0e 94 7f 04 	call	0x8fe	; 0x8fe <print_number>
    2060:	16 c0       	rjmp	.+44     	; 0x208e <register_rank+0x12e>
			else if(check == 10)
    2062:	8a 30       	cpi	r24, 0x0A	; 10
    2064:	91 05       	cpc	r25, r1
    2066:	69 f4       	brne	.+26     	; 0x2082 <register_rank+0x122>
				clear_up(rank_flag * 5 + 1, 0, 5);
    2068:	80 91 09 03 	lds	r24, 0x0309
    206c:	80 9f       	mul	r24, r16
    206e:	c0 01       	movw	r24, r0
    2070:	11 24       	eor	r1, r1
    2072:	01 96       	adiw	r24, 0x01	; 1
    2074:	60 e0       	ldi	r22, 0x00	; 0
    2076:	70 e0       	ldi	r23, 0x00	; 0
    2078:	45 e0       	ldi	r20, 0x05	; 5
    207a:	50 e0       	ldi	r21, 0x00	; 0
    207c:	0e 94 a7 04 	call	0x94e	; 0x94e <clear_up>
    2080:	06 c0       	rjmp	.+12     	; 0x208e <register_rank+0x12e>
			else if(check == 20)
    2082:	44 97       	sbiw	r24, 0x14	; 20
    2084:	21 f4       	brne	.+8      	; 0x208e <register_rank+0x12e>
				check = 0;
    2086:	10 92 5e 01 	sts	0x015E, r1
    208a:	10 92 5d 01 	sts	0x015D, r1
	{
		print_number(1,0,alpha[alpha_flag[0]],5);
		print_number(6,0,alpha[alpha_flag[1]],5);
		print_number(11,0,alpha[alpha_flag[2]],5);
		check = 0;
		while(game_flag && change_flag	== 0)
    208e:	80 91 59 01 	lds	r24, 0x0159
    2092:	88 23       	and	r24, r24
    2094:	21 f0       	breq	.+8      	; 0x209e <register_rank+0x13e>
    2096:	80 91 0e 03 	lds	r24, 0x030E
    209a:	88 23       	and	r24, r24
    209c:	19 f2       	breq	.-122    	; 0x2024 <register_rank+0xc4>
			else if(check == 10)
				clear_up(rank_flag * 5 + 1, 0, 5);
			else if(check == 20)
				check = 0;
		}
		change_flag = 0;
    209e:	10 92 0e 03 	sts	0x030E, r1
	alpha_flag[0] = 0;
	alpha_flag[1] = 0;
	alpha_flag[2] = 0;
	game_flag = 1;
	disp[23][0] = 0;
	while(game_flag)
    20a2:	80 91 59 01 	lds	r24, 0x0159
    20a6:	88 23       	and	r24, r24
    20a8:	09 f0       	breq	.+2      	; 0x20ac <register_rank+0x14c>
    20aa:	87 cf       	rjmp	.-242    	; 0x1fba <register_rank+0x5a>
				check = 0;
		}
		change_flag = 0;
		
	}
	clear_up(0,0,16);
    20ac:	80 e0       	ldi	r24, 0x00	; 0
    20ae:	90 e0       	ldi	r25, 0x00	; 0
    20b0:	60 e0       	ldi	r22, 0x00	; 0
    20b2:	70 e0       	ldi	r23, 0x00	; 0
    20b4:	40 e1       	ldi	r20, 0x10	; 16
    20b6:	50 e0       	ldi	r21, 0x00	; 0
    20b8:	0e 94 a7 04 	call	0x94e	; 0x94e <clear_up>
	TIMSK &= ~(1 << TOIE1);
    20bc:	e9 e5       	ldi	r30, 0x59	; 89
    20be:	f0 e0       	ldi	r31, 0x00	; 0
    20c0:	80 81       	ld	r24, Z
    20c2:	8b 7f       	andi	r24, 0xFB	; 251
    20c4:	80 83       	st	Z, r24
	print_number(1,1,alpha[alpha_flag[0]],5);
    20c6:	0f 2e       	mov	r0, r31
    20c8:	f9 e9       	ldi	r31, 0x99	; 153
    20ca:	cf 2e       	mov	r12, r31
    20cc:	f0 e0       	ldi	r31, 0x00	; 0
    20ce:	df 2e       	mov	r13, r31
    20d0:	f0 2d       	mov	r31, r0
    20d2:	0f 2e       	mov	r0, r31
    20d4:	fb e0       	ldi	r31, 0x0B	; 11
    20d6:	ef 2e       	mov	r14, r31
    20d8:	f3 e0       	ldi	r31, 0x03	; 3
    20da:	ff 2e       	mov	r15, r31
    20dc:	f0 2d       	mov	r31, r0
    20de:	f7 01       	movw	r30, r14
    20e0:	81 91       	ld	r24, Z+
    20e2:	8f 01       	movw	r16, r30
    20e4:	0f 2e       	mov	r0, r31
    20e6:	f5 e0       	ldi	r31, 0x05	; 5
    20e8:	bf 2e       	mov	r11, r31
    20ea:	f0 2d       	mov	r31, r0
    20ec:	8b 9d       	mul	r24, r11
    20ee:	c0 01       	movw	r24, r0
    20f0:	11 24       	eor	r1, r1
    20f2:	a6 01       	movw	r20, r12
    20f4:	48 0f       	add	r20, r24
    20f6:	59 1f       	adc	r21, r25
    20f8:	81 e0       	ldi	r24, 0x01	; 1
    20fa:	90 e0       	ldi	r25, 0x00	; 0
    20fc:	61 e0       	ldi	r22, 0x01	; 1
    20fe:	70 e0       	ldi	r23, 0x00	; 0
    2100:	25 e0       	ldi	r18, 0x05	; 5
    2102:	30 e0       	ldi	r19, 0x00	; 0
    2104:	0e 94 7f 04 	call	0x8fe	; 0x8fe <print_number>
	print_number(6,1,alpha[alpha_flag[1]],5);
    2108:	f8 01       	movw	r30, r16
    210a:	80 81       	ld	r24, Z
    210c:	8b 9d       	mul	r24, r11
    210e:	c0 01       	movw	r24, r0
    2110:	11 24       	eor	r1, r1
    2112:	a6 01       	movw	r20, r12
    2114:	48 0f       	add	r20, r24
    2116:	59 1f       	adc	r21, r25
    2118:	86 e0       	ldi	r24, 0x06	; 6
    211a:	90 e0       	ldi	r25, 0x00	; 0
    211c:	61 e0       	ldi	r22, 0x01	; 1
    211e:	70 e0       	ldi	r23, 0x00	; 0
    2120:	25 e0       	ldi	r18, 0x05	; 5
    2122:	30 e0       	ldi	r19, 0x00	; 0
    2124:	0e 94 7f 04 	call	0x8fe	; 0x8fe <print_number>
	print_number(11,1,alpha[alpha_flag[2]],5);
    2128:	82 e0       	ldi	r24, 0x02	; 2
    212a:	90 e0       	ldi	r25, 0x00	; 0
    212c:	e8 0e       	add	r14, r24
    212e:	f9 1e       	adc	r15, r25
    2130:	f7 01       	movw	r30, r14
    2132:	80 81       	ld	r24, Z
    2134:	8b 9d       	mul	r24, r11
    2136:	c0 01       	movw	r24, r0
    2138:	11 24       	eor	r1, r1
    213a:	c8 0e       	add	r12, r24
    213c:	d9 1e       	adc	r13, r25
    213e:	8b e0       	ldi	r24, 0x0B	; 11
    2140:	90 e0       	ldi	r25, 0x00	; 0
    2142:	61 e0       	ldi	r22, 0x01	; 1
    2144:	70 e0       	ldi	r23, 0x00	; 0
    2146:	a6 01       	movw	r20, r12
    2148:	25 e0       	ldi	r18, 0x05	; 5
    214a:	30 e0       	ldi	r19, 0x00	; 0
    214c:	0e 94 7f 04 	call	0x8fe	; 0x8fe <print_number>
    2150:	20 e1       	ldi	r18, 0x10	; 16
    2152:	37 e2       	ldi	r19, 0x27	; 39
    2154:	40 e9       	ldi	r20, 0x90	; 144
    2156:	51 e0       	ldi	r21, 0x01	; 1
    2158:	ca 01       	movw	r24, r20
    215a:	01 97       	sbiw	r24, 0x01	; 1
    215c:	f1 f7       	brne	.-4      	; 0x215a <register_rank+0x1fa>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    215e:	21 50       	subi	r18, 0x01	; 1
    2160:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2162:	d1 f7       	brne	.-12     	; 0x2158 <register_rank+0x1f8>
	_delay_ms(1000);
	clear_up(0,1,16);
    2164:	80 e0       	ldi	r24, 0x00	; 0
    2166:	90 e0       	ldi	r25, 0x00	; 0
    2168:	61 e0       	ldi	r22, 0x01	; 1
    216a:	70 e0       	ldi	r23, 0x00	; 0
    216c:	40 e1       	ldi	r20, 0x10	; 16
    216e:	50 e0       	ldi	r21, 0x00	; 0
    2170:	0e 94 a7 04 	call	0x94e	; 0x94e <clear_up>
  tmp = 6 * (mode - 2);
    2174:	c9 2d       	mov	r28, r9
    2176:	d0 e0       	ldi	r29, 0x00	; 0
    2178:	ce 01       	movw	r24, r28
    217a:	88 0f       	add	r24, r24
    217c:	99 1f       	adc	r25, r25
    217e:	8c 0f       	add	r24, r28
    2180:	9d 1f       	adc	r25, r29
    2182:	88 0f       	add	r24, r24
    2184:	99 1f       	adc	r25, r25
    2186:	08 2f       	mov	r16, r24
    2188:	0c 50       	subi	r16, 0x0C	; 12
	switch(rank)
    218a:	f2 e0       	ldi	r31, 0x02	; 2
    218c:	8f 16       	cp	r8, r31
    218e:	71 f1       	breq	.+92     	; 0x21ec <register_rank+0x28c>
    2190:	83 e0       	ldi	r24, 0x03	; 3
    2192:	88 16       	cp	r8, r24
    2194:	09 f4       	brne	.+2      	; 0x2198 <register_rank+0x238>
    2196:	49 c0       	rjmp	.+146    	; 0x222a <register_rank+0x2ca>
    2198:	91 e0       	ldi	r25, 0x01	; 1
    219a:	89 16       	cp	r8, r25
    219c:	09 f0       	breq	.+2      	; 0x21a0 <register_rank+0x240>
    219e:	57 c0       	rjmp	.+174    	; 0x224e <register_rank+0x2ee>
	{
		case 1:
			eeprom_update_word((unsigned int*)(4 + tmp), eeprom_read_word((2 + tmp)));
    21a0:	10 e0       	ldi	r17, 0x00	; 0
    21a2:	ee 24       	eor	r14, r14
    21a4:	ff 24       	eor	r15, r15
    21a6:	68 94       	set
    21a8:	e1 f8       	bld	r14, 1
    21aa:	e0 0e       	add	r14, r16
    21ac:	f1 1e       	adc	r15, r17
    21ae:	c7 01       	movw	r24, r14
    21b0:	0e 94 b9 12 	call	0x2572	; 0x2572 <__eerd_word_m16>
    21b4:	bc 01       	movw	r22, r24
    21b6:	c8 01       	movw	r24, r16
    21b8:	04 96       	adiw	r24, 0x04	; 4
    21ba:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <__eeupd_word_m16>
			eeprom_update_word((unsigned int*)(2 + tmp), eeprom_read_word((0 + tmp)));
    21be:	c8 01       	movw	r24, r16
    21c0:	0e 94 b9 12 	call	0x2572	; 0x2572 <__eerd_word_m16>
    21c4:	bc 01       	movw	r22, r24
    21c6:	c7 01       	movw	r24, r14
    21c8:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <__eeupd_word_m16>
			eeprom_update_word((unsigned int*)(0 + tmp), score);
    21cc:	c8 01       	movw	r24, r16
    21ce:	b3 01       	movw	r22, r6
    21d0:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <__eeupd_word_m16>
			break;
		
		default:
			break;
	}
	tmp = 9 * (mode - 2);
    21d4:	ce 01       	movw	r24, r28
    21d6:	88 0f       	add	r24, r24
    21d8:	99 1f       	adc	r25, r25
    21da:	88 0f       	add	r24, r24
    21dc:	99 1f       	adc	r25, r25
    21de:	88 0f       	add	r24, r24
    21e0:	99 1f       	adc	r25, r25
    21e2:	8c 0f       	add	r24, r28
    21e4:	9d 1f       	adc	r25, r29
    21e6:	48 2f       	mov	r20, r24
    21e8:	42 51       	subi	r20, 0x12	; 18
    21ea:	48 c0       	rjmp	.+144    	; 0x227c <register_rank+0x31c>
			eeprom_update_word((unsigned int*)(2 + tmp), eeprom_read_word((0 + tmp)));
			eeprom_update_word((unsigned int*)(0 + tmp), score);
			break;

		case 2:
			eeprom_update_word((unsigned int*)(4 + tmp), eeprom_read_word((2 + tmp)));
    21ec:	10 e0       	ldi	r17, 0x00	; 0
    21ee:	ee 24       	eor	r14, r14
    21f0:	ff 24       	eor	r15, r15
    21f2:	68 94       	set
    21f4:	e1 f8       	bld	r14, 1
    21f6:	e0 0e       	add	r14, r16
    21f8:	f1 1e       	adc	r15, r17
    21fa:	c7 01       	movw	r24, r14
    21fc:	0e 94 b9 12 	call	0x2572	; 0x2572 <__eerd_word_m16>
    2200:	bc 01       	movw	r22, r24
    2202:	c8 01       	movw	r24, r16
    2204:	04 96       	adiw	r24, 0x04	; 4
    2206:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <__eeupd_word_m16>
			eeprom_update_word((unsigned int*)(2 + tmp), score);
    220a:	c7 01       	movw	r24, r14
    220c:	b3 01       	movw	r22, r6
    220e:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <__eeupd_word_m16>
			break;
		
		default:
			break;
	}
	tmp = 9 * (mode - 2);
    2212:	ce 01       	movw	r24, r28
    2214:	88 0f       	add	r24, r24
    2216:	99 1f       	adc	r25, r25
    2218:	88 0f       	add	r24, r24
    221a:	99 1f       	adc	r25, r25
    221c:	88 0f       	add	r24, r24
    221e:	99 1f       	adc	r25, r25
    2220:	8c 0f       	add	r24, r28
    2222:	9d 1f       	adc	r25, r29
    2224:	48 2f       	mov	r20, r24
    2226:	42 51       	subi	r20, 0x12	; 18
    2228:	95 c0       	rjmp	.+298    	; 0x2354 <register_rank+0x3f4>
			eeprom_update_word((unsigned int*)(4 + tmp), eeprom_read_word((2 + tmp)));
			eeprom_update_word((unsigned int*)(2 + tmp), score);
			break;

		case 3:
			eeprom_update_word((unsigned int*)(4 + tmp), score);
    222a:	80 2f       	mov	r24, r16
    222c:	90 e0       	ldi	r25, 0x00	; 0
    222e:	04 96       	adiw	r24, 0x04	; 4
    2230:	b3 01       	movw	r22, r6
    2232:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <__eeupd_word_m16>
			break;
		
		default:
			break;
	}
	tmp = 9 * (mode - 2);
    2236:	ce 01       	movw	r24, r28
    2238:	88 0f       	add	r24, r24
    223a:	99 1f       	adc	r25, r25
    223c:	88 0f       	add	r24, r24
    223e:	99 1f       	adc	r25, r25
    2240:	88 0f       	add	r24, r24
    2242:	99 1f       	adc	r25, r25
    2244:	8c 0f       	add	r24, r28
    2246:	9d 1f       	adc	r25, r29
    2248:	48 2f       	mov	r20, r24
    224a:	42 51       	subi	r20, 0x12	; 18
    224c:	c3 c0       	rjmp	.+390    	; 0x23d4 <register_rank+0x474>
    224e:	ce 01       	movw	r24, r28
    2250:	88 0f       	add	r24, r24
    2252:	99 1f       	adc	r25, r25
    2254:	88 0f       	add	r24, r24
    2256:	99 1f       	adc	r25, r25
    2258:	88 0f       	add	r24, r24
    225a:	99 1f       	adc	r25, r25
    225c:	8c 0f       	add	r24, r28
    225e:	9d 1f       	adc	r25, r29
    2260:	48 2f       	mov	r20, r24
    2262:	42 51       	subi	r20, 0x12	; 18
	switch(rank)
    2264:	e2 e0       	ldi	r30, 0x02	; 2
    2266:	8e 16       	cp	r8, r30
    2268:	09 f4       	brne	.+2      	; 0x226c <register_rank+0x30c>
    226a:	74 c0       	rjmp	.+232    	; 0x2354 <register_rank+0x3f4>
    226c:	f3 e0       	ldi	r31, 0x03	; 3
    226e:	8f 16       	cp	r8, r31
    2270:	09 f4       	brne	.+2      	; 0x2274 <register_rank+0x314>
    2272:	b0 c0       	rjmp	.+352    	; 0x23d4 <register_rank+0x474>
    2274:	81 e0       	ldi	r24, 0x01	; 1
    2276:	88 16       	cp	r8, r24
    2278:	09 f0       	breq	.+2      	; 0x227c <register_rank+0x31c>
    227a:	cb c0       	rjmp	.+406    	; 0x2412 <register_rank+0x4b2>
	{
		case 1:
			eeprom_update_byte((unsigned char*)(21 + tmp), eeprom_read_byte((18 + tmp)));
    227c:	c4 2e       	mov	r12, r20
    227e:	dd 24       	eor	r13, r13
    2280:	86 01       	movw	r16, r12
    2282:	0e 5e       	subi	r16, 0xEE	; 238
    2284:	1f 4f       	sbci	r17, 0xFF	; 255
    2286:	c8 01       	movw	r24, r16
    2288:	0e 94 b1 12 	call	0x2562	; 0x2562 <__eerd_byte_m16>
    228c:	68 2f       	mov	r22, r24
    228e:	c6 01       	movw	r24, r12
    2290:	45 96       	adiw	r24, 0x15	; 21
    2292:	0e 94 bf 12 	call	0x257e	; 0x257e <__eeupd_byte_m16>
			eeprom_update_byte((unsigned char*)(22 + tmp), eeprom_read_byte((19 + tmp)));
    2296:	0f 2e       	mov	r0, r31
    2298:	f3 e1       	ldi	r31, 0x13	; 19
    229a:	ef 2e       	mov	r14, r31
    229c:	ff 24       	eor	r15, r15
    229e:	f0 2d       	mov	r31, r0
    22a0:	ec 0c       	add	r14, r12
    22a2:	fd 1c       	adc	r15, r13
    22a4:	c7 01       	movw	r24, r14
    22a6:	0e 94 b1 12 	call	0x2562	; 0x2562 <__eerd_byte_m16>
    22aa:	68 2f       	mov	r22, r24
    22ac:	c6 01       	movw	r24, r12
    22ae:	46 96       	adiw	r24, 0x16	; 22
    22b0:	0e 94 bf 12 	call	0x257e	; 0x257e <__eeupd_byte_m16>
			eeprom_update_byte((unsigned char*)(23 + tmp), eeprom_read_byte((20 + tmp))); 
    22b4:	0f 2e       	mov	r0, r31
    22b6:	f4 e1       	ldi	r31, 0x14	; 20
    22b8:	af 2e       	mov	r10, r31
    22ba:	bb 24       	eor	r11, r11
    22bc:	f0 2d       	mov	r31, r0
    22be:	ac 0c       	add	r10, r12
    22c0:	bd 1c       	adc	r11, r13
    22c2:	c5 01       	movw	r24, r10
    22c4:	0e 94 b1 12 	call	0x2562	; 0x2562 <__eerd_byte_m16>
    22c8:	68 2f       	mov	r22, r24
    22ca:	c6 01       	movw	r24, r12
    22cc:	47 96       	adiw	r24, 0x17	; 23
    22ce:	0e 94 bf 12 	call	0x257e	; 0x257e <__eeupd_byte_m16>
			eeprom_update_byte((unsigned char*)(18 + tmp), eeprom_read_byte((15 + tmp)));
    22d2:	0f 2e       	mov	r0, r31
    22d4:	ff e0       	ldi	r31, 0x0F	; 15
    22d6:	8f 2e       	mov	r8, r31
    22d8:	99 24       	eor	r9, r9
    22da:	f0 2d       	mov	r31, r0
    22dc:	8c 0c       	add	r8, r12
    22de:	9d 1c       	adc	r9, r13
    22e0:	c4 01       	movw	r24, r8
    22e2:	0e 94 b1 12 	call	0x2562	; 0x2562 <__eerd_byte_m16>
    22e6:	68 2f       	mov	r22, r24
    22e8:	c8 01       	movw	r24, r16
    22ea:	0e 94 bf 12 	call	0x257e	; 0x257e <__eeupd_byte_m16>
			eeprom_update_byte((unsigned char*)(19 + tmp), eeprom_read_byte((16 + tmp)));
    22ee:	66 24       	eor	r6, r6
    22f0:	77 24       	eor	r7, r7
    22f2:	68 94       	set
    22f4:	64 f8       	bld	r6, 4
    22f6:	6c 0c       	add	r6, r12
    22f8:	7d 1c       	adc	r7, r13
    22fa:	c3 01       	movw	r24, r6
    22fc:	0e 94 b1 12 	call	0x2562	; 0x2562 <__eerd_byte_m16>
    2300:	68 2f       	mov	r22, r24
    2302:	c7 01       	movw	r24, r14
    2304:	0e 94 bf 12 	call	0x257e	; 0x257e <__eeupd_byte_m16>
			eeprom_update_byte((unsigned char*)(20 + tmp), eeprom_read_byte((17 + tmp))); 
    2308:	e1 e1       	ldi	r30, 0x11	; 17
    230a:	f0 e0       	ldi	r31, 0x00	; 0
    230c:	ce 0e       	add	r12, r30
    230e:	df 1e       	adc	r13, r31
    2310:	c6 01       	movw	r24, r12
    2312:	0e 94 b1 12 	call	0x2562	; 0x2562 <__eerd_byte_m16>
    2316:	68 2f       	mov	r22, r24
    2318:	c5 01       	movw	r24, r10
    231a:	0e 94 bf 12 	call	0x257e	; 0x257e <__eeupd_byte_m16>
			eeprom_update_byte((unsigned char*)(15 + tmp), alpha_flag[0]);
    231e:	0f 2e       	mov	r0, r31
    2320:	fb e0       	ldi	r31, 0x0B	; 11
    2322:	ef 2e       	mov	r14, r31
    2324:	f3 e0       	ldi	r31, 0x03	; 3
    2326:	ff 2e       	mov	r15, r31
    2328:	f0 2d       	mov	r31, r0
    232a:	f7 01       	movw	r30, r14
    232c:	61 91       	ld	r22, Z+
    232e:	8f 01       	movw	r16, r30
    2330:	c4 01       	movw	r24, r8
    2332:	0e 94 bf 12 	call	0x257e	; 0x257e <__eeupd_byte_m16>
			eeprom_update_byte((unsigned char*)(16 + tmp), alpha_flag[1]);
    2336:	f8 01       	movw	r30, r16
    2338:	60 81       	ld	r22, Z
    233a:	c3 01       	movw	r24, r6
    233c:	0e 94 bf 12 	call	0x257e	; 0x257e <__eeupd_byte_m16>
			eeprom_update_byte((unsigned char*)(17 + tmp), alpha_flag[2]); 
    2340:	82 e0       	ldi	r24, 0x02	; 2
    2342:	90 e0       	ldi	r25, 0x00	; 0
    2344:	e8 0e       	add	r14, r24
    2346:	f9 1e       	adc	r15, r25
    2348:	f7 01       	movw	r30, r14
    234a:	60 81       	ld	r22, Z
    234c:	c6 01       	movw	r24, r12
    234e:	0e 94 bf 12 	call	0x257e	; 0x257e <__eeupd_byte_m16>
    2352:	5f c0       	rjmp	.+190    	; 0x2412 <register_rank+0x4b2>
			break;

		case 2:
			eeprom_update_byte((unsigned char*)(21 + tmp), eeprom_read_byte((18 + tmp)));
    2354:	c4 2e       	mov	r12, r20
    2356:	dd 24       	eor	r13, r13
    2358:	0f 2e       	mov	r0, r31
    235a:	f2 e1       	ldi	r31, 0x12	; 18
    235c:	af 2e       	mov	r10, r31
    235e:	bb 24       	eor	r11, r11
    2360:	f0 2d       	mov	r31, r0
    2362:	ac 0c       	add	r10, r12
    2364:	bd 1c       	adc	r11, r13
    2366:	c5 01       	movw	r24, r10
    2368:	0e 94 b1 12 	call	0x2562	; 0x2562 <__eerd_byte_m16>
    236c:	68 2f       	mov	r22, r24
    236e:	c6 01       	movw	r24, r12
    2370:	45 96       	adiw	r24, 0x15	; 21
    2372:	0e 94 bf 12 	call	0x257e	; 0x257e <__eeupd_byte_m16>
			eeprom_update_byte((unsigned char*)(22 + tmp), eeprom_read_byte((19 + tmp)));
    2376:	c6 01       	movw	r24, r12
    2378:	43 96       	adiw	r24, 0x13	; 19
    237a:	0e 94 b1 12 	call	0x2562	; 0x2562 <__eerd_byte_m16>
    237e:	68 2f       	mov	r22, r24
    2380:	c6 01       	movw	r24, r12
    2382:	46 96       	adiw	r24, 0x16	; 22
    2384:	0e 94 bf 12 	call	0x257e	; 0x257e <__eeupd_byte_m16>
			eeprom_update_byte((unsigned char*)(23 + tmp), eeprom_read_byte((20 + tmp))); 
    2388:	c6 01       	movw	r24, r12
    238a:	44 96       	adiw	r24, 0x14	; 20
    238c:	0e 94 b1 12 	call	0x2562	; 0x2562 <__eerd_byte_m16>
    2390:	68 2f       	mov	r22, r24
    2392:	c6 01       	movw	r24, r12
    2394:	47 96       	adiw	r24, 0x17	; 23
    2396:	0e 94 bf 12 	call	0x257e	; 0x257e <__eeupd_byte_m16>
			eeprom_update_byte((unsigned char*)(18 + tmp), alpha_flag[0]);
    239a:	0f 2e       	mov	r0, r31
    239c:	fb e0       	ldi	r31, 0x0B	; 11
    239e:	ef 2e       	mov	r14, r31
    23a0:	f3 e0       	ldi	r31, 0x03	; 3
    23a2:	ff 2e       	mov	r15, r31
    23a4:	f0 2d       	mov	r31, r0
    23a6:	f7 01       	movw	r30, r14
    23a8:	61 91       	ld	r22, Z+
    23aa:	8f 01       	movw	r16, r30
    23ac:	c5 01       	movw	r24, r10
    23ae:	0e 94 bf 12 	call	0x257e	; 0x257e <__eeupd_byte_m16>
			eeprom_update_byte((unsigned char*)(17 + tmp), alpha_flag[1]);
    23b2:	f8 01       	movw	r30, r16
    23b4:	60 81       	ld	r22, Z
    23b6:	c6 01       	movw	r24, r12
    23b8:	41 96       	adiw	r24, 0x11	; 17
    23ba:	0e 94 bf 12 	call	0x257e	; 0x257e <__eeupd_byte_m16>
			eeprom_update_byte((unsigned char*)(16 + tmp), alpha_flag[2]); 
    23be:	82 e0       	ldi	r24, 0x02	; 2
    23c0:	90 e0       	ldi	r25, 0x00	; 0
    23c2:	e8 0e       	add	r14, r24
    23c4:	f9 1e       	adc	r15, r25
    23c6:	f7 01       	movw	r30, r14
    23c8:	60 81       	ld	r22, Z
    23ca:	c6 01       	movw	r24, r12
    23cc:	40 96       	adiw	r24, 0x10	; 16
    23ce:	0e 94 bf 12 	call	0x257e	; 0x257e <__eeupd_byte_m16>
    23d2:	1f c0       	rjmp	.+62     	; 0x2412 <register_rank+0x4b2>
			break;

		case 3:
			eeprom_update_byte((unsigned char*)(21 + tmp), alpha_flag[0]);
    23d4:	c4 2e       	mov	r12, r20
    23d6:	dd 24       	eor	r13, r13
    23d8:	0f 2e       	mov	r0, r31
    23da:	fb e0       	ldi	r31, 0x0B	; 11
    23dc:	ef 2e       	mov	r14, r31
    23de:	f3 e0       	ldi	r31, 0x03	; 3
    23e0:	ff 2e       	mov	r15, r31
    23e2:	f0 2d       	mov	r31, r0
    23e4:	f7 01       	movw	r30, r14
    23e6:	61 91       	ld	r22, Z+
    23e8:	8f 01       	movw	r16, r30
    23ea:	c6 01       	movw	r24, r12
    23ec:	45 96       	adiw	r24, 0x15	; 21
    23ee:	0e 94 bf 12 	call	0x257e	; 0x257e <__eeupd_byte_m16>
			eeprom_update_byte((unsigned char*)(22 + tmp), alpha_flag[1]);
    23f2:	f8 01       	movw	r30, r16
    23f4:	60 81       	ld	r22, Z
    23f6:	c6 01       	movw	r24, r12
    23f8:	46 96       	adiw	r24, 0x16	; 22
    23fa:	0e 94 bf 12 	call	0x257e	; 0x257e <__eeupd_byte_m16>
			eeprom_update_byte((unsigned char*)(23 + tmp), alpha_flag[2]); 
    23fe:	82 e0       	ldi	r24, 0x02	; 2
    2400:	90 e0       	ldi	r25, 0x00	; 0
    2402:	e8 0e       	add	r14, r24
    2404:	f9 1e       	adc	r15, r25
    2406:	f7 01       	movw	r30, r14
    2408:	60 81       	ld	r22, Z
    240a:	c6 01       	movw	r24, r12
    240c:	47 96       	adiw	r24, 0x17	; 23
    240e:	0e 94 bf 12 	call	0x257e	; 0x257e <__eeupd_byte_m16>
			break;
		
		default:
			break;
	}
	TIMSK |= (1 << TOIE1);
    2412:	e9 e5       	ldi	r30, 0x59	; 89
    2414:	f0 e0       	ldi	r31, 0x00	; 0
    2416:	80 81       	ld	r24, Z
    2418:	84 60       	ori	r24, 0x04	; 4
    241a:	80 83       	st	Z, r24
}
    241c:	df 91       	pop	r29
    241e:	cf 91       	pop	r28
    2420:	1f 91       	pop	r17
    2422:	0f 91       	pop	r16
    2424:	ff 90       	pop	r15
    2426:	ef 90       	pop	r14
    2428:	df 90       	pop	r13
    242a:	cf 90       	pop	r12
    242c:	bf 90       	pop	r11
    242e:	af 90       	pop	r10
    2430:	9f 90       	pop	r9
    2432:	8f 90       	pop	r8
    2434:	7f 90       	pop	r7
    2436:	6f 90       	pop	r6
    2438:	08 95       	ret

0000243a <__udivmodqi4>:
    243a:	99 1b       	sub	r25, r25
    243c:	79 e0       	ldi	r23, 0x09	; 9
    243e:	04 c0       	rjmp	.+8      	; 0x2448 <__udivmodqi4_ep>

00002440 <__udivmodqi4_loop>:
    2440:	99 1f       	adc	r25, r25
    2442:	96 17       	cp	r25, r22
    2444:	08 f0       	brcs	.+2      	; 0x2448 <__udivmodqi4_ep>
    2446:	96 1b       	sub	r25, r22

00002448 <__udivmodqi4_ep>:
    2448:	88 1f       	adc	r24, r24
    244a:	7a 95       	dec	r23
    244c:	c9 f7       	brne	.-14     	; 0x2440 <__udivmodqi4_loop>
    244e:	80 95       	com	r24
    2450:	08 95       	ret

00002452 <__udivmodhi4>:
    2452:	aa 1b       	sub	r26, r26
    2454:	bb 1b       	sub	r27, r27
    2456:	51 e1       	ldi	r21, 0x11	; 17
    2458:	07 c0       	rjmp	.+14     	; 0x2468 <__udivmodhi4_ep>

0000245a <__udivmodhi4_loop>:
    245a:	aa 1f       	adc	r26, r26
    245c:	bb 1f       	adc	r27, r27
    245e:	a6 17       	cp	r26, r22
    2460:	b7 07       	cpc	r27, r23
    2462:	10 f0       	brcs	.+4      	; 0x2468 <__udivmodhi4_ep>
    2464:	a6 1b       	sub	r26, r22
    2466:	b7 0b       	sbc	r27, r23

00002468 <__udivmodhi4_ep>:
    2468:	88 1f       	adc	r24, r24
    246a:	99 1f       	adc	r25, r25
    246c:	5a 95       	dec	r21
    246e:	a9 f7       	brne	.-22     	; 0x245a <__udivmodhi4_loop>
    2470:	80 95       	com	r24
    2472:	90 95       	com	r25
    2474:	bc 01       	movw	r22, r24
    2476:	cd 01       	movw	r24, r26
    2478:	08 95       	ret

0000247a <__divmodhi4>:
    247a:	97 fb       	bst	r25, 7
    247c:	09 2e       	mov	r0, r25
    247e:	07 26       	eor	r0, r23
    2480:	0a d0       	rcall	.+20     	; 0x2496 <__divmodhi4_neg1>
    2482:	77 fd       	sbrc	r23, 7
    2484:	04 d0       	rcall	.+8      	; 0x248e <__divmodhi4_neg2>
    2486:	e5 df       	rcall	.-54     	; 0x2452 <__udivmodhi4>
    2488:	06 d0       	rcall	.+12     	; 0x2496 <__divmodhi4_neg1>
    248a:	00 20       	and	r0, r0
    248c:	1a f4       	brpl	.+6      	; 0x2494 <__divmodhi4_exit>

0000248e <__divmodhi4_neg2>:
    248e:	70 95       	com	r23
    2490:	61 95       	neg	r22
    2492:	7f 4f       	sbci	r23, 0xFF	; 255

00002494 <__divmodhi4_exit>:
    2494:	08 95       	ret

00002496 <__divmodhi4_neg1>:
    2496:	f6 f7       	brtc	.-4      	; 0x2494 <__divmodhi4_exit>
    2498:	90 95       	com	r25
    249a:	81 95       	neg	r24
    249c:	9f 4f       	sbci	r25, 0xFF	; 255
    249e:	08 95       	ret

000024a0 <do_rand>:
    24a0:	a0 e0       	ldi	r26, 0x00	; 0
    24a2:	b0 e0       	ldi	r27, 0x00	; 0
    24a4:	e6 e5       	ldi	r30, 0x56	; 86
    24a6:	f2 e1       	ldi	r31, 0x12	; 18
    24a8:	0c 94 28 13 	jmp	0x2650	; 0x2650 <__prologue_saves__+0x10>
    24ac:	ec 01       	movw	r28, r24
    24ae:	a8 80       	ld	r10, Y
    24b0:	b9 80       	ldd	r11, Y+1	; 0x01
    24b2:	ca 80       	ldd	r12, Y+2	; 0x02
    24b4:	db 80       	ldd	r13, Y+3	; 0x03
    24b6:	a1 14       	cp	r10, r1
    24b8:	b1 04       	cpc	r11, r1
    24ba:	c1 04       	cpc	r12, r1
    24bc:	d1 04       	cpc	r13, r1
    24be:	41 f4       	brne	.+16     	; 0x24d0 <do_rand+0x30>
    24c0:	84 e2       	ldi	r24, 0x24	; 36
    24c2:	a8 2e       	mov	r10, r24
    24c4:	89 ed       	ldi	r24, 0xD9	; 217
    24c6:	b8 2e       	mov	r11, r24
    24c8:	8b e5       	ldi	r24, 0x5B	; 91
    24ca:	c8 2e       	mov	r12, r24
    24cc:	87 e0       	ldi	r24, 0x07	; 7
    24ce:	d8 2e       	mov	r13, r24
    24d0:	c6 01       	movw	r24, r12
    24d2:	b5 01       	movw	r22, r10
    24d4:	2d e1       	ldi	r18, 0x1D	; 29
    24d6:	33 ef       	ldi	r19, 0xF3	; 243
    24d8:	41 e0       	ldi	r20, 0x01	; 1
    24da:	50 e0       	ldi	r21, 0x00	; 0
    24dc:	0e 94 05 13 	call	0x260a	; 0x260a <__divmodsi4>
    24e0:	27 ea       	ldi	r18, 0xA7	; 167
    24e2:	31 e4       	ldi	r19, 0x41	; 65
    24e4:	40 e0       	ldi	r20, 0x00	; 0
    24e6:	50 e0       	ldi	r21, 0x00	; 0
    24e8:	0e 94 e6 12 	call	0x25cc	; 0x25cc <__mulsi3>
    24ec:	7b 01       	movw	r14, r22
    24ee:	8c 01       	movw	r16, r24
    24f0:	c6 01       	movw	r24, r12
    24f2:	b5 01       	movw	r22, r10
    24f4:	2d e1       	ldi	r18, 0x1D	; 29
    24f6:	33 ef       	ldi	r19, 0xF3	; 243
    24f8:	41 e0       	ldi	r20, 0x01	; 1
    24fa:	50 e0       	ldi	r21, 0x00	; 0
    24fc:	0e 94 05 13 	call	0x260a	; 0x260a <__divmodsi4>
    2500:	ca 01       	movw	r24, r20
    2502:	b9 01       	movw	r22, r18
    2504:	2c ee       	ldi	r18, 0xEC	; 236
    2506:	34 ef       	ldi	r19, 0xF4	; 244
    2508:	4f ef       	ldi	r20, 0xFF	; 255
    250a:	5f ef       	ldi	r21, 0xFF	; 255
    250c:	0e 94 e6 12 	call	0x25cc	; 0x25cc <__mulsi3>
    2510:	6e 0d       	add	r22, r14
    2512:	7f 1d       	adc	r23, r15
    2514:	80 1f       	adc	r24, r16
    2516:	91 1f       	adc	r25, r17
    2518:	97 ff       	sbrs	r25, 7
    251a:	04 c0       	rjmp	.+8      	; 0x2524 <do_rand+0x84>
    251c:	61 50       	subi	r22, 0x01	; 1
    251e:	70 40       	sbci	r23, 0x00	; 0
    2520:	80 40       	sbci	r24, 0x00	; 0
    2522:	90 48       	sbci	r25, 0x80	; 128
    2524:	68 83       	st	Y, r22
    2526:	79 83       	std	Y+1, r23	; 0x01
    2528:	8a 83       	std	Y+2, r24	; 0x02
    252a:	9b 83       	std	Y+3, r25	; 0x03
    252c:	9b 01       	movw	r18, r22
    252e:	3f 77       	andi	r19, 0x7F	; 127
    2530:	c9 01       	movw	r24, r18
    2532:	cd b7       	in	r28, 0x3d	; 61
    2534:	de b7       	in	r29, 0x3e	; 62
    2536:	ea e0       	ldi	r30, 0x0A	; 10
    2538:	0c 94 44 13 	jmp	0x2688	; 0x2688 <__epilogue_restores__+0x10>

0000253c <rand_r>:
    253c:	0e 94 50 12 	call	0x24a0	; 0x24a0 <do_rand>
    2540:	08 95       	ret

00002542 <rand>:
    2542:	8b e1       	ldi	r24, 0x1B	; 27
    2544:	91 e0       	ldi	r25, 0x01	; 1
    2546:	0e 94 50 12 	call	0x24a0	; 0x24a0 <do_rand>
    254a:	08 95       	ret

0000254c <srand>:
    254c:	a0 e0       	ldi	r26, 0x00	; 0
    254e:	b0 e0       	ldi	r27, 0x00	; 0
    2550:	80 93 1b 01 	sts	0x011B, r24
    2554:	90 93 1c 01 	sts	0x011C, r25
    2558:	a0 93 1d 01 	sts	0x011D, r26
    255c:	b0 93 1e 01 	sts	0x011E, r27
    2560:	08 95       	ret

00002562 <__eerd_byte_m16>:
    2562:	e1 99       	sbic	0x1c, 1	; 28
    2564:	fe cf       	rjmp	.-4      	; 0x2562 <__eerd_byte_m16>
    2566:	9f bb       	out	0x1f, r25	; 31
    2568:	8e bb       	out	0x1e, r24	; 30
    256a:	e0 9a       	sbi	0x1c, 0	; 28
    256c:	99 27       	eor	r25, r25
    256e:	8d b3       	in	r24, 0x1d	; 29
    2570:	08 95       	ret

00002572 <__eerd_word_m16>:
    2572:	a8 e1       	ldi	r26, 0x18	; 24
    2574:	b0 e0       	ldi	r27, 0x00	; 0
    2576:	42 e0       	ldi	r20, 0x02	; 2
    2578:	50 e0       	ldi	r21, 0x00	; 0
    257a:	0c 94 d8 12 	jmp	0x25b0	; 0x25b0 <__eerd_blraw_m16>

0000257e <__eeupd_byte_m16>:
    257e:	26 2f       	mov	r18, r22

00002580 <__eeupd_r18_m16>:
    2580:	e1 99       	sbic	0x1c, 1	; 28
    2582:	fe cf       	rjmp	.-4      	; 0x2580 <__eeupd_r18_m16>
    2584:	9f bb       	out	0x1f, r25	; 31
    2586:	8e bb       	out	0x1e, r24	; 30
    2588:	e0 9a       	sbi	0x1c, 0	; 28
    258a:	01 97       	sbiw	r24, 0x01	; 1
    258c:	0d b2       	in	r0, 0x1d	; 29
    258e:	02 16       	cp	r0, r18
    2590:	31 f0       	breq	.+12     	; 0x259e <__eeupd_r18_m16+0x1e>
    2592:	2d bb       	out	0x1d, r18	; 29
    2594:	0f b6       	in	r0, 0x3f	; 63
    2596:	f8 94       	cli
    2598:	e2 9a       	sbi	0x1c, 2	; 28
    259a:	e1 9a       	sbi	0x1c, 1	; 28
    259c:	0f be       	out	0x3f, r0	; 63
    259e:	08 95       	ret

000025a0 <__eeupd_word_m16>:
    25a0:	01 96       	adiw	r24, 0x01	; 1
    25a2:	27 2f       	mov	r18, r23
    25a4:	0e 94 c0 12 	call	0x2580	; 0x2580 <__eeupd_r18_m16>
    25a8:	0c 94 bf 12 	jmp	0x257e	; 0x257e <__eeupd_byte_m16>

000025ac <__eerd_block_m16>:
    25ac:	dc 01       	movw	r26, r24
    25ae:	cb 01       	movw	r24, r22

000025b0 <__eerd_blraw_m16>:
    25b0:	fc 01       	movw	r30, r24
    25b2:	e1 99       	sbic	0x1c, 1	; 28
    25b4:	fe cf       	rjmp	.-4      	; 0x25b2 <__eerd_blraw_m16+0x2>
    25b6:	06 c0       	rjmp	.+12     	; 0x25c4 <__eerd_blraw_m16+0x14>
    25b8:	ff bb       	out	0x1f, r31	; 31
    25ba:	ee bb       	out	0x1e, r30	; 30
    25bc:	e0 9a       	sbi	0x1c, 0	; 28
    25be:	31 96       	adiw	r30, 0x01	; 1
    25c0:	0d b2       	in	r0, 0x1d	; 29
    25c2:	0d 92       	st	X+, r0
    25c4:	41 50       	subi	r20, 0x01	; 1
    25c6:	50 40       	sbci	r21, 0x00	; 0
    25c8:	b8 f7       	brcc	.-18     	; 0x25b8 <__eerd_blraw_m16+0x8>
    25ca:	08 95       	ret

000025cc <__mulsi3>:
    25cc:	62 9f       	mul	r22, r18
    25ce:	d0 01       	movw	r26, r0
    25d0:	73 9f       	mul	r23, r19
    25d2:	f0 01       	movw	r30, r0
    25d4:	82 9f       	mul	r24, r18
    25d6:	e0 0d       	add	r30, r0
    25d8:	f1 1d       	adc	r31, r1
    25da:	64 9f       	mul	r22, r20
    25dc:	e0 0d       	add	r30, r0
    25de:	f1 1d       	adc	r31, r1
    25e0:	92 9f       	mul	r25, r18
    25e2:	f0 0d       	add	r31, r0
    25e4:	83 9f       	mul	r24, r19
    25e6:	f0 0d       	add	r31, r0
    25e8:	74 9f       	mul	r23, r20
    25ea:	f0 0d       	add	r31, r0
    25ec:	65 9f       	mul	r22, r21
    25ee:	f0 0d       	add	r31, r0
    25f0:	99 27       	eor	r25, r25
    25f2:	72 9f       	mul	r23, r18
    25f4:	b0 0d       	add	r27, r0
    25f6:	e1 1d       	adc	r30, r1
    25f8:	f9 1f       	adc	r31, r25
    25fa:	63 9f       	mul	r22, r19
    25fc:	b0 0d       	add	r27, r0
    25fe:	e1 1d       	adc	r30, r1
    2600:	f9 1f       	adc	r31, r25
    2602:	bd 01       	movw	r22, r26
    2604:	cf 01       	movw	r24, r30
    2606:	11 24       	eor	r1, r1
    2608:	08 95       	ret

0000260a <__divmodsi4>:
    260a:	97 fb       	bst	r25, 7
    260c:	09 2e       	mov	r0, r25
    260e:	05 26       	eor	r0, r21
    2610:	0e d0       	rcall	.+28     	; 0x262e <__divmodsi4_neg1>
    2612:	57 fd       	sbrc	r21, 7
    2614:	04 d0       	rcall	.+8      	; 0x261e <__divmodsi4_neg2>
    2616:	4b d0       	rcall	.+150    	; 0x26ae <__udivmodsi4>
    2618:	0a d0       	rcall	.+20     	; 0x262e <__divmodsi4_neg1>
    261a:	00 1c       	adc	r0, r0
    261c:	38 f4       	brcc	.+14     	; 0x262c <__divmodsi4_exit>

0000261e <__divmodsi4_neg2>:
    261e:	50 95       	com	r21
    2620:	40 95       	com	r20
    2622:	30 95       	com	r19
    2624:	21 95       	neg	r18
    2626:	3f 4f       	sbci	r19, 0xFF	; 255
    2628:	4f 4f       	sbci	r20, 0xFF	; 255
    262a:	5f 4f       	sbci	r21, 0xFF	; 255

0000262c <__divmodsi4_exit>:
    262c:	08 95       	ret

0000262e <__divmodsi4_neg1>:
    262e:	f6 f7       	brtc	.-4      	; 0x262c <__divmodsi4_exit>
    2630:	90 95       	com	r25
    2632:	80 95       	com	r24
    2634:	70 95       	com	r23
    2636:	61 95       	neg	r22
    2638:	7f 4f       	sbci	r23, 0xFF	; 255
    263a:	8f 4f       	sbci	r24, 0xFF	; 255
    263c:	9f 4f       	sbci	r25, 0xFF	; 255
    263e:	08 95       	ret

00002640 <__prologue_saves__>:
    2640:	2f 92       	push	r2
    2642:	3f 92       	push	r3
    2644:	4f 92       	push	r4
    2646:	5f 92       	push	r5
    2648:	6f 92       	push	r6
    264a:	7f 92       	push	r7
    264c:	8f 92       	push	r8
    264e:	9f 92       	push	r9
    2650:	af 92       	push	r10
    2652:	bf 92       	push	r11
    2654:	cf 92       	push	r12
    2656:	df 92       	push	r13
    2658:	ef 92       	push	r14
    265a:	ff 92       	push	r15
    265c:	0f 93       	push	r16
    265e:	1f 93       	push	r17
    2660:	cf 93       	push	r28
    2662:	df 93       	push	r29
    2664:	cd b7       	in	r28, 0x3d	; 61
    2666:	de b7       	in	r29, 0x3e	; 62
    2668:	ca 1b       	sub	r28, r26
    266a:	db 0b       	sbc	r29, r27
    266c:	0f b6       	in	r0, 0x3f	; 63
    266e:	f8 94       	cli
    2670:	de bf       	out	0x3e, r29	; 62
    2672:	0f be       	out	0x3f, r0	; 63
    2674:	cd bf       	out	0x3d, r28	; 61
    2676:	09 94       	ijmp

00002678 <__epilogue_restores__>:
    2678:	2a 88       	ldd	r2, Y+18	; 0x12
    267a:	39 88       	ldd	r3, Y+17	; 0x11
    267c:	48 88       	ldd	r4, Y+16	; 0x10
    267e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2680:	6e 84       	ldd	r6, Y+14	; 0x0e
    2682:	7d 84       	ldd	r7, Y+13	; 0x0d
    2684:	8c 84       	ldd	r8, Y+12	; 0x0c
    2686:	9b 84       	ldd	r9, Y+11	; 0x0b
    2688:	aa 84       	ldd	r10, Y+10	; 0x0a
    268a:	b9 84       	ldd	r11, Y+9	; 0x09
    268c:	c8 84       	ldd	r12, Y+8	; 0x08
    268e:	df 80       	ldd	r13, Y+7	; 0x07
    2690:	ee 80       	ldd	r14, Y+6	; 0x06
    2692:	fd 80       	ldd	r15, Y+5	; 0x05
    2694:	0c 81       	ldd	r16, Y+4	; 0x04
    2696:	1b 81       	ldd	r17, Y+3	; 0x03
    2698:	aa 81       	ldd	r26, Y+2	; 0x02
    269a:	b9 81       	ldd	r27, Y+1	; 0x01
    269c:	ce 0f       	add	r28, r30
    269e:	d1 1d       	adc	r29, r1
    26a0:	0f b6       	in	r0, 0x3f	; 63
    26a2:	f8 94       	cli
    26a4:	de bf       	out	0x3e, r29	; 62
    26a6:	0f be       	out	0x3f, r0	; 63
    26a8:	cd bf       	out	0x3d, r28	; 61
    26aa:	ed 01       	movw	r28, r26
    26ac:	08 95       	ret

000026ae <__udivmodsi4>:
    26ae:	a1 e2       	ldi	r26, 0x21	; 33
    26b0:	1a 2e       	mov	r1, r26
    26b2:	aa 1b       	sub	r26, r26
    26b4:	bb 1b       	sub	r27, r27
    26b6:	fd 01       	movw	r30, r26
    26b8:	0d c0       	rjmp	.+26     	; 0x26d4 <__udivmodsi4_ep>

000026ba <__udivmodsi4_loop>:
    26ba:	aa 1f       	adc	r26, r26
    26bc:	bb 1f       	adc	r27, r27
    26be:	ee 1f       	adc	r30, r30
    26c0:	ff 1f       	adc	r31, r31
    26c2:	a2 17       	cp	r26, r18
    26c4:	b3 07       	cpc	r27, r19
    26c6:	e4 07       	cpc	r30, r20
    26c8:	f5 07       	cpc	r31, r21
    26ca:	20 f0       	brcs	.+8      	; 0x26d4 <__udivmodsi4_ep>
    26cc:	a2 1b       	sub	r26, r18
    26ce:	b3 0b       	sbc	r27, r19
    26d0:	e4 0b       	sbc	r30, r20
    26d2:	f5 0b       	sbc	r31, r21

000026d4 <__udivmodsi4_ep>:
    26d4:	66 1f       	adc	r22, r22
    26d6:	77 1f       	adc	r23, r23
    26d8:	88 1f       	adc	r24, r24
    26da:	99 1f       	adc	r25, r25
    26dc:	1a 94       	dec	r1
    26de:	69 f7       	brne	.-38     	; 0x26ba <__udivmodsi4_loop>
    26e0:	60 95       	com	r22
    26e2:	70 95       	com	r23
    26e4:	80 95       	com	r24
    26e6:	90 95       	com	r25
    26e8:	9b 01       	movw	r18, r22
    26ea:	ac 01       	movw	r20, r24
    26ec:	bd 01       	movw	r22, r26
    26ee:	cf 01       	movw	r24, r30
    26f0:	08 95       	ret

000026f2 <_exit>:
    26f2:	f8 94       	cli

000026f4 <__stop_program>:
    26f4:	ff cf       	rjmp	.-2      	; 0x26f4 <__stop_program>
